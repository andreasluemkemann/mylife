<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terminal.Gui</name>
    </assembly>
    <members>
        <member name="T:Terminal.Gui.Application">
            <summary>A static, singleton class representing the application. This class is the entry point for the application.</summary>
            <example>
                <code>
                Application.Init();
                var win = new Window ($"Example App ({Application.QuitKey} to quit)");
                Application.Run(win);
                win.Dispose();
                Application.Shutdown();
                </code>
            </example>
            <remarks>TODO: Flush this out.</remarks>
        </member>
        <member name="P:Terminal.Gui.Application.Driver">
            <summary>Gets the <see cref="T:Terminal.Gui.ConsoleDriver"/> that has been selected. See also <see cref="P:Terminal.Gui.Application.ForceDriver"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.Application.Force16Colors">
            <summary>
                Gets or sets whether <see cref="P:Terminal.Gui.Application.Driver"/> will be forced to output only the 16 colors defined in
                <see cref="T:Terminal.Gui.ColorName"/>. The default is <see langword="false"/>, meaning 24-bit (TrueColor) colors will be output
                as long as the selected <see cref="T:Terminal.Gui.ConsoleDriver"/> supports TrueColor.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.ForceDriver">
            <summary>
                Forces the use of the specified driver (one of "fake", "ansi", "curses", "net", or "windows"). If not
                specified, the driver is selected based on the platform.
            </summary>
            <remarks>
                Note, <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/> will override this configuration setting if called
                with either `driver` or `driverName` specified.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Application.SupportedCultures">
            <summary>Gets all cultures supported by the application without the invariant language.</summary>
        </member>
        <member name="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)">
            <summary>Initializes a new instance of <see cref="N:Terminal.Gui"/> Application.</summary>
            <para>Call this method once per instance (or after <see cref="M:Terminal.Gui.Application.Shutdown"/> has been called).</para>
            <para>
                This function loads the right <see cref="T:Terminal.Gui.ConsoleDriver"/> for the platform, Creates a <see cref="T:Terminal.Gui.Toplevel"/>. and
                assigns it to <see cref="P:Terminal.Gui.Application.Top"/>
            </para>
            <para>
                <see cref="M:Terminal.Gui.Application.Shutdown"/> must be called when the application is closing (typically after
                <see cref="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/> has returned) to ensure resources are cleaned up and
                terminal settings
                restored.
            </para>
            <para>
                The <see cref="M:Terminal.Gui.Application.Run``1(System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/> function combines
                <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/> and <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/>
                into a single
                call. An application cam use <see cref="M:Terminal.Gui.Application.Run``1(System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/> without explicitly calling
                <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/>.
            </para>
            <param name="driver">
                The <see cref="T:Terminal.Gui.ConsoleDriver"/> to use. If neither <paramref name="driver"/> or
                <paramref name="driverName"/> are specified the default driver for the platform will be used.
            </param>
            <param name="driverName">
                The short name (e.g. "net", "windows", "ansi", "fake", or "curses") of the
                <see cref="T:Terminal.Gui.ConsoleDriver"/> to use. If neither <paramref name="driver"/> or <paramref name="driverName"/> are
                specified the default driver for the platform will be used.
            </param>
        </member>
        <member name="M:Terminal.Gui.Application.GetDriverTypes">
            <summary>Gets of list of <see cref="T:Terminal.Gui.ConsoleDriver"/> types that are available.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Application.Shutdown">
            <summary>Shutdown an application initialized with <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/>.</summary>
            <remarks>
                Shutdown must be called for every call to <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/> or
                <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/> to ensure all resources are cleaned
                up (Disposed)
                and terminal settings are restored.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.Application.NotifyNewRunState">
            <summary>
                Notify that a new <see cref="T:Terminal.Gui.RunState"/> was created (<see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> was called). The token is
                created in <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> and this event will be fired before that function exits.
            </summary>
            <remarks>
                If <see cref="P:Terminal.Gui.Application.EndAfterFirstIteration"/> is <see langword="true"/> callers to <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/>
                must also subscribe to <see cref="E:Terminal.Gui.Application.NotifyStopRunState"/> and manually dispose of the <see cref="T:Terminal.Gui.RunState"/> token
                when the application is done.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.Application.NotifyStopRunState">
            <summary>Notify that a existent <see cref="T:Terminal.Gui.RunState"/> is stopping (<see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/> was called).</summary>
            <remarks>
                If <see cref="P:Terminal.Gui.Application.EndAfterFirstIteration"/> is <see langword="true"/> callers to <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/>
                must also subscribe to <see cref="E:Terminal.Gui.Application.NotifyStopRunState"/> and manually dispose of the <see cref="T:Terminal.Gui.RunState"/> token
                when the application is done.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)">
            <summary>Building block API: Prepares the provided <see cref="T:Terminal.Gui.Toplevel"/> for execution.</summary>
            <returns>
                The <see cref="T:Terminal.Gui.RunState"/> handle that needs to be passed to the <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/> method upon
                completion.
            </returns>
            <param name="toplevel">The <see cref="T:Terminal.Gui.Toplevel"/> to prepare execution for.</param>
            <remarks>
                This method prepares the provided <see cref="T:Terminal.Gui.Toplevel"/> for running with the focus, it adds this to the list
                of <see cref="T:Terminal.Gui.Toplevel"/>s, lays out the Subviews, focuses the first element, and draws the <see cref="T:Terminal.Gui.Toplevel"/>
                in the screen. This is usually followed by executing the <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.RunState)"/> method, and then the
                <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/> method upon termination which will undo these changes.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.PositionCursor(Terminal.Gui.View)">
            <summary>
            Calls <see cref="M:Terminal.Gui.View.PositionCursor"/> on the most focused view in the view starting with <paramref name="view"/>.
            </summary>
            <remarks>
            Does nothing if <paramref name="view"/> is <see langword="null"/> or if the most focused view is not visible or enabled.
            <para>
            If the most focused view is not visible within it's superview, the cursor will be hidden.
            </para>
            </remarks>
            <returns><see langword="true"/> if a view positioned the cursor and the position is visible.</returns>
        </member>
        <member name="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)">
            <summary>
                Runs the application by creating a <see cref="T:Terminal.Gui.Toplevel"/> object and calling
                <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/>.
            </summary>
            <remarks>
                <para>Calling <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/> first is not needed as this function will initialize the application.</para>
                <para>
                    <see cref="M:Terminal.Gui.Application.Shutdown"/> must be called when the application is closing (typically after Run> has returned) to
                    ensure resources are cleaned up and terminal settings restored.
                </para>
                <para>
                    The caller is responsible for disposing the object returned by this method.
                </para>
            </remarks>
            <returns>The created <see cref="T:Terminal.Gui.Toplevel"/> object. The caller is responsible for disposing this object.</returns>
        </member>
        <member name="M:Terminal.Gui.Application.Run``1(System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)">
            <summary>
                Runs the application by creating a <see cref="T:Terminal.Gui.Toplevel"/>-derived object of type <c>T</c> and calling
                <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/>.
            </summary>
            <remarks>
                <para>Calling <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/> first is not needed as this function will initialize the application.</para>
                <para>
                    <see cref="M:Terminal.Gui.Application.Shutdown"/> must be called when the application is closing (typically after Run> has returned) to
                    ensure resources are cleaned up and terminal settings restored.
                </para>
                <para>
                    The caller is responsible for disposing the object returned by this method.
                </para>
            </remarks>
            <param name="errorHandler"></param>
            <param name="driver">
                The <see cref="T:Terminal.Gui.ConsoleDriver"/> to use. If not specified the default driver for the platform will
                be used ( <see cref="T:Terminal.Gui.WindowsDriver"/>, <see cref="T:Terminal.Gui.CursesDriver"/>, or <see cref="T:Terminal.Gui.NetDriver"/>). Must be
                <see langword="null"/> if <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/> has already been called.
            </param>
            <returns>The created T object. The caller is responsible for disposing this object.</returns>
        </member>
        <member name="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)">
            <summary>Runs the Application using the provided <see cref="T:Terminal.Gui.Toplevel"/> view.</summary>
            <remarks>
                <para>
                    This method is used to start processing events for the main application, but it is also used to run other
                    modal <see cref="T:Terminal.Gui.View"/>s such as <see cref="T:Terminal.Gui.Dialog"/> boxes.
                </para>
                <para>
                    To make a <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/> stop execution, call
                    <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/>.
                </para>
                <para>
                    Calling <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/> is equivalent to calling
                    <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/>, followed by <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.RunState)"/>, and then calling
                    <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/>.
                </para>
                <para>
                    Alternatively, to have a program control the main loop and process events manually, call
                    <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> to set things up manually and then repeatedly call
                    <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.RunState)"/> with the wait parameter set to false. By doing this the
                    <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.RunState)"/> method will only process any pending events, timers, idle handlers and then
                    return control immediately.
                </para>
                <para>Calling <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/> first is not needed as this function will initialize the application.</para>
                <para>
                    RELEASE builds only: When <paramref name="errorHandler"/> is <see langword="null"/> any exceptions will be
                    rethrown. Otherwise, if <paramref name="errorHandler"/> will be called. If <paramref name="errorHandler"/>
                    returns <see langword="true"/> the <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.RunState)"/> will resume; otherwise this method will
                    exit.
                </para>
            </remarks>
            <param name="view">The <see cref="T:Terminal.Gui.Toplevel"/> to run as a modal.</param>
            <param name="errorHandler">
                RELEASE builds only: Handler for any unhandled exceptions (resumes when returns true,
                rethrows when null).
            </param>
            <param name="driver">
                The <see cref="T:Terminal.Gui.ConsoleDriver"/> to use. If not specified the default driver for the platform will
                be used ( <see cref="T:Terminal.Gui.WindowsDriver"/>, <see cref="T:Terminal.Gui.CursesDriver"/>, or <see cref="T:Terminal.Gui.NetDriver"/>). Must be
                <see langword="null"/> if <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/> was called.
            </param>
        </member>
        <member name="M:Terminal.Gui.Application.AddTimeout(System.TimeSpan,System.Func{System.Boolean})">
            <summary>Adds a timeout to the application.</summary>
            <remarks>
                When time specified passes, the callback will be invoked. If the callback returns true, the timeout will be
                reset, repeating the invocation. If it returns false, the timeout will stop and be removed. The returned value is a
                token that can be used to stop the timeout by calling <see cref="M:Terminal.Gui.Application.RemoveTimeout(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.RemoveTimeout(System.Object)">
            <summary>Removes a previously scheduled timeout</summary>
            <remarks>The token parameter is the value returned by <see cref="M:Terminal.Gui.Application.AddTimeout(System.TimeSpan,System.Func{System.Boolean})"/>.</remarks>
            Returns
            <c>true</c>
            if the timeout is successfully removed; otherwise,
            <c>false</c>
            .
            This method also returns
            <c>false</c>
            if the timeout is not found.
        </member>
        <member name="M:Terminal.Gui.Application.Invoke(System.Action)">
            <summary>Runs <paramref name="action"/> on the thread that is processing events</summary>
            <param name="action">the action to be invoked on the main processing thread.</param>
        </member>
        <member name="M:Terminal.Gui.Application.Wakeup">
            <summary>Wakes up the running application that might be waiting on input.</summary>
        </member>
        <member name="M:Terminal.Gui.Application.Refresh">
            <summary>Triggers a refresh of the entire display.</summary>
        </member>
        <member name="E:Terminal.Gui.Application.Iteration">
            <summary>This event is raised on each iteration of the main loop.</summary>
            <remarks>See also <see cref="T:Terminal.Gui.Timeout"/></remarks>
        </member>
        <member name="P:Terminal.Gui.Application.MainLoop">
            <summary>The <see cref="P:Terminal.Gui.Application.MainLoop"/> driver for the application</summary>
            <value>The main loop.</value>
        </member>
        <member name="P:Terminal.Gui.Application.EndAfterFirstIteration">
            <summary>
                Set to true to cause <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/> to be called after the first iteration. Set to false (the default) to
                cause the application to continue running until Application.RequestStop () is called.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.RunState)">
            <summary>Building block API: Runs the main loop for the created <see cref="T:Terminal.Gui.Toplevel"/>.</summary>
            <param name="state">The state returned by the <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> method.</param>
        </member>
        <member name="M:Terminal.Gui.Application.RunIteration(Terminal.Gui.RunState@,System.Boolean@)">
            <summary>Run one application iteration.</summary>
            <param name="state">The state returned by <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/>.</param>
            <param name="firstIteration">
                Set to <see langword="true"/> if this is the first run loop iteration. Upon return, it
                will be set to <see langword="false"/> if at least one iteration happened.
            </param>
        </member>
        <member name="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)">
            <summary>Stops the provided <see cref="T:Terminal.Gui.Toplevel"/>, causing or the <paramref name="top"/> if provided.</summary>
            <param name="top">The <see cref="T:Terminal.Gui.Toplevel"/> to stop.</param>
            <remarks>
                <para>This will cause <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/> to return.</para>
                <para>
                    Calling <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> is equivalent to setting the <see cref="P:Terminal.Gui.Toplevel.Running"/>
                    property on the currently running <see cref="T:Terminal.Gui.Toplevel"/> to false.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)">
            <summary>
                Building block API: completes the execution of a <see cref="T:Terminal.Gui.Toplevel"/> that was started with
                <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> .
            </summary>
            <param name="runState">The <see cref="T:Terminal.Gui.RunState"/> returned by the <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> method.</param>
        </member>
        <member name="F:Terminal.Gui.Application._topLevels">
            <summary>Holds the stack of TopLevel views.</summary>
        </member>
        <member name="P:Terminal.Gui.Application.Top">
            <summary>The <see cref="T:Terminal.Gui.Toplevel"/> object used for the application on startup (<seealso cref="P:Terminal.Gui.Application.Top"/>)</summary>
            <value>The top.</value>
        </member>
        <member name="P:Terminal.Gui.Application.Current">
            <summary>
                The current <see cref="T:Terminal.Gui.Toplevel"/> object. This is updated in <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> enters and leaves to
                point to the current
                <see cref="T:Terminal.Gui.Toplevel"/> .
            </summary>
            <remarks>
                Only relevant in scenarios where <see cref="P:Terminal.Gui.Toplevel.IsOverlappedContainer"/> is <see langword="true"/>.
            </remarks>
            <value>The current.</value>
        </member>
        <member name="E:Terminal.Gui.Application.SizeChanging">
            <summary>Invoked when the terminal's size changed. The new size of the terminal is provided.</summary>
            <remarks>
                Event handlers can set <see cref="P:Terminal.Gui.SizeChangedEventArgs.Cancel"/> to <see langword="true"/> to prevent
                <see cref="T:Terminal.Gui.Application"/> from changing it's size to match the new terminal size.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.OnSizeChanging(Terminal.Gui.SizeChangedEventArgs)">
            <summary>
                Called when the application's size changes. Sets the size of all <see cref="T:Terminal.Gui.Toplevel"/>s and fires the
                <see cref="E:Terminal.Gui.Application.SizeChanging"/> event.
            </summary>
            <param name="args">The new size.</param>
            <returns><see lanword="true"/>if the size was changed.</returns>
        </member>
        <member name="P:Terminal.Gui.Application.IsMouseDisabled">
            <summary>Disable or enable the mouse. The mouse is enabled by default.</summary>
        </member>
        <member name="P:Terminal.Gui.Application.WantContinuousButtonPressedView">
            <summary>The current <see cref="T:Terminal.Gui.View"/> object that wants continuous mouse button pressed events.</summary>
        </member>
        <member name="P:Terminal.Gui.Application.MouseGrabView">
            <summary>
                Gets the view that grabbed the mouse (e.g. for dragging). When this is set, all mouse events will be routed to
                this view until the view calls <see cref="M:Terminal.Gui.Application.UngrabMouse"/> or the mouse is released.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Application.GrabbingMouse">
            <summary>Invoked when a view wants to grab the mouse; can be canceled.</summary>
        </member>
        <member name="E:Terminal.Gui.Application.UnGrabbingMouse">
            <summary>Invoked when a view wants un-grab the mouse; can be canceled.</summary>
        </member>
        <member name="E:Terminal.Gui.Application.GrabbedMouse">
            <summary>Invoked after a view has grabbed the mouse.</summary>
        </member>
        <member name="E:Terminal.Gui.Application.UnGrabbedMouse">
            <summary>Invoked after a view has un-grabbed the mouse.</summary>
        </member>
        <member name="M:Terminal.Gui.Application.GrabMouse(Terminal.Gui.View)">
            <summary>
                Grabs the mouse, forcing all mouse events to be routed to the specified view until <see cref="M:Terminal.Gui.Application.UngrabMouse"/>
                is called.
            </summary>
            <param name="view">View that will receive all mouse events until <see cref="M:Terminal.Gui.Application.UngrabMouse"/> is invoked.</param>
        </member>
        <member name="M:Terminal.Gui.Application.UngrabMouse">
            <summary>Releases the mouse grab, so mouse events will be routed to the view on which the mouse is.</summary>
        </member>
        <member name="E:Terminal.Gui.Application.MouseEvent">
            <summary>Event fired when a mouse move or click occurs. Coordinates are screen relative.</summary>
            <remarks>
                <para>
                    Use this event to receive mouse events in screen coordinates. Use <see cref="E:Terminal.Gui.Application.MouseEvent"/> to
                    receive mouse events relative to a <see cref="P:Terminal.Gui.View.Viewport"/>.
                </para>
                <para>The <see cref="P:Terminal.Gui.MouseEvent.View"/> will contain the <see cref="T:Terminal.Gui.View"/> that contains the mouse coordinates.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <summary>Called when a mouse event occurs. Raises the <see cref="E:Terminal.Gui.Application.MouseEvent"/> event.</summary>
            <remarks>This method can be used to simulate a mouse event, e.g. in unit tests.</remarks>
            <param name="mouseEvent">The mouse event with coordinates relative to the screen.</param>
        </member>
        <member name="P:Terminal.Gui.Application.AlternateForwardKey">
            <summary>Alternative key to navigate forwards through views. Ctrl+Tab is the primary key.</summary>
        </member>
        <member name="P:Terminal.Gui.Application.AlternateBackwardKey">
            <summary>Alternative key to navigate backwards through views. Shift+Ctrl+Tab is the primary key.</summary>
        </member>
        <member name="P:Terminal.Gui.Application.QuitKey">
            <summary>Gets or sets the key to quit the application.</summary>
        </member>
        <member name="E:Terminal.Gui.Application.KeyDown">
            <summary>
                Event fired when the user presses a key. Fired by <see cref="M:Terminal.Gui.Application.OnKeyDown(Terminal.Gui.Key)"/>.
                <para>
                    Set <see cref="P:Terminal.Gui.Key.Handled"/> to <see langword="true"/> to indicate the key was handled and to prevent
                    additional processing.
                </para>
            </summary>
            <remarks>
                All drivers support firing the <see cref="E:Terminal.Gui.Application.KeyDown"/> event. Some drivers (Curses) do not support firing the
                <see cref="E:Terminal.Gui.Application.KeyDown"/> and <see cref="E:Terminal.Gui.Application.KeyUp"/> events.
                <para>Fired after <see cref="E:Terminal.Gui.Application.KeyDown"/> and before <see cref="E:Terminal.Gui.Application.KeyUp"/>.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.OnKeyDown(Terminal.Gui.Key)">
            <summary>
                Called by the <see cref="T:Terminal.Gui.ConsoleDriver"/> when the user presses a key. Fires the <see cref="E:Terminal.Gui.Application.KeyDown"/> event
                then calls <see cref="M:Terminal.Gui.View.NewKeyDownEvent(Terminal.Gui.Key)"/> on all top level views. Called after <see cref="M:Terminal.Gui.Application.OnKeyDown(Terminal.Gui.Key)"/> and
                before <see cref="M:Terminal.Gui.Application.OnKeyUp(Terminal.Gui.Key)"/>.
            </summary>
            <remarks>Can be used to simulate key press events.</remarks>
            <param name="keyEvent"></param>
            <returns><see langword="true"/> if the key was handled.</returns>
        </member>
        <member name="E:Terminal.Gui.Application.KeyUp">
            <summary>
                Event fired when the user releases a key. Fired by <see cref="M:Terminal.Gui.Application.OnKeyUp(Terminal.Gui.Key)"/>.
                <para>
                    Set <see cref="P:Terminal.Gui.Key.Handled"/> to <see langword="true"/> to indicate the key was handled and to prevent
                    additional processing.
                </para>
            </summary>
            <remarks>
                All drivers support firing the <see cref="E:Terminal.Gui.Application.KeyDown"/> event. Some drivers (Curses) do not support firing the
                <see cref="E:Terminal.Gui.Application.KeyDown"/> and <see cref="E:Terminal.Gui.Application.KeyUp"/> events.
                <para>Fired after <see cref="E:Terminal.Gui.Application.KeyDown"/>.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.OnKeyUp(Terminal.Gui.Key)">
            <summary>
                Called by the <see cref="T:Terminal.Gui.ConsoleDriver"/> when the user releases a key. Fires the <see cref="E:Terminal.Gui.Application.KeyUp"/> event
                then calls <see cref="M:Terminal.Gui.View.NewKeyUpEvent(Terminal.Gui.Key)"/> on all top level views. Called after <see cref="M:Terminal.Gui.Application.OnKeyDown(Terminal.Gui.Key)"/>.
            </summary>
            <remarks>Can be used to simulate key press events.</remarks>
            <param name="a"></param>
            <returns><see langword="true"/> if the key was handled.</returns>
        </member>
        <member name="T:Terminal.Gui.Application.MainLoopSyncContext">
            <summary>
                provides the sync context set while executing code in Terminal.Gui, to let
                users use async/await on their code
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.OverlappedChildren">
            <summary>
                Gets the list of the Overlapped children which are not modal <see cref="T:Terminal.Gui.Toplevel"/> from the
                <see cref="P:Terminal.Gui.Application.OverlappedTop"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.OverlappedTop">
            <summary>
                The <see cref="T:Terminal.Gui.Toplevel"/> object used for the application on startup which
                <see cref="P:Terminal.Gui.Toplevel.IsOverlappedContainer"/> is true.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.BringOverlappedTopToFront">
            <summary>Brings the superview of the most focused overlapped view is on front.</summary>
        </member>
        <member name="M:Terminal.Gui.Application.GetTopOverlappedChild(System.Type,System.String[])">
            <summary>Gets the current visible Toplevel overlapped child that matches the arguments pattern.</summary>
            <param name="type">The type.</param>
            <param name="exclude">The strings to exclude.</param>
            <returns>The matched view.</returns>
        </member>
        <member name="M:Terminal.Gui.Application.MoveToOverlappedChild(Terminal.Gui.Toplevel)">
            <summary>
                Move to the next Overlapped child from the <see cref="P:Terminal.Gui.Application.OverlappedTop"/> and set it as the <see cref="P:Terminal.Gui.Application.Top"/> if
                it is not already.
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Application.OverlappedMoveNext">
            <summary>Move to the next Overlapped child from the <see cref="P:Terminal.Gui.Application.OverlappedTop"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.Application.OverlappedMovePrevious">
            <summary>Move to the previous Overlapped child from the <see cref="P:Terminal.Gui.Application.OverlappedTop"/>.</summary>
        </member>
        <member name="T:Terminal.Gui.Clipboard">
            <summary>Provides cut, copy, and paste support for the OS clipboard.</summary>
            <remarks>
                <para>On Windows, the <see cref="T:Terminal.Gui.Clipboard"/> class uses the Windows Clipboard APIs via P/Invoke.</para>
                <para>
                    On Linux, when not running under Windows Subsystem for Linux (WSL), the <see cref="T:Terminal.Gui.Clipboard"/> class uses
                    the xclip command line tool. If xclip is not installed, the clipboard will not work.
                </para>
                <para>
                    On Linux, when running under Windows Subsystem for Linux (WSL), the <see cref="T:Terminal.Gui.Clipboard"/> class launches
                    Windows' powershell.exe via WSL interop and uses the "Set-Clipboard" and "Get-Clipboard" Powershell CmdLets.
                </para>
                <para>
                    On the Mac, the <see cref="T:Terminal.Gui.Clipboard"/> class uses the MacO OS X pbcopy and pbpaste command line tools and
                    the Mac clipboard APIs vai P/Invoke.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Clipboard.Contents">
            <summary>Gets (copies from) or sets (pastes to) the contents of the OS clipboard.</summary>
        </member>
        <member name="P:Terminal.Gui.Clipboard.IsSupported">
            <summary>Returns true if the environmental dependencies are in place to interact with the OS clipboard.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Terminal.Gui.Clipboard.TryGetClipboardData(System.String@)">
            <summary>Copies the _contents of the OS clipboard to <paramref name="result"/> if possible.</summary>
            <param name="result">The _contents of the OS clipboard if successful, <see cref="F:System.String.Empty"/> if not.</param>
            <returns><see langword="true"/> the OS clipboard was retrieved, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Clipboard.TrySetClipboardData(System.String)">
            <summary>Pastes the <paramref name="text"/> to the OS clipboard if possible.</summary>
            <param name="text">The text to paste to the OS clipboard.</param>
            <returns><see langword="true"/> the OS clipboard was set, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.ClipboardProcessRunner">
            <summary>
                Helper class for console drivers to invoke shell commands to interact with the clipboard. Used primarily by
                CursesDriver, but also used in Unit tests which is why it is in ConsoleDriver.cs.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ClipboardBase">
            <summary>Shared abstract class to enforce rules from the implementation of the <see cref="T:Terminal.Gui.IClipboard"/> interface.</summary>
        </member>
        <member name="P:Terminal.Gui.ClipboardBase.IsSupported">
            <summary>Returns true if the environmental dependencies are in place to interact with the OS clipboard</summary>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.GetClipboardData">
            <summary>Returns the contents of the OS clipboard if possible.</summary>
            <returns>The contents of the OS clipboard if successful.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to copy from the OS clipboard.</exception>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.SetClipboardData(System.String)">
            <summary>Pastes the <paramref name="text"/> to the OS clipboard if possible.</summary>
            <param name="text">The text to paste to the OS clipboard.</param>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to paste to the OS clipboard.</exception>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.TryGetClipboardData(System.String@)">
            <summary>Copies the contents of the OS clipboard to <paramref name="result"/> if possible.</summary>
            <param name="result">The contents of the OS clipboard if successful.</param>
            <returns><see langword="true"/> the OS clipboard was retrieved, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.TrySetClipboardData(System.String)">
            <summary>Pastes the <paramref name="text"/> to the OS clipboard if possible.</summary>
            <param name="text">The text to paste to the OS clipboard.</param>
            <returns><see langword="true"/> the OS clipboard was set, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.GetClipboardDataImpl">
            <summary>
                Returns the contents of the OS clipboard if possible. Implemented by <see cref="T:Terminal.Gui.ConsoleDriver"/>-specific
                subclasses.
            </summary>
            <returns>The contents of the OS clipboard if successful.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to copy from the OS clipboard.</exception>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.SetClipboardDataImpl(System.String)">
            <summary>
                Pastes the <paramref name="text"/> to the OS clipboard if possible. Implemented by <see cref="T:Terminal.Gui.ConsoleDriver"/>
                -specific subclasses.
            </summary>
            <param name="text">The text to paste to the OS clipboard.</param>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to paste to the OS clipboard.</exception>
        </member>
        <member name="T:Terminal.Gui.IClipboard">
            <summary>Definition to interact with the OS clipboard.</summary>
        </member>
        <member name="P:Terminal.Gui.IClipboard.IsSupported">
            <summary>Returns true if the environmental dependencies are in place to interact with the OS clipboard.</summary>
        </member>
        <member name="M:Terminal.Gui.IClipboard.GetClipboardData">
            <summary>Get the operation system clipboard.</summary>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to read the clipboard contents.</exception>
        </member>
        <member name="M:Terminal.Gui.IClipboard.SetClipboardData(System.String)">
            <summary>Sets the operation system clipboard.</summary>
            <param name="text"></param>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to set the clipboard contents.</exception>
        </member>
        <member name="M:Terminal.Gui.IClipboard.TryGetClipboardData(System.String@)">
            <summary>Gets the operation system clipboard if possible.</summary>
            <param name="result">Clipboard contents read</param>
            <returns>true if it was possible to read the OS clipboard.</returns>
        </member>
        <member name="M:Terminal.Gui.IClipboard.TrySetClipboardData(System.String)">
            <summary>Sets the operation system clipboard if possible.</summary>
            <param name="text"></param>
            <returns>True if the clipboard content was set successfully.</returns>
        </member>
        <member name="T:Terminal.Gui.AppScope">
            <summary>The <see cref="T:Terminal.Gui.Scope`1"/> class for application-defined configuration settings.</summary>
            <remarks></remarks>
            <example>
                <para>
                    Use the <see cref="T:Terminal.Gui.SerializableConfigurationProperty"/> attribute to mark properties that should be
                    serialized as part of application-defined configuration settings.
                </para>
                <code>
             public class MyAppSettings {
            	[SerializableConfigurationProperty (Scope = typeof (AppScope))]
            	public static bool? MyProperty { get; set; } = true;
             }
             </code>
                <para>THe resultant Json will look like this:</para>
                <code>
               "AppSettings": {
                 "MyAppSettings.MyProperty": true,
                 "UICatalog.ShowStatusBar": true
               },
             </code>
            </example>
        </member>
        <member name="T:Terminal.Gui.AttributeJsonConverter">
            <summary>Json converter fro the <see cref="T:Terminal.Gui.Attribute"/> class.</summary>
        </member>
        <member name="P:Terminal.Gui.AttributeJsonConverter.Instance">
            <summary></summary>
        </member>
        <member name="T:Terminal.Gui.ColorJsonConverter">
            <summary>Json converter for the <see cref="T:Terminal.Gui.Color"/> class.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorJsonConverter.Instance">
            <summary>Singleton</summary>
        </member>
        <member name="T:Terminal.Gui.ColorSchemeJsonConverter">
            <summary>Implements a JSON converter for <see cref="T:Terminal.Gui.ColorScheme"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorSchemeJsonConverter.Instance">
            <summary>Singleton</summary>
        </member>
        <member name="M:Terminal.Gui.ColorSchemeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ColorSchemeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Terminal.Gui.ColorScheme,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ConfigProperty">
            <summary>
                Holds a property's value and the <see cref="P:Terminal.Gui.ConfigProperty.PropertyInfo"/> that allows <see cref="T:Terminal.Gui.ConfigurationManager"/> to
                get and set the property's value.
            </summary>
            <remarks>
                Configuration properties must be <see langword="public"/> and <see langword="static"/> and have the
                <see cref="T:Terminal.Gui.SerializableConfigurationProperty"/> attribute. If the type of the property requires specialized JSON
                serialization, a <see cref="T:System.Text.Json.Serialization.JsonConverter"/> must be provided using the <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/>
                attribute.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ConfigProperty.PropertyInfo">
            <summary>Describes the property.</summary>
        </member>
        <member name="P:Terminal.Gui.ConfigProperty.PropertyValue">
            <summary>
                Holds the property's value as it was either read from the class's implementation or from a config file. If the
                property has not been set (e.g. because no configuration file specified a value), this will be
                <see langword="null"/>.
            </summary>
            <remarks>
                On <see langword="set"/>, performs a sparse-copy of the new value to the existing value (only copies elements
                of the object that are non-null).
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ConfigProperty.Apply">
            <summary>Applies the <see cref="P:Terminal.Gui.ConfigProperty.PropertyValue"/> to the property described by <see cref="P:Terminal.Gui.ConfigProperty.PropertyInfo"/>.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConfigProperty.GetJsonPropertyName(System.Reflection.PropertyInfo)">
            <summary>
                Helper to get either the Json property named (specified by [JsonPropertyName(name)] or the actual property
                name.
            </summary>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConfigProperty.RetrieveValue">
            <summary>
                Retrieves (using reflection) the value of the static property described in <see cref="P:Terminal.Gui.ConfigProperty.PropertyInfo"/> into
                <see cref="P:Terminal.Gui.ConfigProperty.PropertyValue"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ConfigurationManager">
            <summary>
                Provides settings and configuration management for Terminal.Gui applications.
                <para>
                    Users can set Terminal.Gui settings on a global or per-application basis by providing JSON formatted
                    configuration files. The configuration files can be placed in at <c>.tui</c> folder in the user's home
                    directory (e.g. <c>C:/Users/username/.tui</c>, or <c>/usr/username/.tui</c>), the folder where the Terminal.Gui
                    application was launched from (e.g. <c>./.tui</c> ), or as a resource within the Terminal.Gui application's
                    main assembly.
                </para>
                <para>
                    Settings are defined in JSON format, according to this schema:
                    https://gui-cs.github.io/Terminal.Gui/schemas/tui-config-schema.json
                </para>
                <para>
                    Settings that will apply to all applications (global settings) reside in files named <c>config.json</c>.
                    Settings that will apply to a specific Terminal.Gui application reside in files named
                    <c>appname.config.json</c>, where <c>appname</c> is the assembly name of the application (e.g.
                    <c>UICatalog.config.json</c>).
                </para>
                Settings are applied using the following precedence (higher precedence settings overwrite lower precedence
                settings):
                <para>
                    1. Application configuration found in the users' home directory (<c>~/.tui/appname.config.json</c>) --
                    Highest precedence
                </para>
                <para>
                    2. Application configuration found in the directory the app was launched from (
                    <c>./.tui/appname.config.json</c>).
                </para>
                <para>3. Application configuration found in the applications' resources (<c>Resources/config.json</c>).</para>
                <para>4. Global configuration found in the user's home directory (<c>~/.tui/config.json</c>).</para>
                <para>5. Global configuration found in the directory the app was launched from (<c>./.tui/config.json</c>).</para>
                <para>
                    6. Global configuration in <c>Terminal.Gui.dll</c>'s resources (<c>Terminal.Gui.Resources.config.json</c>) --
                    Lowest Precedence.
                </para>
            </summary>
        </member>
        <member name="T:Terminal.Gui.ConfigurationManager.ConfigLocations">
            <summary>
                Describes the location of the configuration files. The constants can be combined (bitwise) to specify multiple
                locations.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConfigurationManager.ConfigLocations.None">
            <summary>No configuration will be loaded.</summary>
            <remarks>
                Used for development and testing only. For Terminal,Gui to function properly, at least
                <see cref="F:Terminal.Gui.ConfigurationManager.ConfigLocations.DefaultOnly"/> should be set.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ConfigurationManager.ConfigLocations.DefaultOnly">
            <summary>
                Global configuration in <c>Terminal.Gui.dll</c>'s resources (<c>Terminal.Gui.Resources.config.json</c>) --
                Lowest Precedence.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConfigurationManager.ConfigLocations.All">
            <summary>This constant is a combination of all locations</summary>
        </member>
        <member name="F:Terminal.Gui.ConfigurationManager._allConfigProperties">
            <summary>
                A dictionary of all properties in the Terminal.Gui project that are decorated with the
                <see cref="T:Terminal.Gui.SerializableConfigurationProperty"/> attribute. The keys are the property names pre-pended with the
                class that implements the property (e.g. <c>Application.UseSystemConsole</c>). The values are instances of
                <see cref="T:Terminal.Gui.ConfigProperty"/> which hold the property's value and the <see cref="T:System.Reflection.PropertyInfo"/> that allows
                <see cref="T:Terminal.Gui.ConfigurationManager"/> to get and set the property's value.
            </summary>
            <remarks>Is <see langword="null"/> until <see cref="M:Terminal.Gui.ConfigurationManager.Initialize"/> is called.</remarks>
        </member>
        <member name="F:Terminal.Gui.ConfigurationManager._settings">
            <summary>The backing property for <see cref="P:Terminal.Gui.ConfigurationManager.Settings"/>.</summary>
            <remarks>
                Is <see langword="null"/> until <see cref="M:Terminal.Gui.ConfigurationManager.Reset"/> is called. Gets set to a new instance by deserialization
                (see <see cref="M:Terminal.Gui.ConfigurationManager.Load(System.Boolean)"/>).
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ConfigurationManager.AppName">
            <summary>Name of the running application. By default this property is set to the application's assembly name.</summary>
        </member>
        <member name="P:Terminal.Gui.ConfigurationManager.AppSettings">
            <summary>Application-specific configuration settings scope.</summary>
        </member>
        <member name="P:Terminal.Gui.ConfigurationManager.Glyphs">
            <summary>
                The set of glyphs used to draw checkboxes, lines, borders, etc...See also
                <seealso cref="T:Terminal.Gui.GlyphDefinitions"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConfigurationManager.Locations">
            <summary>
                Gets and sets the locations where <see cref="T:Terminal.Gui.ConfigurationManager"/> will look for config files. The value is
                <see cref="F:Terminal.Gui.ConfigurationManager.ConfigLocations.All"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConfigurationManager.Settings">
            <summary>
                The root object of Terminal.Gui configuration settings / JSON schema. Contains only properties with the
                <see cref="T:Terminal.Gui.SettingsScope"/> attribute value.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConfigurationManager.Themes">
            <summary>
                The root object of Terminal.Gui themes manager. Contains only properties with the <see cref="T:Terminal.Gui.ThemeScope"/>
                attribute value.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConfigurationManager.ThrowOnJsonErrors">
            <summary>
                Gets or sets whether the <see cref="T:Terminal.Gui.ConfigurationManager"/> should throw an exception if it encounters an
                error on deserialization. If <see langword="false"/> (the default), the error is logged and printed to the console
                when <see cref="M:Terminal.Gui.Application.Shutdown"/> is called.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ConfigurationManager.Applied">
            <summary>Event fired when an updated configuration has been applied to the application.</summary>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.Apply">
            <summary>Applies the configuration settings to the running <see cref="T:Terminal.Gui.Application"/> instance.</summary>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.GetEmptyJson">
            <summary>Returns an empty Json document with just the $schema tag.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.Load(System.Boolean)">
            <summary>
                Loads all settings found in the various configuration storage locations to the
                <see cref="T:Terminal.Gui.ConfigurationManager"/>. Optionally, resets all settings attributed with
                <see cref="T:Terminal.Gui.SerializableConfigurationProperty"/> to the defaults.
            </summary>
            <remarks>Use <see cref="M:Terminal.Gui.ConfigurationManager.Apply"/> to cause the loaded settings to be applied to the running application.</remarks>
            <param name="reset">
                If <see langword="true"/> the state of <see cref="T:Terminal.Gui.ConfigurationManager"/> will be reset to the
                defaults.
            </param>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.OnApplied">
            <summary>
                Called when an updated configuration has been applied to the application. Fires the <see cref="E:Terminal.Gui.ConfigurationManager.Applied"/>
                event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.OnUpdated">
            <summary>
                Called when the configuration has been updated from a configuration file. Invokes the <see cref="E:Terminal.Gui.ConfigurationManager.Updated"/>
                event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.PrintJsonErrors">
            <summary>Prints any Json deserialization errors that occurred during deserialization to the console.</summary>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.Reset">
            <summary>
                Resets the state of <see cref="T:Terminal.Gui.ConfigurationManager"/>. Should be called whenever a new app session (e.g. in
                <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/> starts. Called by <see cref="M:Terminal.Gui.ConfigurationManager.Load(System.Boolean)"/> if the <c>reset</c> parameter is
                <see langword="true"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:Terminal.Gui.ConfigurationManager.Updated">
            <summary>Event fired when the configuration has been updated from a configuration source. application.</summary>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.DeepMemberWiseCopy(System.Object,System.Object)">
            <summary>
                System.Text.Json does not support copying a deserialized object to an existing instance. To work around this,
                we implement a 'deep, member-wise copy' method.
            </summary>
            <remarks>TOOD: When System.Text.Json implements `PopulateObject` revisit https://github.com/dotnet/corefx/issues/37627</remarks>
            <param name="source"></param>
            <param name="destination"></param>
            <returns><paramref name="destination"/> updated from <paramref name="source"/></returns>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.GetHardCodedDefaults">
            <summary>
                Retrieves the hard coded default settings from the Terminal.Gui library implementation. Used in development of
                the library to generate the default configuration file. Before calling Application.Init, make sure
                <see cref="P:Terminal.Gui.ConfigurationManager.Locations"/> is set to <see cref="F:Terminal.Gui.ConfigurationManager.ConfigLocations.None"/>.
            </summary>
            <remarks>
                <para>
                    This method is only really useful when using ConfigurationManagerTests to generate the JSON doc that is
                    embedded into Terminal.Gui (during development).
                </para>
                <para>
                    WARNING: The <c>Terminal.Gui.Resources.config.json</c> resource has setting definitions (Themes) that are NOT
                    generated by this function. If you use this function to regenerate <c>Terminal.Gui.Resources.config.json</c>,
                    make sure you copy the Theme definitions from the existing <c>Terminal.Gui.Resources.config.json</c> file.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.Initialize">
            <summary>
                Initializes the internal state of ConfigurationManager. Nominally called once as part of application startup
                to initialize global state. Also called from some Unit Tests to ensure correctness (e.g. Reset()).
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManager.ToJson">
            <summary>Creates a JSON document with the configuration specified.</summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ConfigurationManagerEventArgs">
            <summary>Event arguments for the <see cref="T:Terminal.Gui.ConfigurationManager"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.ConfigurationManagerEventArgs.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.ConfigurationManagerEventArgs"/></summary>
        </member>
        <member name="T:Terminal.Gui.ThemeManagerEventArgs">
            <summary>Event arguments for the <see cref="T:Terminal.Gui.ThemeManager"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.ThemeManagerEventArgs.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.ThemeManagerEventArgs"/></summary>
        </member>
        <member name="P:Terminal.Gui.ThemeManagerEventArgs.NewTheme">
            <summary>The name of the new active theme..</summary>
        </member>
        <member name="T:Terminal.Gui.KeyJsonConverter">
            <summary>Support for <see cref="T:Terminal.Gui.Key"/> in JSON in the form of "Ctrl-X" or "Alt-Shift-F1".</summary>
        </member>
        <member name="M:Terminal.Gui.KeyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.KeyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Terminal.Gui.Key,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.RuneJsonConverter">
            <summary>
                Json converter for <see cref="T:System.Text.Rune"/>. Supports Json converter for <see cref="T:System.Text.Rune"/>. Supports A string as
                one of: - unicode char (e.g. "☑") - U+hex format (e.g. "U+2611") - \u format (e.g. "\\u2611") A number - The
                unicode code in decimal
            </summary>
        </member>
        <member name="T:Terminal.Gui.Scope`1">
            <summary>
                Defines a configuration settings scope. Classes that inherit from this abstract class can be used to define
                scopes for configuration settings. Each scope is a JSON object that contains a set of configuration settings.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Scope`1.#ctor">
            <summary>Crates a new instance.</summary>
        </member>
        <member name="M:Terminal.Gui.Scope`1.RetrieveValues">
            <summary>Retrieves the values of the properties of this scope from their corresponding static properties.</summary>
        </member>
        <member name="M:Terminal.Gui.Scope`1.Update(Terminal.Gui.Scope{`0})">
            <summary>Updates this instance from the specified source scope.</summary>
            <param name="source"></param>
            <returns>The updated scope (this).</returns>
        </member>
        <member name="M:Terminal.Gui.Scope`1.Apply">
            <summary>Applies the values of the properties of this scope to their corresponding static properties.</summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ScopeJsonConverter`1">
            <summary>
                Converts <see cref="T:Terminal.Gui.Scope`1"/> instances to/from JSON. Does all the heavy lifting of reading/writing config
                data to/from <see cref="T:Terminal.Gui.ConfigurationManager"/> JSON documents.
            </summary>
            <typeparam name="scopeT"></typeparam>
        </member>
        <member name="T:Terminal.Gui.SerializableConfigurationProperty">
            <summary>An attribute that can be applied to a property to indicate that it should included in the configuration file.</summary>
            <example>
                [SerializableConfigurationProperty(Scope = typeof(Configuration.ThemeManager.ThemeScope)), JsonConverter
                (typeof (JsonStringEnumConverter))] public static LineStyle DefaultBorderStyle { ...
            </example>
        </member>
        <member name="P:Terminal.Gui.SerializableConfigurationProperty.OmitClassName">
            <summary>
                If <see langword="true"/>, the property will be serialized to the configuration file using only the property
                name as the key. If <see langword="false"/>, the property will be serialized to the configuration file using the
                property name pre-pended with the classname (e.g. <c>Application.UseSystemConsole</c>).
            </summary>
        </member>
        <member name="P:Terminal.Gui.SerializableConfigurationProperty.Scope">
            <summary>Specifies the scope of the property.</summary>
        </member>
        <member name="T:Terminal.Gui.SettingsScope">
            <summary>
                The root object of Terminal.Gui configuration settings / JSON schema. Contains only properties attributed with
                <see cref="T:Terminal.Gui.SettingsScope"/>.
            </summary>
            <example>
                <code>
             {
               "$schema" : "https://gui-cs.github.io/Terminal.Gui/schemas/tui-config-schema.json",
               "Application.UseSystemConsole" : true,
               "Theme" : "Default",
               "Themes": {
               },
             },
            </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="F:Terminal.Gui.SettingsScope.Sources">
            <summary>The list of paths to the configuration files.</summary>
        </member>
        <member name="P:Terminal.Gui.SettingsScope.Schema">
            <summary>Points to our JSON schema.</summary>
        </member>
        <member name="M:Terminal.Gui.SettingsScope.Update(System.IO.Stream,System.String)">
            <summary>Updates the <see cref="T:Terminal.Gui.SettingsScope"/> with the settings in a JSON string.</summary>
            <param name="stream">Json document to update the settings with.</param>
            <param name="source">The source (filename/resource name) the Json document was read from.</param>
        </member>
        <member name="M:Terminal.Gui.SettingsScope.Update(System.String)">
            <summary>Updates the <see cref="T:Terminal.Gui.SettingsScope"/> with the settings in a JSON file.</summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Terminal.Gui.SettingsScope.Update(System.String,System.String)">
            <summary>Updates the <see cref="T:Terminal.Gui.SettingsScope"/> with the settings in a JSON string.</summary>
            <param name="json">Json document to update the settings with.</param>
            <param name="source">The source (filename/resource name) the Json document was read from.</param>
        </member>
        <member name="M:Terminal.Gui.SettingsScope.UpdateFromResource(System.Reflection.Assembly,System.String)">
            <summary>Updates the <see cref="T:Terminal.Gui.SettingsScope"/> with the settings from a Json resource.</summary>
            <param name="assembly"></param>
            <param name="resourceName"></param>
        </member>
        <member name="T:Terminal.Gui.ThemeManager">
            <summary>Contains a dictionary of the <see cref="P:Terminal.Gui.ThemeManager.Theme"/>s for a Terminal.Gui application.</summary>
            <remarks>
                <para>A Theme is a collection of settings that are named. The default theme is named "Default".</para>
                <para>The <see cref="P:Terminal.Gui.ThemeManager.Theme"/> property is used to detemrine the currently active theme.</para>
            </remarks>
            <para>
                <see cref="T:Terminal.Gui.ThemeManager"/> is a singleton class. It is created when the first <see cref="T:Terminal.Gui.ThemeManager"/> property
                is accessed. Accessing <see cref="P:Terminal.Gui.ThemeManager.Instance"/> is the same as accessing
                <see cref="P:Terminal.Gui.ConfigurationManager.Themes"/>.
            </para>
            <example>
                <code>
            	"Themes": [
            	{
            		"Default": {
            			"ColorSchemes": [
            			{
            			"TopLevel": {
            			"Normal": {
            				"Foreground": "BrightGreen",
            				"Background": "Black"
            			},
            			"Focus": {
            			"Foreground": "White",
            				"Background": "Cyan"
            
            			},
            			"HotNormal": {
            				"Foreground": "Yellow",
            				"Background": "Black"
            
            			},
            			"HotFocus": {
            				"Foreground": "Blue",
            				"Background": "Cyan"
            			},
            			"Disabled": {
            				"Foreground": "DarkGray",
            				"Background": "Black"
            
            			}
            		}
            	}
            </code>
            </example>
        </member>
        <member name="P:Terminal.Gui.ThemeManager.Instance">
            <summary>Class is a singleton...</summary>
        </member>
        <member name="P:Terminal.Gui.ThemeManager.Theme">
            <summary>Gets or sets the currently selected theme. The value is persisted to the "Theme" property.</summary>
        </member>
        <member name="P:Terminal.Gui.ThemeManager.Themes">
            <summary>Holds the <see cref="T:Terminal.Gui.ThemeScope"/> definitions.</summary>
        </member>
        <member name="P:Terminal.Gui.ThemeManager.SelectedTheme">
            <summary>The currently selected theme. This is the internal version; see <see cref="P:Terminal.Gui.ThemeManager.Theme"/>.</summary>
        </member>
        <member name="E:Terminal.Gui.ThemeManager.ThemeChanged">
            <summary>Event fired he selected theme has changed. application.</summary>
        </member>
        <member name="M:Terminal.Gui.ThemeManager.OnThemeChanged(System.String)">
            <summary>Called when the selected theme has changed. Fires the <see cref="E:Terminal.Gui.ThemeManager.ThemeChanged"/> event.</summary>
        </member>
        <member name="T:Terminal.Gui.ThemeScope">
            <summary>
                The root object for a Theme. A Theme is a set of settings that are applied to the running
                <see cref="T:Terminal.Gui.Application"/> as a group.
            </summary>
            <remarks>
                <para></para>
            </remarks>
            <example>
                <code>
            	"Default": {
            		"ColorSchemes": [
            		{
            		"TopLevel": {
            		"Normal": {
            			"Foreground": "BrightGreen",
            			"Background": "Black"
            		},
            		"Focus": {
            		"Foreground": "White",
            			"Background": "Cyan"
            
            		},
            		"HotNormal": {
            			"Foreground": "Yellow",
            			"Background": "Black"
            
            		},
            		"HotFocus": {
            			"Foreground": "Blue",
            			"Background": "Cyan"
            		},
            		"Disabled": {
            			"Foreground": "DarkGray",
            			"Background": "Black"
            
            		}
            	}
            </code>
            </example>
        </member>
        <member name="T:Terminal.Gui.ConsoleDriver">
            <summary>Base class for Terminal.Gui ConsoleDriver implementations.</summary>
            <remarks>
                There are currently four implementations: - <see cref="T:Terminal.Gui.CursesDriver"/> (for Unix and Mac) -
                <see cref="T:Terminal.Gui.WindowsDriver"/> - <see cref="T:Terminal.Gui.NetDriver"/> that uses the .NET Console API - <see cref="T:Terminal.Gui.FakeConsole"/>
                for unit testing.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Screen">
            <summary>Gets the location and size of the terminal screen.</summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Clip">
            <summary>
                Gets or sets the clip rectangle that <see cref="M:Terminal.Gui.ConsoleDriver.AddRune(System.Text.Rune)"/> and <see cref="M:Terminal.Gui.ConsoleDriver.AddStr(System.String)"/> are subject
                to.
            </summary>
            <value>The rectangle describing the of <see cref="P:Terminal.Gui.ConsoleDriver.Clip"/> region.</value>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Clipboard">
            <summary>Get the operating system clipboard.</summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Col">
            <summary>
                Gets the column last set by <see cref="M:Terminal.Gui.ConsoleDriver.Move(System.Int32,System.Int32)"/>. <see cref="P:Terminal.Gui.ConsoleDriver.Col"/> and <see cref="P:Terminal.Gui.ConsoleDriver.Row"/> are used by
                <see cref="M:Terminal.Gui.ConsoleDriver.AddRune(System.Text.Rune)"/> and <see cref="M:Terminal.Gui.ConsoleDriver.AddStr(System.String)"/> to determine where to add content.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Cols">
            <summary>The number of columns visible in the terminal.</summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Contents">
            <summary>
                The contents of the application output. The driver outputs this buffer to the terminal when
                <see cref="M:Terminal.Gui.ConsoleDriver.UpdateScreen"/> is called.
                <remarks>The format of the array is rows, columns. The first index is the row, the second index is the column.</remarks>
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Left">
            <summary>The leftmost column in the terminal.</summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Row">
            <summary>
                Gets the row last set by <see cref="M:Terminal.Gui.ConsoleDriver.Move(System.Int32,System.Int32)"/>. <see cref="P:Terminal.Gui.ConsoleDriver.Col"/> and <see cref="P:Terminal.Gui.ConsoleDriver.Row"/> are used by
                <see cref="M:Terminal.Gui.ConsoleDriver.AddRune(System.Text.Rune)"/> and <see cref="M:Terminal.Gui.ConsoleDriver.AddStr(System.String)"/> to determine where to add content.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Rows">
            <summary>The number of rows visible in the terminal.</summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Top">
            <summary>The topmost row in the terminal.</summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.RunningUnitTests">
            <summary>
                Set this to true in any unit tests that attempt to test drivers other than FakeDriver.
                <code>
             public ColorTests ()
             {
               ConsoleDriver.RunningUnitTests = true;
             }
            </code>
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.AddRune(System.Text.Rune)">
            <summary>Adds the specified rune to the display at the current cursor position.</summary>
            <remarks>
                <para>
                    When the method returns, <see cref="P:Terminal.Gui.ConsoleDriver.Col"/> will be incremented by the number of columns
                    <paramref name="rune"/> required, even if the new column value is outside of the <see cref="P:Terminal.Gui.ConsoleDriver.Clip"/> or screen
                    dimensions defined by <see cref="P:Terminal.Gui.ConsoleDriver.Cols"/>.
                </para>
                <para>
                    If <paramref name="rune"/> requires more than one column, and <see cref="P:Terminal.Gui.ConsoleDriver.Col"/> plus the number of columns
                    needed exceeds the <see cref="P:Terminal.Gui.ConsoleDriver.Clip"/> or screen dimensions, the default Unicode replacement character (U+FFFD)
                    will be added instead.
                </para>
            </remarks>
            <param name="rune">Rune to add.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.AddRune(System.Char)">
            <summary>
                Adds the specified <see langword="char"/> to the display at the current cursor position. This method is a
                convenience method that calls <see cref="M:Terminal.Gui.ConsoleDriver.AddRune(System.Text.Rune)"/> with the <see cref="T:System.Text.Rune"/> constructor.
            </summary>
            <param name="c">Character to add.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.AddStr(System.String)">
            <summary>Adds the <paramref name="str"/> to the display at the cursor position.</summary>
            <remarks>
                <para>
                    When the method returns, <see cref="P:Terminal.Gui.ConsoleDriver.Col"/> will be incremented by the number of columns
                    <paramref name="str"/> required, unless the new column value is outside of the <see cref="P:Terminal.Gui.ConsoleDriver.Clip"/> or screen
                    dimensions defined by <see cref="P:Terminal.Gui.ConsoleDriver.Cols"/>.
                </para>
                <para>If <paramref name="str"/> requires more columns than are available, the output will be clipped.</para>
            </remarks>
            <param name="str">String.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.ClearContents">
            <summary>Clears the <see cref="P:Terminal.Gui.ConsoleDriver.Contents"/> of the driver.</summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.EnsureCursorVisibility">
            <summary>Determines if the terminal cursor should be visible or not and sets it accordingly.</summary>
            <returns><see langword="true"/> upon success</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.FillRect(System.Drawing.Rectangle,System.Text.Rune)">
            <summary>Fills the specified rectangle with the specified rune, using <see cref="P:Terminal.Gui.ConsoleDriver.CurrentAttribute"/></summary>
            <remarks>
            The value of <see cref="P:Terminal.Gui.ConsoleDriver.Clip"/> is honored. Any parts of the rectangle not in the clip will not be drawn.
            </remarks>
            <param name="rect">The Screen-relative rectangle.</param>
            <param name="rune">The Rune used to fill the rectangle</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.FillRect(System.Drawing.Rectangle,System.Char)">
            <summary>
                Fills the specified rectangle with the specified <see langword="char"/>. This method is a convenience method
                that calls <see cref="M:Terminal.Gui.ConsoleDriver.FillRect(System.Drawing.Rectangle,System.Text.Rune)"/>.
            </summary>
            <param name="rect"></param>
            <param name="c"></param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.GetCursorVisibility(Terminal.Gui.CursorVisibility@)">
            <summary>Gets the terminal cursor visibility.</summary>
            <param name="visibility">The current <see cref="T:Terminal.Gui.CursorVisibility"/></param>
            <returns><see langword="true"/> upon success</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.GetVersionInfo">
            <summary>Returns the name of the driver and relevant library version information.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.IsRuneSupported(System.Text.Rune)">
            <summary>Tests if the specified rune is supported by the driver.</summary>
            <param name="rune"></param>
            <returns>
                <see langword="true"/> if the rune can be properly presented; <see langword="false"/> if the driver does not
                support displaying this rune.
            </returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.IsValidLocation(System.Int32,System.Int32)">
            <summary>Tests whether the specified coordinate are valid for drawing.</summary>
            <param name="col">The column.</param>
            <param name="row">The row.</param>
            <returns>
                <see langword="false"/> if the coordinate is outside the screen bounds or outside of <see cref="P:Terminal.Gui.ConsoleDriver.Clip"/>.
                <see langword="true"/> otherwise.
            </returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Move(System.Int32,System.Int32)">
            <summary>
                Updates <see cref="P:Terminal.Gui.ConsoleDriver.Col"/> and <see cref="P:Terminal.Gui.ConsoleDriver.Row"/> to the specified column and row in <see cref="P:Terminal.Gui.ConsoleDriver.Contents"/>.
                Used by <see cref="M:Terminal.Gui.ConsoleDriver.AddRune(System.Text.Rune)"/> and <see cref="M:Terminal.Gui.ConsoleDriver.AddStr(System.String)"/> to determine where to add content.
            </summary>
            <remarks>
                <para>This does not move the cursor on the screen, it only updates the internal state of the driver.</para>
                <para>
                    If <paramref name="col"/> or <paramref name="row"/> are negative or beyond  <see cref="P:Terminal.Gui.ConsoleDriver.Cols"/> and
                    <see cref="P:Terminal.Gui.ConsoleDriver.Rows"/>, the method still sets those properties.
                </para>
            </remarks>
            <param name="col">Column to move to.</param>
            <param name="row">Row to move to.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.OnSizeChanged(Terminal.Gui.SizeChangedEventArgs)">
            <summary>Called when the terminal size changes. Fires the <see cref="E:Terminal.Gui.ConsoleDriver.SizeChanged"/> event.</summary>
            <param name="args"></param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Refresh">
            <summary>Updates the screen to reflect all the changes that have been done to the display buffer</summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetCursorVisibility(Terminal.Gui.CursorVisibility)">
            <summary>Sets the terminal cursor visibility.</summary>
            <param name="visibility">The wished <see cref="T:Terminal.Gui.CursorVisibility"/></param>
            <returns><see langword="true"/> upon success</returns>
        </member>
        <member name="E:Terminal.Gui.ConsoleDriver.SizeChanged">
            <summary>The event fired when the terminal is resized.</summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Suspend">
            <summary>Suspends the application (e.g. on Linux via SIGTSTP) and upon resume, resets the console driver.</summary>
            <remarks>This is only implemented in <see cref="T:Terminal.Gui.CursesDriver"/>.</remarks>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.UpdateCursor">
            <summary>Sets the position of the terminal cursor to <see cref="P:Terminal.Gui.ConsoleDriver.Col"/> and <see cref="P:Terminal.Gui.ConsoleDriver.Row"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.UpdateScreen">
            <summary>Redraws the physical screen with the contents that have been queued up via any of the printing commands.</summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Init">
            <summary>Initializes the driver</summary>
            <returns>Returns an instance of <see cref="T:Terminal.Gui.MainLoop"/> using the <see cref="T:Terminal.Gui.IMainLoopDriver"/> for the driver.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.End">
            <summary>Ends the execution of the console driver.</summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.SupportsTrueColor">
            <summary>Gets whether the <see cref="T:Terminal.Gui.ConsoleDriver"/> supports TrueColor output.</summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Force16Colors">
            <summary>
                Gets or sets whether the <see cref="T:Terminal.Gui.ConsoleDriver"/> should use 16 colors instead of the default TrueColors.
                See <see cref="P:Terminal.Gui.Application.Force16Colors"/> to change this setting via <see cref="T:Terminal.Gui.ConfigurationManager"/>.
            </summary>
            <remarks>
                <para>
                    Will be forced to <see langword="true"/> if <see cref="P:Terminal.Gui.ConsoleDriver.SupportsTrueColor"/> is
                    <see langword="false"/>, indicating that the <see cref="T:Terminal.Gui.ConsoleDriver"/> cannot support TrueColor.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.CurrentAttribute">
            <summary>
                The <see cref="T:Terminal.Gui.Attribute"/> that will be used for the next <see cref="M:Terminal.Gui.ConsoleDriver.AddRune(System.Text.Rune)"/> or <see cref="M:Terminal.Gui.ConsoleDriver.AddStr(System.String)"/>
                call.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)">
            <summary>Selects the specified attribute as the attribute to use for future calls to AddRune and AddString.</summary>
            <remarks>Implementations should call <c>base.SetAttribute(c)</c>.</remarks>
            <param name="c">C.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.GetAttribute">
            <summary>Gets the current <see cref="T:Terminal.Gui.Attribute"/>.</summary>
            <returns>The current attribute.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.MakeColor(Terminal.Gui.Color@,Terminal.Gui.Color@)">
            <summary>Makes an <see cref="T:Terminal.Gui.Attribute"/>.</summary>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
            <returns>The attribute for the foreground and background colors.</returns>
        </member>
        <member name="E:Terminal.Gui.ConsoleDriver.KeyDown">
            <summary>Event fired when a key is pressed down. This is a precursor to <see cref="E:Terminal.Gui.ConsoleDriver.KeyUp"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.OnKeyDown(Terminal.Gui.Key)">
            <summary>
                Called when a key is pressed down. Fires the <see cref="E:Terminal.Gui.ConsoleDriver.KeyDown"/> event. This is a precursor to
                <see cref="M:Terminal.Gui.ConsoleDriver.OnKeyUp(Terminal.Gui.Key)"/>.
            </summary>
            <param name="a"></param>
        </member>
        <member name="E:Terminal.Gui.ConsoleDriver.KeyUp">
            <summary>Event fired when a key is released.</summary>
            <remarks>
                Drivers that do not support key release events will fire this event after <see cref="E:Terminal.Gui.ConsoleDriver.KeyDown"/> processing is
                complete.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.OnKeyUp(Terminal.Gui.Key)">
            <summary>Called when a key is released. Fires the <see cref="E:Terminal.Gui.ConsoleDriver.KeyUp"/> event.</summary>
            <remarks>
                Drivers that do not support key release events will calls this method after <see cref="M:Terminal.Gui.ConsoleDriver.OnKeyDown(Terminal.Gui.Key)"/> processing
                is complete.
            </remarks>
            <param name="a"></param>
        </member>
        <member name="E:Terminal.Gui.ConsoleDriver.MouseEvent">
            <summary>Event fired when a mouse event occurs.</summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <summary>Called when a mouse event occurs. Fires the <see cref="E:Terminal.Gui.ConsoleDriver.MouseEvent"/> event.</summary>
            <param name="a"></param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SendKeys(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Simulates a key press.</summary>
            <param name="keyChar">The key character.</param>
            <param name="key">The key.</param>
            <param name="shift">If <see langword="true"/> simulates the Shift key being pressed.</param>
            <param name="alt">If <see langword="true"/> simulates the Alt key being pressed.</param>
            <param name="ctrl">If <see langword="true"/> simulates the Ctrl key being pressed.</param>
        </member>
        <member name="T:Terminal.Gui.CursorVisibility">
            <summary>Terminal Cursor Visibility settings.</summary>
            <remarks>
                Hex value are set as 0xAABBCCDD where : AA stand for the TERMINFO DECSUSR parameter value to be used under
                Linux and MacOS BB stand for the NCurses curs_set parameter value to be used under Linux and MacOS CC stand for the
                CONSOLE_CURSOR_INFO.bVisible parameter value to be used under Windows DD stand for the CONSOLE_CURSOR_INFO.dwSize
                parameter value to be used under Windows
            </remarks>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Default">
            <summary>Cursor caret has default</summary>
            <remarks>
                Works under Xterm-like terminal otherwise this is equivalent to <see ref="Underscore"/>. This default directly
                depends of the XTerm user configuration settings so it could be Block, I-Beam, Underline with possible blinking.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Invisible">
            <summary>Cursor caret is hidden</summary>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Underline">
            <summary>Cursor caret is normally shown as a blinking underline bar _</summary>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.UnderlineFix">
            <summary>Cursor caret is normally shown as a underline bar _</summary>
            <remarks>Under Windows, this is equivalent to <see ref="UnderscoreBlinking"/></remarks>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Vertical">
            <summary>Cursor caret is displayed a blinking vertical bar |</summary>
            <remarks>Works under Xterm-like terminal otherwise this is equivalent to <see ref="Underscore"/></remarks>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.VerticalFix">
            <summary>Cursor caret is displayed a blinking vertical bar |</summary>
            <remarks>Works under Xterm-like terminal otherwise this is equivalent to <see ref="Underscore"/></remarks>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Box">
            <summary>Cursor caret is displayed as a blinking block ▉</summary>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.BoxFix">
            <summary>Cursor caret is displayed a block ▉</summary>
            <remarks>Works under Xterm-like terminal otherwise this is equivalent to <see ref="Block"/></remarks>
        </member>
        <member name="T:Terminal.Gui.KeyCode">
            <summary>
                The <see cref="T:Terminal.Gui.KeyCode"/> enumeration encodes key information from <see cref="T:Terminal.Gui.ConsoleDriver"/>s and provides a
                consistent way for application code to specify keys and receive key events.
                <para>
                    The <see cref="T:Terminal.Gui.Key"/> class provides a higher-level abstraction, with helper methods and properties for
                    common operations. For example, <see cref="P:Terminal.Gui.Key.IsAlt"/> and <see cref="P:Terminal.Gui.Key.IsCtrl"/> provide a convenient way
                    to check whether the Alt or Ctrl modifier keys were pressed when a key was pressed.
                </para>
            </summary>
            <remarks>
                <para>
                    Lowercase alpha keys are encoded as values between 65 and 90 corresponding to the un-shifted A to Z keys on a
                    keyboard. Enum values are provided for these (e.g. <see cref="F:Terminal.Gui.KeyCode.A"/>, <see cref="F:Terminal.Gui.KeyCode.B"/>, etc.).
                    Even though the values are the same as the ASCII values for uppercase characters, these enum values represent
                    *lowercase*, un-shifted characters.
                </para>
                <para>
                    Numeric keys are the values between 48 and 57 corresponding to 0 to 9 (e.g. <see cref="F:Terminal.Gui.KeyCode.D0"/>,
                    <see cref="F:Terminal.Gui.KeyCode.D1"/>, etc.).
                </para>
                <para>
                    The shift modifiers (<see cref="F:Terminal.Gui.KeyCode.ShiftMask"/>, <see cref="F:Terminal.Gui.KeyCode.CtrlMask"/>, and
                    <see cref="F:Terminal.Gui.KeyCode.AltMask"/>) can be combined (with logical or) with the other key codes to represent shifted
                    keys. For example, the <see cref="F:Terminal.Gui.KeyCode.A"/> enum value represents the un-shifted 'a' key, while
                    <see cref="F:Terminal.Gui.KeyCode.ShiftMask"/> | <see cref="F:Terminal.Gui.KeyCode.A"/> represents the 'A' key (shifted 'a' key). Likewise,
                    <see cref="F:Terminal.Gui.KeyCode.AltMask"/> | <see cref="F:Terminal.Gui.KeyCode.A"/> represents the 'Alt+A' key combination.
                </para>
                <para>
                    All other keys that produce a printable character are encoded as the Unicode value of the character. For
                    example, the <see cref="T:Terminal.Gui.KeyCode"/> for the '!' character is 33, which is the Unicode value for '!'. Likewise,
                    `â` is 226, `Â` is 194, etc.
                </para>
                <para>
                    If the <see cref="F:Terminal.Gui.KeyCode.SpecialMask"/> is set, then the value is that of the special mask, otherwise, the value is
                    the one of the lower bits (as extracted by <see cref="F:Terminal.Gui.KeyCode.CharMask"/>).
                </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.KeyCode.CharMask">
            <summary>
                Mask that indicates that the key is a unicode codepoint. Values outside this range indicate the key has shift
                modifiers or is a special key like function keys, arrows keys and so on.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.SpecialMask">
            <summary>
                If the <see cref="F:Terminal.Gui.KeyCode.SpecialMask"/> is set, then the value is that of the special mask, otherwise, the value is
                in the the lower bits (as extracted by <see cref="F:Terminal.Gui.KeyCode.CharMask"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.ShiftMask">
            <summary>
                When this value is set, the Key encodes the sequence Shift-KeyValue. The actual value must be extracted by
                removing the ShiftMask.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.AltMask">
            <summary>
                When this value is set, the Key encodes the sequence Alt-KeyValue. The actual value must be extracted by
                removing the AltMask.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.CtrlMask">
            <summary>
                When this value is set, the Key encodes the sequence Ctrl-KeyValue. The actual value must be extracted by
                removing the CtrlMask.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Null">
            <summary>The key code representing an invalid or empty key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Backspace">
            <summary>Backspace key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Tab">
            <summary>The key code for the tab key (forwards tab key).</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Enter">
            <summary>The key code for the return key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Clear">
            <summary>The key code for the clear key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Esc">
            <summary>The key code for the escape key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Space">
            <summary>The key code for the space bar key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D0">
            <summary>Digit 0.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D1">
            <summary>Digit 1.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D2">
            <summary>Digit 2.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D3">
            <summary>Digit 3.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D4">
            <summary>Digit 4.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D5">
            <summary>Digit 5.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D6">
            <summary>Digit 6.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D7">
            <summary>Digit 7.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D8">
            <summary>Digit 8.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D9">
            <summary>Digit 9.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.A">
            <summary>The key code for the A key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.B">
            <summary>The key code for the B key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.C">
            <summary>The key code for the C key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.D">
            <summary>The key code for the D key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.E">
            <summary>The key code for the E key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F">
            <summary>The key code for the F key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.G">
            <summary>The key code for the G key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.H">
            <summary>The key code for the H key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.I">
            <summary>The key code for the I key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.J">
            <summary>The key code for the J key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.K">
            <summary>The key code for the K key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.L">
            <summary>The key code for the L key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.M">
            <summary>The key code for the M key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.N">
            <summary>The key code for the N key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.O">
            <summary>The key code for the O key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.P">
            <summary>The key code for the P key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Q">
            <summary>The key code for the Q key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.R">
            <summary>The key code for the R key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.S">
            <summary>The key code for the S key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.T">
            <summary>The key code for the T key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.U">
            <summary>The key code for the U key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.V">
            <summary>The key code for the V key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.W">
            <summary>The key code for the W key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.X">
            <summary>The key code for the X key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Y">
            <summary>The key code for the Y key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Z">
            <summary>The key code for the Z key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.MaxCodePoint">
            <summary>The maximum Unicode codepoint value. Used to encode the non-alphanumeric control keys.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.CursorUp">
            <summary>Cursor up key</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.CursorDown">
            <summary>Cursor down key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.CursorLeft">
            <summary>Cursor left key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.CursorRight">
            <summary>Cursor right key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.PageUp">
            <summary>Page Up key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.PageDown">
            <summary>Page Down key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Home">
            <summary>Home key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.End">
            <summary>End key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Insert">
            <summary>Insert (INS) key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.Delete">
            <summary>Delete (DEL) key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.PrintScreen">
            <summary>Print screen character key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F1">
            <summary>F1 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F2">
            <summary>F2 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F3">
            <summary>F3 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F4">
            <summary>F4 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F5">
            <summary>F5 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F6">
            <summary>F6 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F7">
            <summary>F7 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F8">
            <summary>F8 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F9">
            <summary>F9 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F10">
            <summary>F10 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F11">
            <summary>F11 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F12">
            <summary>F12 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F13">
            <summary>F13 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F14">
            <summary>F14 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F15">
            <summary>F15 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F16">
            <summary>F16 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F17">
            <summary>F17 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F18">
            <summary>F18 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F19">
            <summary>F19 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F20">
            <summary>F20 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F21">
            <summary>F21 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F22">
            <summary>F22 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F23">
            <summary>F23 key.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyCode.F24">
            <summary>F24 key.</summary>
        </member>
        <member name="T:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping">
            <summary>Helper class to handle the scan code and virtual key from a <see cref="T:System.ConsoleKey"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.MapVirtualKeyEx(Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK,System.UInt32,System.IntPtr)">
            <summary>
                Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a
                virtual-key code.
            </summary>
            <param name="vk"></param>
            <param name="uMapType">
                If MAPVK_VK_TO_CHAR (2) - The uCode parameter is a virtual-key code and is translated into an
                un-shifted character value in the low order word of the return value.
            </param>
            <param name="dwhkl"></param>
            <returns>
                An un-shifted character value in the low order word of the return value. Dead keys (diacritics) are indicated
                by setting the top bit of the return value. If there is no translation, the function returns 0. See Remarks.
            </returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetKeyboardLayout(System.IntPtr)">
            <summary>Retrieves the active input locale identifier (formerly called the keyboard layout).</summary>
            <param name="idThread">0 for current thread</param>
            <returns>
                The return value is the input locale identifier for the thread. The low word contains a Language Identifier
                for the input language and the high word contains a device handle to the physical layout of the keyboard.
            </returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.MapVKtoChar(Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK)">
            <summary>
                Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or
                characters using the Win32 API MapVirtualKey.
            </summary>
            <param name="vk"></param>
            <returns>
                An un-shifted character value in the low order word of the return value. Dead keys (diacritics) are indicated
                by setting the top bit of the return value. If there is no translation, the function returns 0.
            </returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetKeyboardLayoutName(System.Text.StringBuilder)">
            <summary>
                Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling
                thread.
            </summary>
            <param name="pwszKLID"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetKeyboardLayoutName">
            <summary>
                Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling
                thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetScanCodeFromConsoleKeyInfo(System.ConsoleKeyInfo)">
            <summary>Get the scan code from a <see cref="T:System.ConsoleKeyInfo"/>.</summary>
            <param name="consoleKeyInfo">The console key info.</param>
            <returns>The value if apply.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetConsoleKeyInfoFromKeyCode(Terminal.Gui.KeyCode)">
            <summary>Gets the <see cref="T:System.ConsoleKeyInfo"/> from the provided <see cref="T:Terminal.Gui.KeyCode"/>.</summary>
            <param name="key">The key code.</param>
            <returns>The console key info.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.MapToConsoleModifiers(Terminal.Gui.KeyCode)">
            <summary>Map existing <see cref="T:Terminal.Gui.KeyCode"/> modifiers to <see cref="T:System.ConsoleModifiers"/>.</summary>
            <param name="key">The key code.</param>
            <returns>The console modifiers.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetModifiers(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Gets <see cref="T:System.ConsoleModifiers"/> from <see cref="T:System.Boolean"/> modifiers.</summary>
            <param name="shift">The shift key.</param>
            <param name="alt">The alt key.</param>
            <param name="control">The control key.</param>
            <returns>The console modifiers.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetConsoleKeyInfoFromKeyChar(System.UInt32,System.ConsoleModifiers,System.UInt32@)">
            <summary>
                Get the <see cref="T:System.ConsoleKeyInfo"/> from a unicode character and modifiers (e.g. (Key)'a' and
                (Key)Key.CtrlMask).
            </summary>
            <param name="keyValue">The key as a unicode codepoint.</param>
            <param name="modifiers">The modifier keys.</param>
            <param name="scanCode">The resulting scan code.</param>
            <returns>The <see cref="T:System.ConsoleKeyInfo"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetKeyCharFromUnicodeChar(System.UInt32,System.ConsoleModifiers,System.UInt32@,System.UInt32@,System.Boolean)">
            <summary>
                Get the output character from the <see cref="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetConsoleKeyInfoFromKeyCode(Terminal.Gui.KeyCode)"/>, with the correct
                <see cref="T:System.ConsoleKey"/> and the scan code used on <see cref="T:Terminal.Gui.WindowsDriver"/>.
            </summary>
            <param name="unicodeChar">The unicode character.</param>
            <param name="modifiers">The modifiers keys.</param>
            <param name="consoleKey">The resulting console key.</param>
            <param name="scanCode">The resulting scan code.</param>
            <param name="isConsoleKey">Indicates if the <paramref name="unicodeChar"/> is a <see cref="T:System.ConsoleKey"/>.</param>
            <returns>The output character or the <paramref name="consoleKey"/>.</returns>
            <remarks>This is only used by the <see cref="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetConsoleKeyInfoFromKeyCode(Terminal.Gui.KeyCode)"/> and by unit tests.</remarks>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.MapKeyCodeToConsoleKey(Terminal.Gui.KeyCode,System.Boolean@)">
            <summary>Maps a unicode character (e.g. (Key)'a') to a uint representing a <see cref="T:System.ConsoleKey"/>.</summary>
            <param name="keyValue">The key value.</param>
            <param name="isConsoleKey">
                Indicates if the <paramref name="keyValue"/> is a <see cref="T:System.ConsoleKey"/>.
                <see langword="true"/> means the return value is in the ConsoleKey enum. <see langword="false"/> means the return
                value can be mapped to a valid unicode character.
            </param>
            <returns>The <see cref="T:System.ConsoleKey"/> or the <paramref name="keyValue"/>.</returns>
            <remarks>This is only used by the <see cref="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.GetConsoleKeyInfoFromKeyCode(Terminal.Gui.KeyCode)"/> and by unit tests.</remarks>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.MapConsoleKeyInfoToKeyCode(System.ConsoleKeyInfo)">
            <summary>Maps a <see cref="T:System.ConsoleKeyInfo"/> to a <see cref="T:Terminal.Gui.KeyCode"/>.</summary>
            <param name="consoleKeyInfo">The console key.</param>
            <returns>The <see cref="T:Terminal.Gui.KeyCode"/> or the <paramref name="consoleKeyInfo"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.MapToKeyCodeModifiers(System.ConsoleModifiers,Terminal.Gui.KeyCode)">
            <summary>Maps a <see cref="T:System.ConsoleKeyInfo"/> to a <see cref="T:Terminal.Gui.KeyCode"/>.</summary>
            <param name="modifiers">The console modifiers.</param>
            <param name="key">The key code.</param>
            <returns>The <see cref="T:Terminal.Gui.KeyCode"/> with <see cref="T:System.ConsoleModifiers"/> or the <paramref name="key"/></returns>
        </member>
        <member name="T:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK">
            <summary>Generated from winuser.h. See https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LBUTTON">
            <summary>Left mouse button.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.RBUTTON">
            <summary>Right mouse button.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.CANCEL">
            <summary>Control-break processing.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.MBUTTON">
            <summary>Middle mouse button (three-button mouse).</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.XBUTTON1">
            <summary>X1 mouse button.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.XBUTTON2">
            <summary>X2 mouse button.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.BACK">
            <summary>BACKSPACE key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.TAB">
            <summary>TAB key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.CLEAR">
            <summary>CLEAR key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.RETURN">
            <summary>ENTER key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.SHIFT">
            <summary>SHIFT key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.CONTROL">
            <summary>CTRL key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.MENU">
            <summary>ALT key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.PAUSE">
            <summary>PAUSE key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.CAPITAL">
            <summary>CAPS LOCK key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.KANA">
            <summary>IME Kana mode.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.HANGUL">
            <summary>IME Hangul mode.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.JUNJA">
            <summary>IME Junja mode.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.FINAL">
            <summary>IME final mode.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.HANJA">
            <summary>IME Hanja mode.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.KANJI">
            <summary>IME Kanji mode.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.ESCAPE">
            <summary>ESC key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.CONVERT">
            <summary>IME convert.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NONCONVERT">
            <summary>IME nonconvert.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.ACCEPT">
            <summary>IME accept.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.MODECHANGE">
            <summary>IME mode change request.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.SPACE">
            <summary>SPACEBAR.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.PRIOR">
            <summary>PAGE UP key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NEXT">
            <summary>PAGE DOWN key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.END">
            <summary>END key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.HOME">
            <summary>HOME key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LEFT">
            <summary>LEFT ARROW key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.UP">
            <summary>UP ARROW key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.RIGHT">
            <summary>RIGHT ARROW key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.DOWN">
            <summary>DOWN ARROW key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.SELECT">
            <summary>SELECT key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.PRINT">
            <summary>PRINT key.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.EXECUTE">
            <summary>EXECUTE key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.SNAPSHOT">
            <summary>PRINT SCREEN key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.INSERT">
            <summary>INS key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.DELETE">
            <summary>DEL key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.HELP">
            <summary>HELP key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LWIN">
            <summary>Left Windows key (Natural keyboard)</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.RWIN">
            <summary>Right Windows key (Natural keyboard)</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.APPS">
            <summary>Applications key (Natural keyboard)</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.SLEEP">
            <summary>Computer Sleep key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD0">
            <summary>Numeric keypad 0 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD1">
            <summary>Numeric keypad 1 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD2">
            <summary>Numeric keypad 2 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD3">
            <summary>Numeric keypad 3 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD4">
            <summary>Numeric keypad 4 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD5">
            <summary>Numeric keypad 5 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD6">
            <summary>Numeric keypad 6 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD7">
            <summary>Numeric keypad 7 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD8">
            <summary>Numeric keypad 8 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMPAD9">
            <summary>Numeric keypad 9 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.MULTIPLY">
            <summary>Multiply key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.ADD">
            <summary>Add key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.SEPARATOR">
            <summary>Separator key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.SUBTRACT">
            <summary>Subtract key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.DECIMAL">
            <summary>Decimal key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.DIVIDE">
            <summary>Divide key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F1">
            <summary>F1 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F2">
            <summary>F2 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F3">
            <summary>F3 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F4">
            <summary>F4 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F5">
            <summary>F5 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F6">
            <summary>F6 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F7">
            <summary>F7 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F8">
            <summary>F8 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F9">
            <summary>F9 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F10">
            <summary>F10 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F11">
            <summary>F11 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F12">
            <summary>F12 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F13">
            <summary>F13 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F14">
            <summary>F14 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F15">
            <summary>F15 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F16">
            <summary>F16 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F17">
            <summary>F17 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F18">
            <summary>F18 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F19">
            <summary>F19 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F20">
            <summary>F20 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F21">
            <summary>F21 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F22">
            <summary>F22 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F23">
            <summary>F23 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.F24">
            <summary>F24 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NUMLOCK">
            <summary>NUM LOCK key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.SCROLL">
            <summary>SCROLL LOCK key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_NEC_EQUAL">
            <summary>NEC PC-9800 kbd definition: '=' key on numpad</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_FJ_JISHO">
            <summary>Fujitsu/OASYS kbd definition: 'Dictionary' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_FJ_MASSHOU">
            <summary>Fujitsu/OASYS kbd definition: 'Unregister word' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_FJ_TOUROKU">
            <summary>Fujitsu/OASYS kbd definition: 'Register word' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_FJ_LOYA">
            <summary>Fujitsu/OASYS kbd definition: 'Left OYAYUBI' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_FJ_ROYA">
            <summary>Fujitsu/OASYS kbd definition: 'Right OYAYUBI' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LSHIFT">
            <summary>Left SHIFT key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.RSHIFT">
            <summary>Right SHIFT key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LCONTROL">
            <summary>Left CONTROL key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.RCONTROL">
            <summary>Right CONTROL key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LMENU">
            <summary>Left MENU key (Left Alt key)</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.RMENU">
            <summary>Right MENU key (Right Alt key)</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.BROWSER_BACK">
            <summary>Browser Back key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.BROWSER_FORWARD">
            <summary>Browser Forward key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.BROWSER_REFRESH">
            <summary>Browser Refresh key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.BROWSER_STOP">
            <summary>Browser Stop key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.BROWSER_SEARCH">
            <summary>Browser Search key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.BROWSER_FAVORITES">
            <summary>Browser Favorites key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.BROWSER_HOME">
            <summary>Browser Home key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.VOLUME_MUTE">
            <summary>Volume Mute key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.VOLUME_DOWN">
            <summary>Volume Down key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.VOLUME_UP">
            <summary>Volume Up key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.MEDIA_NEXT_TRACK">
            <summary>Next Track key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.MEDIA_PREV_TRACK">
            <summary>Previous Track key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.MEDIA_STOP">
            <summary>Stop Media key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.MEDIA_PLAY_PAUSE">
            <summary>Play/Pause Media key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LAUNCH_MAIL">
            <summary>Start Mail key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LAUNCH_MEDIA_SELECT">
            <summary>Select Media key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LAUNCH_APP1">
            <summary>Start Application 1 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.LAUNCH_APP2">
            <summary>Start Application 2 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_1">
            <summary>Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ';:' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_PLUS">
            <summary>For any country/region, the '+' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_COMMA">
            <summary>For any country/region, the ',' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_MINUS">
            <summary>For any country/region, the '-' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_PERIOD">
            <summary>For any country/region, the '.' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_2">
            <summary>Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '/?' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_3">
            <summary>Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '`~' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_4">
            <summary>Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '[{' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_5">
            <summary>Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '\|' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_6">
            <summary>Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ']}' key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_7">
            <summary>
                Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the
                'single-quote/double-quote' key
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_8">
            <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_AX">
            <summary>'AX' key on Japanese AX kbd</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_102">
            <summary>Either the angle bracket key or the backslash key on the RT 102-key keyboard</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.ICO_HELP">
            <summary>Help key on ICO</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.ICO_00">
            <summary>00 key on ICO</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.PROCESSKEY">
            <summary>Process key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.ICO_CLEAR">
            <summary>Clear key on ICO</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.PACKET">
            <summary>Packet key to be used to pass Unicode characters as if they were keystrokes</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_RESET">
            <summary>Reset key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_JUMP">
            <summary>Jump key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_PA1">
            <summary>PA1 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_PA2">
            <summary>PA2 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_PA3">
            <summary>PA3 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_WSCTRL">
            <summary>WsCtrl key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_CUSEL">
            <summary>CuSel key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_ATTN">
            <summary>Attn key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_FINISH">
            <summary>Finish key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_COPY">
            <summary>Copy key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_AUTO">
            <summary>Auto key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_ENLW">
            <summary>Enlw key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_BACKTAB">
            <summary>BackTab key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.ATTN">
            <summary>Attn key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.CRSEL">
            <summary>CrSel key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.EXSEL">
            <summary>ExSel key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.EREOF">
            <summary>Erase EOF key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.PLAY">
            <summary>Play key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.ZOOM">
            <summary>Zoom key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.NONAME">
            <summary>Reserved</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.PA1">
            <summary>PA1 key</summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.VK.OEM_CLEAR">
            <summary>Clear key</summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.DecodeVKPacketToKConsoleKeyInfo(System.ConsoleKeyInfo)">
            <summary>Decode a <see cref="T:System.ConsoleKeyInfo"/> that is using <see cref="F:System.ConsoleKey.Packet"/>.</summary>
            <param name="consoleKeyInfo">The console key info.</param>
            <returns>The decoded <see cref="T:System.ConsoleKeyInfo"/> or the <paramref name="consoleKeyInfo"/>.</returns>
            <remarks>
                If it's a <see cref="F:System.ConsoleKey.Packet"/> the <see cref="P:System.ConsoleKeyInfo.KeyChar"/> may be a
                <see cref="P:System.ConsoleKeyInfo.Key"/> or a <see cref="P:System.ConsoleKeyInfo.KeyChar"/> value.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ConsoleDrivers.ConsoleKeyMapping.EncodeKeyCharForVKPacket(System.ConsoleKeyInfo)">
            <summary>
                Encode the <see cref="P:System.ConsoleKeyInfo.KeyChar"/> with the <see cref="P:System.ConsoleKeyInfo.Key"/> if the first a byte
                length, otherwise only the KeyChar is considered and searched on the database.
            </summary>
            <param name="consoleKeyInfo">The console key info.</param>
            <returns>The encoded KeyChar with the Key if both can be shifted, otherwise only the KeyChar.</returns>
            <remarks>This is useful to use with the <see cref="F:System.ConsoleKey.Packet"/>.</remarks>
        </member>
        <member name="T:Terminal.Gui.CursesClipboard">
            <summary>A clipboard implementation for Linux. This implementation uses the xclip command to access the clipboard.</summary>
            <remarks>If xclip is not installed, this implementation will not work.</remarks>
        </member>
        <member name="T:Terminal.Gui.MacOSXClipboard">
            <summary>
                A clipboard implementation for MacOSX. This implementation uses the Mac clipboard API (via P/Invoke) to
                copy/paste. The existance of the Mac pbcopy and pbpaste commands is used to determine if copy/paste is supported.
            </summary>
        </member>
        <member name="T:Terminal.Gui.WSLClipboard">
            <summary>
                A clipboard implementation for Linux, when running under WSL. This implementation uses the Windows clipboard
                to store the data, and uses Windows' powershell.exe (launched via WSL interop services) to set/get the Windows
                clipboard.
            </summary>
        </member>
        <member name="T:Terminal.Gui.CursesDriver">
            <summary>This is the Curses driver for the gui.cs/Terminal framework.</summary>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.EnsureCursorVisibility">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.GetCursorVisibility(Terminal.Gui.CursorVisibility@)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.SetCursorVisibility(Terminal.Gui.CursorVisibility)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.MakeColor(System.Int16,System.Int16)">
            <summary>Creates an Attribute from the provided curses-based foreground and background color numbers</summary>
            <param name="foreground">Contains the curses color number for the foreground (color, plus any attributes)</param>
            <param name="background">Contains the curses color number for the background (color, plus any attributes)</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.MakeColor(Terminal.Gui.Color@,Terminal.Gui.Color@)">
            <inheritdoc/>
            <remarks>
                In the CursesDriver, colors are encoded as an int. The foreground color is stored in the most significant 4
                bits, and the background color is stored in the least significant 4 bits. The Terminal.GUi Color values are
                converted to curses color encoding before being encoded.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Platform.Suspend">
            <summary>Suspends the process by sending SIGTSTP to itself</summary>
            <returns>The suspend.</returns>
        </member>
        <member name="T:Terminal.Gui.UnixMainLoop">
            <summary>Unix main loop, suitable for using on Posix systems</summary>
            <remarks>
                In addition to the general functions of the MainLoop, the Unix version can watch file descriptors using the
                AddWatch methods.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.UnixMainLoop.Condition">
            <summary>Condition on which to wake up from file descriptor activity.  These match the Linux/BSD poll definitions.</summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollIn">
            <summary>There is data to read</summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollOut">
            <summary>Writing to the specified descriptor will not block</summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollPri">
            <summary>There is urgent data to read</summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollErr">
            <summary>Error condition on output</summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollHup">
            <summary>Hang-up on output</summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollNval">
            <summary>File descriptor is not open.</summary>
        </member>
        <member name="M:Terminal.Gui.UnixMainLoop.AddWatch(System.Int32,Terminal.Gui.UnixMainLoop.Condition,System.Func{Terminal.Gui.MainLoop,System.Boolean})">
            <summary>Watches a file descriptor for activity.</summary>
            <remarks>
                When the condition is met, the provided callback is invoked.  If the callback returns false, the watch is
                automatically removed. The return value is a token that represents this watch, you can use this token to remove the
                watch by calling RemoveWatch.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.UnixMainLoop.RemoveWatch(System.Object)">
            <summary>Removes an active watch from the mainloop.</summary>
            <remarks>The token parameter is the value returned from AddWatch</remarks>
        </member>
        <member name="T:Terminal.Gui.EscSeqReqStatus">
            <summary>
                Represents the status of an ANSI escape sequence request made to the terminal using
                <see cref="T:Terminal.Gui.EscSeqRequests"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Terminal.Gui.EscSeqReqStatus.#ctor(System.String,System.Int32)">
            <summary>Creates a new state of escape sequence request.</summary>
            <param name="terminator">The terminator.</param>
            <param name="numReq">The number of requests.</param>
        </member>
        <member name="P:Terminal.Gui.EscSeqReqStatus.NumOutstanding">
            <summary>Gets the number of unfinished requests.</summary>
        </member>
        <member name="P:Terminal.Gui.EscSeqReqStatus.NumRequests">
            <summary>Gets the number of requests.</summary>
        </member>
        <member name="P:Terminal.Gui.EscSeqReqStatus.Terminator">
            <summary>Gets the Escape Sequence Termintor (e.g. ESC[8t ... t is the terminator).</summary>
        </member>
        <member name="T:Terminal.Gui.EscSeqRequests">
            <summary>
                Manages ANSI Escape Sequence requests and responses. The list of <see cref="T:Terminal.Gui.EscSeqReqStatus"/> contains the
                status of the request. Each request is identified by the terminator (e.g. ESC[8t ... t is the terminator).
            </summary>
        </member>
        <member name="P:Terminal.Gui.EscSeqRequests.Statuses">
            <summary>Gets the <see cref="T:Terminal.Gui.EscSeqReqStatus"/> list.</summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqRequests.Add(System.String,System.Int32)">
            <summary>
                Adds a new request for the ANSI Escape Sequence defined by <paramref name="terminator"/>. Adds a
                <see cref="T:Terminal.Gui.EscSeqReqStatus"/> instance to <see cref="P:Terminal.Gui.EscSeqRequests.Statuses"/> list.
            </summary>
            <param name="terminator">The terminator.</param>
            <param name="numReq">The number of requests.</param>
        </member>
        <member name="M:Terminal.Gui.EscSeqRequests.HasResponse(System.String)">
            <summary>
                Indicates if a <see cref="T:Terminal.Gui.EscSeqReqStatus"/> with the <paramref name="terminator"/> exists in the
                <see cref="P:Terminal.Gui.EscSeqRequests.Statuses"/> list.
            </summary>
            <param name="terminator"></param>
            <returns><see langword="true"/> if exist, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqRequests.Remove(System.String)">
            <summary>
                Removes a request defined by <paramref name="terminator"/>. If a matching <see cref="T:Terminal.Gui.EscSeqReqStatus"/> is
                found and the number of outstanding requests is greater than 0, the number of outstanding requests is decremented.
                If the number of outstanding requests is 0, the <see cref="T:Terminal.Gui.EscSeqReqStatus"/> is removed from
                <see cref="P:Terminal.Gui.EscSeqRequests.Statuses"/>.
            </summary>
            <param name="terminator">The terminating string.</param>
        </member>
        <member name="T:Terminal.Gui.EscSeqUtils">
            <summary>
                Provides a platform-independent API for managing ANSI escape sequences.
            </summary>
            <remarks>
                Useful resources:
                * https://learn.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences
                * https://invisible-island.net/xterm/ctlseqs/ctlseqs.html
                * https://vt100.net/
            </remarks>
        </member>
        <member name="T:Terminal.Gui.EscSeqUtils.ClearScreenOptions">
            <summary>
                Options for ANSI ESC "[xJ" - Clears part of the screen.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.ClearScreenOptions.CursorToEndOfScreen">
            <summary>
                If n is 0 (or missing), clear from cursor to end of screen.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.ClearScreenOptions.CursorToBeginningOfScreen">
            <summary>
                If n is 1, clear from cursor to beginning of the screen.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.ClearScreenOptions.EntireScreen">
            <summary>
                If n is 2, clear entire screen (and moves cursor to upper left on DOS ANSI.SYS).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.ClearScreenOptions.EntireScreenAndScrollbackBuffer">
            <summary>
                If n is 3, clear entire screen and delete all lines saved in the scrollback buffer
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.KeyEsc">
            <summary>
                Escape key code (ASCII 27/0x1B).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI">
            <summary>
                ESC [ - The CSI (Control Sequence Introducer).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_ActivateAltBufferNoBackscroll">
            <summary>
                ESC [ ? 1047 h - Activate xterm alternative buffer (no backscroll)
            </summary>
            <remarks>
                From
                https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_
                Use Alternate Screen Buffer, xterm.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_DisableAnyEventMouse">
            <summary>
                ESC [ ? 1003 l - Disable any mouse event tracking.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_DisableSgrExtModeMouse">
            <summary>
                ESC [ ? 1006 l - Disable SGR (Select Graphic Rendition).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_DisableUrxvtExtModeMouse">
            <summary>
                ESC [ ? 1015 l - Disable URXVT (Unicode Extended Virtual Terminal).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_EnableAnyEventMouse">
            <summary>
                ESC [ ? 1003 h - Enable  mouse event tracking.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_EnableSgrExtModeMouse">
            <summary>
                ESC [ ? 1006 h - Enable SGR (Select Graphic Rendition).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_EnableUrxvtExtModeMouse">
            <summary>
                ESC [ ? 1015 h - Enable URXVT (Unicode Extended Virtual Terminal).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_RestoreAltBufferWithBackscroll">
            <summary>
                ESC [ ? 1047 l - Restore xterm working buffer (with backscroll)
            </summary>
            <remarks>
                From
                https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_
                Use Normal Screen Buffer, xterm.  Clear the screen first if in the Alternate Screen Buffer.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_RestoreCursorAndRestoreAltBufferWithBackscroll">
            <summary>
                ESC [ ? 1049 l - Restore cursor position and restore xterm working buffer (with backscroll)
            </summary>
            <remarks>
                From
                https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_
                Use Normal Screen Buffer and restore cursor as in DECRC, xterm.
                resource.This combines the effects of the 1047 and 1048  modes.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_SaveCursorAndActivateAltBufferNoBackscroll">
            <summary>
                ESC [ ? 1049 h - Save cursor position and activate xterm alternative buffer (no backscroll)
            </summary>
            <remarks>
                From
                https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_
                Save cursor as in DECSC, xterm. After saving the cursor, switch to the Alternate Screen Buffer,
                clearing it first.
                This control combines the effects of the 1047 and 1048 modes.
                Use this with terminfo-based applications rather than the 47 mode.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.EscSeqUtils.CSI_DisableMouseEvents">
            <summary>
                Control sequence for disabling mouse events.
            </summary>
        </member>
        <member name="P:Terminal.Gui.EscSeqUtils.CSI_EnableMouseEvents">
            <summary>
                Control sequence for enabling mouse events.
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_ClearScreen(Terminal.Gui.EscSeqUtils.ClearScreenOptions)">
            <summary>
                ESC [ x J - Clears part of the screen. See <see cref="T:Terminal.Gui.EscSeqUtils.ClearScreenOptions"/>.
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.DecodeEscSeq(Terminal.Gui.EscSeqRequests,System.ConsoleKeyInfo@,System.ConsoleKey@,System.ConsoleKeyInfo[],System.ConsoleModifiers@,System.String@,System.String@,System.String[]@,System.String@,System.Boolean@,System.Collections.Generic.List{Terminal.Gui.MouseFlags}@,System.Drawing.Point@,System.Boolean@,System.Action{Terminal.Gui.MouseFlags,System.Drawing.Point})">
            <summary>
                Decodes an ANSI escape sequence.
            </summary>
            <param name="escSeqRequests">The <see cref="T:Terminal.Gui.EscSeqRequests"/> which may contain a request.</param>
            <param name="newConsoleKeyInfo">The <see cref="T:System.ConsoleKeyInfo"/> which may changes.</param>
            <param name="key">The <see cref="T:System.ConsoleKey"/> which may changes.</param>
            <param name="cki">The <see cref="T:System.ConsoleKeyInfo"/> array.</param>
            <param name="mod">The <see cref="T:System.ConsoleModifiers"/> which may changes.</param>
            <param name="c1Control">The control returned by the <see cref="M:Terminal.Gui.EscSeqUtils.GetC1ControlChar(System.Char@)"/> method.</param>
            <param name="code">The code returned by the <see cref="M:Terminal.Gui.EscSeqUtils.GetEscapeResult(System.Char[])"/> method.</param>
            <param name="values">The values returned by the <see cref="M:Terminal.Gui.EscSeqUtils.GetEscapeResult(System.Char[])"/> method.</param>
            <param name="terminator">The terminator returned by the <see cref="M:Terminal.Gui.EscSeqUtils.GetEscapeResult(System.Char[])"/> method.</param>
            <param name="isMouse">Indicates if the escape sequence is a mouse event.</param>
            <param name="buttonState">The <see cref="T:Terminal.Gui.MouseFlags"/> button state.</param>
            <param name="pos">The <see cref="T:Terminal.Gui.MouseFlags"/> position.</param>
            <param name="isResponse">Indicates if the escape sequence is a response to a request.</param>
            <param name="continuousButtonPressedHandler">The handler that will process the event.</param>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetC1ControlChar(System.Char@)">
            <summary>
                Gets the c1Control used in the called escape sequence.
            </summary>
            <param name="c">The char used.</param>
            <returns>The c1Control.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetConsoleKey(System.Char,System.String,System.ConsoleModifiers@)">
            <summary>
                Gets the <see cref="T:System.ConsoleKey"/> depending on terminating and value.
            </summary>
            <param name="terminator">
                The terminator indicating a reply to <see cref="F:Terminal.Gui.EscSeqUtils.CSI_SendDeviceAttributes"/> or
                <see cref="F:Terminal.Gui.EscSeqUtils.CSI_SendDeviceAttributes2"/>.
            </param>
            <param name="value">The value.</param>
            <param name="mod">The <see cref="T:System.ConsoleModifiers"/> which may changes.</param>
            <returns>The <see cref="T:System.ConsoleKey"/> and probably the <see cref="T:System.ConsoleModifiers"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetConsoleModifiers(System.String)">
            <summary>
                Gets the <see cref="T:System.ConsoleModifiers"/> from the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:System.ConsoleModifiers"/> or zero.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetEscapeResult(System.Char[])">
            <summary>
                Gets all the needed information about a escape sequence.
            </summary>
            <param name="kChar">The array with all chars.</param>
            <returns>
                The c1Control returned by <see cref="M:Terminal.Gui.EscSeqUtils.GetC1ControlChar(System.Char@)"/>, code, values and terminating.
            </returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetKeyCharArray(System.ConsoleKeyInfo[])">
            <summary>
                A helper to get only the <see cref="P:System.ConsoleKeyInfo.KeyChar"/> from the <see cref="T:System.ConsoleKeyInfo"/> array.
            </summary>
            <param name="cki"></param>
            <returns>The char array of the escape sequence.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetMouse(System.ConsoleKeyInfo[],System.Collections.Generic.List{Terminal.Gui.MouseFlags}@,System.Drawing.Point@,System.Action{Terminal.Gui.MouseFlags,System.Drawing.Point})">
            <summary>
                Gets the <see cref="T:Terminal.Gui.MouseFlags"/> mouse button flags and the position.
            </summary>
            <param name="cki">The <see cref="T:System.ConsoleKeyInfo"/> array.</param>
            <param name="mouseFlags">The mouse button flags.</param>
            <param name="pos">The mouse position.</param>
            <param name="continuousButtonPressedHandler">The handler that will process the event.</param>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.MapConsoleKeyInfo(System.ConsoleKeyInfo)">
            <summary>
                Ensures a console key is mapped to one that works correctly with ANSI escape sequences.
            </summary>
            <param name="consoleKeyInfo">The <see cref="T:System.ConsoleKeyInfo"/>.</param>
            <returns>The <see cref="T:System.ConsoleKeyInfo"/> modified.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.ResizeArray(System.ConsoleKeyInfo,System.ConsoleKeyInfo[])">
            <summary>
                A helper to resize the <see cref="T:System.ConsoleKeyInfo"/> as needed.
            </summary>
            <param name="consoleKeyInfo">The <see cref="T:System.ConsoleKeyInfo"/>.</param>
            <param name="cki">The <see cref="T:System.ConsoleKeyInfo"/> array to resize.</param>
            <returns>The <see cref="T:System.ConsoleKeyInfo"/> resized.</returns>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_SaveCursorPosition">
            <summary>
                ESC [ 7 - Save Cursor Position in Memory**
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_RestoreCursorPosition">
            <summary>
                ESC [ 8 - DECSR Restore Cursor Position from Memory**
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetTerminalWindowSize(System.Int32,System.Int32)">
            <summary>
                ESC [ 8 ; height ; width t - Set Terminal Window Size
                https://terminalguide.namepad.de/seq/csi_st-8/
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetCursorPosition(System.Int32,System.Int32)">
            <summary>
                ESC [ y ; x H - CUP Cursor Position - Cursor moves to x ; y coordinate within the viewport, where x is the column
                of the y line
            </summary>
            <param name="row">Origin is (1,1).</param>
            <param name="col">Origin is (1,1).</param>
            <returns></returns>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_ShowCursor">
            <summary>
                ESC [ ? 25 h - DECTCEM Text Cursor Enable Mode Show    Show the cursor
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_HideCursor">
            <summary>
                ESC [ ? 25 l - DECTCEM Text Cursor Enable Mode Hide    Hide the cursor
            </summary>
        </member>
        <member name="T:Terminal.Gui.EscSeqUtils.DECSCUSR_Style">
            <summary>
                Styles for ANSI ESC "[x q" - Set Cursor Style
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.DECSCUSR_Style.UserShape">
            <summary>
                DECSCUSR - User Shape - Default cursor shape configured by the user
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.DECSCUSR_Style.BlinkingBlock">
            <summary>
                DECSCUSR - Blinking Block - Blinking block cursor shape
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.DECSCUSR_Style.SteadyBlock">
            <summary>
                DECSCUSR - Steady Block - Steady block cursor shape
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.DECSCUSR_Style.BlinkingUnderline">
            <summary>
                DECSCUSR - Blinking Underline - Blinking underline cursor shape
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.DECSCUSR_Style.SteadyUnderline">
            <summary>
                DECSCUSR - Steady Underline - Steady underline cursor shape
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.DECSCUSR_Style.BlinkingBar">
            <summary>
                DECSCUSR - Blinking Bar - Blinking bar cursor shape
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.DECSCUSR_Style.SteadyBar">
            <summary>
                DECSCUSR - Steady Bar - Steady bar cursor shape
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetCursorStyle(Terminal.Gui.EscSeqUtils.DECSCUSR_Style)">
            <summary>
                ESC [ n SP q - Select Cursor Style (DECSCUSR)
                https://terminalguide.namepad.de/seq/csi_sq_t_space/
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetGraphicsRendition(System.Int32[])">
            <summary>
                ESC [ (n) m - SGR - Set Graphics Rendition - Set the format of the screen and text as specified by (n)
                This command is special in that the (n) position can accept between 0 and 16 parameters separated by semicolons.
                When no parameters are specified, it is treated the same as a single 0 parameter.
                https://terminalguide.namepad.de/seq/csi_sm/
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetForegroundColor(Terminal.Gui.AnsiColorCode)">
            <summary>
                ESC [ (n) m - Uses <see cref="M:Terminal.Gui.EscSeqUtils.CSI_SetGraphicsRendition(System.Int32[])"/> to set the foreground color.
            </summary>
            <param name="code">One of the 16 color codes.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetBackgroundColor(Terminal.Gui.AnsiColorCode)">
            <summary>
                ESC [ (n) m - Uses <see cref="M:Terminal.Gui.EscSeqUtils.CSI_SetGraphicsRendition(System.Int32[])"/> to set the background color.
            </summary>
            <param name="code">One of the 16 color codes.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetForegroundColor256(System.Int32)">
            <summary>
                ESC[38;5;{id}m - Set foreground color (256 colors)
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetBackgroundColor256(System.Int32)">
            <summary>
                ESC[48;5;{id}m - Set background color (256 colors)
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetForegroundColorRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
                ESC[38;2;{r};{g};{b}m	Set foreground color as RGB.
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.CSI_SetBackgroundColorRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
                ESC[48;2;{r};{g};{b}m	Set background color as RGB.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_RequestCursorPositionReport">
            <summary>
                ESC [ ? 6 n - Request Cursor Position Report (?) (DECXCPR)
                https://terminalguide.namepad.de/seq/csi_sn__p-6/
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_RequestCursorPositionReport_Terminator">
            <summary>
                The terminal reply to <see cref="F:Terminal.Gui.EscSeqUtils.CSI_RequestCursorPositionReport"/>. ESC [ ? (y) ; (x) R
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_SendDeviceAttributes">
            <summary>
                ESC [ 0 c - Send Device Attributes (Primary DA)
                https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Application-Program-Command-functions
                https://www.xfree86.org/current/ctlseqs.html
                Windows Terminal v1.17 and below emits “\x1b[?1;0c”, indicating "VT101 with No Options".
                Windows Terminal v1.18+ emits: \x1b[?61;6;7;22;23;24;28;32;42c"
                See https://github.com/microsoft/terminal/pull/14906
                61 - The device conforms to level 1 of the character cell display architecture
                (See https://github.com/microsoft/terminal/issues/15693#issuecomment-1633304497)
                6 = Selective erase
                7 = Soft fonts
                22 = Color text
                23 = Greek character sets
                24 = Turkish character sets
                28 = Rectangular area operations
                32 = Text macros
                42 = ISO Latin-2 character set
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_SendDeviceAttributes2">
            <summary>
                ESC [ > 0 c - Send Device Attributes (Secondary DA)
                Windows Terminal v1.18+ emits: "\x1b[>0;10;1c" (vt100, firmware version 1.0, vt220)
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_ReportDeviceAttributes_Terminator">
            <summary>
                The terminator indicating a reply to <see cref="F:Terminal.Gui.EscSeqUtils.CSI_SendDeviceAttributes"/> or
                <see cref="F:Terminal.Gui.EscSeqUtils.CSI_SendDeviceAttributes2"/>
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_ReportTerminalSizeInChars">
            <summary>
                CSI 1 8 t  | yes | yes |  yes  | report window size in chars
                https://terminalguide.namepad.de/seq/csi_st-18/
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_ReportTerminalSizeInChars_Terminator">
            <summary>
                The terminator indicating a reply to <see cref="F:Terminal.Gui.EscSeqUtils.CSI_ReportTerminalSizeInChars"/> : ESC [ 8 ; height ; width t
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_ReportTerminalSizeInChars_ResponseValue">
            <summary>
                The value of the response to <see cref="F:Terminal.Gui.EscSeqUtils.CSI_ReportTerminalSizeInChars"/> indicating value 1 and 2 are the terminal
                size in chars.
            </summary>
        </member>
        <member name="T:Terminal.Gui.FakeConsole">
            <summary></summary>
        </member>
        <member name="F:Terminal.Gui.FakeConsole.WIDTH">
            <summary>Specifies the initial console width.</summary>
        </member>
        <member name="F:Terminal.Gui.FakeConsole.HEIGHT">
            <summary>Specifies the initial console height.</summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowWidth">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.IsOutputRedirected">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.IsErrorRedirected">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.In">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.Out">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.Error">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.InputEncoding">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.OutputEncoding">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.BackgroundColor">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.ForegroundColor">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.BufferHeight">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.BufferWidth">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowHeight">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.TreatControlCAsInput">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.LargestWindowWidth">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.LargestWindowHeight">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowLeft">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowTop">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorLeft">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorTop">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorSize">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorVisible">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.Title">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.KeyAvailable">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.IsInputRedirected">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Beep">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Beep(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Clear">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardError">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardError(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardInput(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardInput">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardOutput(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardOutput">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Read">
            <summary></summary>
        </member>
        <member name="F:Terminal.Gui.FakeConsole.MockKeyPresses">
            <summary>A stack of keypresses to return when ReadKey is called.</summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.PushMockKeyPress(Terminal.Gui.KeyCode)">
            <summary>Helper to push a <see cref="T:Terminal.Gui.KeyCode"/> onto <see cref="F:Terminal.Gui.FakeConsole.MockKeyPresses"/>.</summary>
            <param name="key"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ReadKey">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ReadLine">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ResetColor">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetBufferSize(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetCursorPosition(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetError(System.IO.TextWriter)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetIn(System.IO.TextReader)">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetOut(System.IO.TextWriter)">
            <summary></summary>
            <param name="newOut"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetWindowPosition(System.Int32,System.Int32)">
            <summary></summary>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetWindowSize(System.Int32,System.Int32)">
            <summary></summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Object)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.UInt64)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Int64)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object,System.Object)">
            <summary></summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object)">
            <summary></summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.UInt32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object[])">
            <summary></summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Boolean)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Char)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Char[])">
            <summary></summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object,System.Object,System.Object)">
            <summary></summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Decimal)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Single)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Double)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Single)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.UInt32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Int64)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.UInt64)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Object)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object)">
            <summary></summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary></summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object[])">
            <summary></summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Decimal)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Char[])">
            <summary></summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Char)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Boolean)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object,System.Object)">
            <summary></summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Double)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="T:Terminal.Gui.FakeDriver">
            <summary>Implements a mock ConsoleDriver for unit testing</summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.GetCursorVisibility(Terminal.Gui.CursorVisibility@)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.SetCursorVisibility(Terminal.Gui.CursorVisibility)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.EnsureCursorVisibility">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.NetEvents.EnqueueWindowSizeEvent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Enqueue a window size event if the window size has changed.</summary>
            <param name="winHeight"></param>
            <param name="winWidth"></param>
            <param name="buffHeight"></param>
            <param name="buffWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.NetEvents.InputResult.ToString(System.ConsoleKeyInfo)">
            <summary>Prints a ConsoleKeyInfoEx structure</summary>
            <param name="cki"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.NetMainLoop">
            <summary>
                Mainloop intended to be used with the .NET System.Console API, and can be used on Windows and Unix, it is
                cross platform but lacks things like file descriptor monitoring.
            </summary>
            <remarks>This implementation is used for NetDriver.</remarks>
        </member>
        <member name="F:Terminal.Gui.NetMainLoop.ProcessInput">
            <summary>Invoked when a Key is pressed.</summary>
        </member>
        <member name="M:Terminal.Gui.NetMainLoop.#ctor(Terminal.Gui.ConsoleDriver)">
            <summary>Initializes the class with the console driver.</summary>
            <remarks>Passing a consoleDriver is provided to capture windows resizing.</remarks>
            <param name="consoleDriver">The console driver used by this Net main loop.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Terminal.Gui.WindowsConsole.ConsoleKeyInfoEx.ToString(Terminal.Gui.WindowsConsole.ConsoleKeyInfoEx)">
            <summary>
                Prints a ConsoleKeyInfoEx structure
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="F:Terminal.Gui.WindowsConsole.ConsoleCursorInfo.dwSize">
            <summary>
            The percentage of the character cell that is filled by the cursor.This value is between 1 and 100.
            The cursor appearance varies, ranging from completely filling the cell to showing up as a horizontal
            line at the bottom of the cell.
            </summary>
        </member>
        <member name="M:Terminal.Gui.WindowsDriver.GetCursorVisibility(Terminal.Gui.CursorVisibility@)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.WindowsDriver.SetCursorVisibility(Terminal.Gui.CursorVisibility)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.WindowsDriver.EnsureCursorVisibility">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.WindowsMainLoop">
            <summary>
                Mainloop intended to be used with the <see cref="T:Terminal.Gui.WindowsDriver"/>, and can
                only be used on Windows.
            </summary>
            <remarks>
                This implementation is used for WindowsDriver.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.WindowsMainLoop.WinChanged">
            <summary>
                Invoked when the window is changed.
            </summary>
        </member>
        <member name="T:Terminal.Gui.AnsiColorCode">
            <summary>
                The 16 foreground color codes used by ANSI Esc sequences for 256 color terminals. Add 10 to these values for
                background color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BLACK">
            <summary>The ANSI color code for Black.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.RED">
            <summary>The ANSI color code for Red.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.GREEN">
            <summary>The ANSI color code for Green.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.YELLOW">
            <summary>The ANSI color code for Yellow.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BLUE">
            <summary>The ANSI color code for Blue.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.MAGENTA">
            <summary>The ANSI color code for Magenta.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.CYAN">
            <summary>The ANSI color code for Cyan.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.WHITE">
            <summary>The ANSI color code for White.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BRIGHT_BLACK">
            <summary>The ANSI color code for Bright Black.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BRIGHT_RED">
            <summary>The ANSI color code for Bright Red.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BRIGHT_GREEN">
            <summary>The ANSI color code for Bright Green.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BRIGHT_YELLOW">
            <summary>The ANSI color code for Bright Yellow.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BRIGHT_BLUE">
            <summary>The ANSI color code for Bright Blue.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BRIGHT_MAGENTA">
            <summary>The ANSI color code for Bright Magenta.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BRIGHT_CYAN">
            <summary>The ANSI color code for Bright Cyan.</summary>
        </member>
        <member name="F:Terminal.Gui.AnsiColorCode.BRIGHT_WHITE">
            <summary>The ANSI color code for Bright White.</summary>
        </member>
        <member name="T:Terminal.Gui.Attribute">
            <summary>Attributes represent how text is styled when displayed in the terminal.</summary>
            <remarks>
                <see cref="T:Terminal.Gui.Attribute"/> provides a platform independent representation of colors (and someday other forms of
                text styling). They encode both the foreground and the background color and are used in the
                <see cref="T:Terminal.Gui.ColorScheme"/> class to define color schemes that can be used in an application.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Attribute.Default">
            <summary>Default empty attribute.</summary>
        </member>
        <member name="P:Terminal.Gui.Attribute.PlatformColor">
            <summary>The <see cref="T:Terminal.Gui.ConsoleDriver"/>-specific color value.</summary>
        </member>
        <member name="P:Terminal.Gui.Attribute.Foreground">
            <summary>The foreground color.</summary>
        </member>
        <member name="P:Terminal.Gui.Attribute.Background">
            <summary>The background color.</summary>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor">
            <summary>Initializes a new instance with default values.</summary>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.Attribute@)">
            <summary>Initializes a new instance from an existing instance.</summary>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(System.Int32,Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct.</summary>
            <param name="platformColor">platform-dependent color value.</param>
            <param name="foreground">Foreground</param>
            <param name="background">Background</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.Color@,Terminal.Gui.Color@)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct.</summary>
            <param name="foreground">Foreground</param>
            <param name="background">Background</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.ColorName@)">
            <summary>
                Initializes a new instance with a <see cref="T:Terminal.Gui.ColorName"/> value. Both <see cref="P:Terminal.Gui.Attribute.Foreground"/> and
                <see cref="P:Terminal.Gui.Attribute.Background"/> will be set to the specified color.
            </summary>
            <param name="colorName">Value.</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.ColorName@,Terminal.Gui.ColorName@)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct.</summary>
            <param name="foregroundName">Foreground</param>
            <param name="backgroundName">Background</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.ColorName@,Terminal.Gui.Color@)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct.</summary>
            <param name="foregroundName">Foreground</param>
            <param name="background">Background</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.Color@,Terminal.Gui.ColorName@)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct.</summary>
            <param name="foreground">Foreground</param>
            <param name="backgroundName">Background</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.Color@)">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct with the same colors for the foreground and
                background.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Attribute.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.Cell">
            <summary>
                Represents a single row/column in a Terminal.Gui rendering surface (e.g. <see cref="T:Terminal.Gui.LineCanvas"/> and
                <see cref="T:Terminal.Gui.ConsoleDriver"/>).
            </summary>
        </member>
        <member name="P:Terminal.Gui.Cell.Attribute">
            <summary>The attributes to use when drawing the Glyph.</summary>
        </member>
        <member name="P:Terminal.Gui.Cell.IsDirty">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Cell"/> has been modified since the
                last time it was drawn.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Cell.Rune">
            <summary>The character to display. If <see cref="P:Terminal.Gui.Cell.Rune"/> is <see langword="null"/>, then <see cref="P:Terminal.Gui.Cell.Rune"/> is ignored.</summary>
        </member>
        <member name="P:Terminal.Gui.Cell.CombiningMarks">
            <summary>
                The combining marks for <see cref="P:Terminal.Gui.Cell.Rune"/> that when combined makes this Cell a combining sequence. If
                <see cref="P:Terminal.Gui.Cell.CombiningMarks"/> empty, then <see cref="P:Terminal.Gui.Cell.CombiningMarks"/> is ignored.
            </summary>
            <remarks>
                Only valid in the rare case where <see cref="P:Terminal.Gui.Cell.Rune"/> is a combining sequence that could not be normalized to a
                single Rune.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Cell.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ColorExtensions.ColorNameToAnsiColorMap">
            <summary>Defines the 16 legacy color names and their corresponding ANSI color codes.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorExtensions.ColorNameToColorMap">
            <summary>Reverse mapping for <see cref="P:Terminal.Gui.ColorExtensions.ColorToNameMap"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorExtensions.ColorToNameMap">
            <summary>
                Gets or sets a <see cref="T:System.Collections.Frozen.FrozenDictionary`2"/> that maps legacy 16-color values to the
                corresponding <see cref="T:Terminal.Gui.ColorName"/>.
            </summary>
            <remarks>
                Setter should be called as infrequently as possible, as <see cref="T:System.Collections.Frozen.FrozenDictionary`2"/> is
                expensive to create.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.ColorName">
            <summary>
                Defines the 16 legacy color names and values that can be used to set the foreground and background colors in
                Terminal.Gui apps. Used with <see cref="T:Terminal.Gui.Color"/>.
            </summary>
            <remarks>
                <para>These colors match the 16 colors defined for ANSI escape sequences for 4-bit (16) colors.</para>
                <para>
                    For terminals that support 24-bit color (TrueColor), the RGB values for each of these colors can be
                    configured using the <see cref="P:Terminal.Gui.Color.Colors"/> property.
                </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ColorName.Black">
            <summary>The black color. ANSI escape sequence: <c>\u001b[30m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.Blue">
            <summary>The blue color. ANSI escape sequence: <c>\u001b[34m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.Green">
            <summary>The green color. ANSI escape sequence: <c>\u001b[32m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.Cyan">
            <summary>The cyan color. ANSI escape sequence: <c>\u001b[36m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.Red">
            <summary>The red color. ANSI escape sequence: <c>\u001b[31m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.Magenta">
            <summary>The magenta color. ANSI escape sequence: <c>\u001b[35m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.Yellow">
            <summary>The yellow color (also known as Brown). ANSI escape sequence: <c>\u001b[33m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.Gray">
            <summary>The gray color (also known as White). ANSI escape sequence: <c>\u001b[37m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.DarkGray">
            <summary>The dark gray color (also known as Bright Black). ANSI escape sequence: <c>\u001b[30;1m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.BrightBlue">
            <summary>The bright blue color. ANSI escape sequence: <c>\u001b[34;1m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.BrightGreen">
            <summary>The bright green color. ANSI escape sequence: <c>\u001b[32;1m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.BrightCyan">
            <summary>The bright cyan color. ANSI escape sequence: <c>\u001b[36;1m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.BrightRed">
            <summary>The bright red color. ANSI escape sequence: <c>\u001b[31;1m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.BrightMagenta">
            <summary>The bright magenta color. ANSI escape sequence: <c>\u001b[35;1m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.BrightYellow">
            <summary>The bright yellow color. ANSI escape sequence: <c>\u001b[33;1m</c>.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorName.White">
            <summary>The White color (also known as Bright White). ANSI escape sequence: <c>\u001b[37;1m</c>.</summary>
        </member>
        <member name="T:Terminal.Gui.ColorParseException">
            <summary>An exception thrown when something goes wrong when trying to parse a <see cref="T:Terminal.Gui.Color"/>.</summary>
            <remarks>Contains additional information to help locate the problem. <br/> Not intended to be thrown by consumers.</remarks>
        </member>
        <member name="M:Terminal.Gui.ColorParseException.#ctor(System.ReadOnlySpan{System.Char}@,System.String,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>Creates a new instance of a <see cref="T:Terminal.Gui.ColorParseException"/> populated with the provided values.</summary>
            <param name="colorString">The text that caused this exception, as a <see langword="string"/>.</param>
            <param name="badValue">The specific value in <paramref name="colorString"/> that caused this exception.</param>
            <param name="badValueName">The name of the value (red, green, blue, alpha) that <paramref name="badValue"/> represents.</param>
            <param name="reason">The reason that <paramref name="badValue"/> failed to parse.</param>
        </member>
        <member name="M:Terminal.Gui.ColorParseException.#ctor(System.ReadOnlySpan{System.Char}@,System.String,System.String,System.String)">
            <summary>Creates a new instance of a <see cref="T:Terminal.Gui.ColorParseException"/> populated with the provided values.</summary>
            <param name="colorString">The text that caused this exception, as a <see langword="string"/>.</param>
            <param name="badValue">The specific value in <paramref name="colorString"/> that caused this exception.</param>
            <param name="badValueName">The name of the value (red, green, blue, alpha) that <paramref name="badValue"/> represents.</param>
            <param name="reason">The reason that <paramref name="badValue"/> failed to parse.</param>
        </member>
        <member name="P:Terminal.Gui.ColorParseException.BadValue">
            <summary>Gets the substring of <see cref="P:Terminal.Gui.ColorParseException.ColorString"/> caused this exception, as a <see langword="string"/></summary>
            <remarks>May be null or empty - only set if known.</remarks>
        </member>
        <member name="P:Terminal.Gui.ColorParseException.BadValueName">
            <summary>Gets the name of the color component corresponding to <see cref="P:Terminal.Gui.ColorParseException.BadValue"/>, if known.</summary>
            <remarks>May be null or empty - only set if known.</remarks>
        </member>
        <member name="P:Terminal.Gui.ColorParseException.ColorString">
            <summary>Gets the text that failed to parse, as a <see langword="string"/></summary>
            <remarks>Is marked <see langword="required"/>, so must be set by a constructor or initializer.</remarks>
        </member>
        <member name="P:Terminal.Gui.ColorParseException.Reason">
            <summary>Gets the reason that <see cref="P:Terminal.Gui.ColorParseException.BadValue"/> failed to parse, if known.</summary>
            <remarks>May be null or empty - only set if known.</remarks>
        </member>
        <member name="T:Terminal.Gui.Color">
            <summary>
                Represents a 24-bit color encoded in ARGB32 format.
                <para/>
            </summary>
            <seealso cref="T:Terminal.Gui.Attribute"/>
            <seealso cref="T:Terminal.Gui.ColorExtensions"/>
            <seealso cref="T:Terminal.Gui.ColorName"/>
        </member>
        <member name="F:Terminal.Gui.Color.A">
            <summary>The value of the alpha channel component</summary>
            <remarks>
                The alpha channel is not currently supported, so the value of the alpha channel bits will not affect
                rendering.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.Color.Argb">
            <summary>The value of this <see cref="T:Terminal.Gui.Color"/> as a <see langword="uint"/> in ARGB32 format.</summary>
            <remarks>
                The alpha channel is not currently supported, so the value of the alpha channel bits will not affect
                rendering.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.Color.B">
            <summary>The value of the blue color component.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.G">
            <summary>The value of the green color component.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.R">
            <summary>The value of the red color component.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.Rgba">
            <summary>The value of this <see cref="T:Terminal.Gui.Color"/> encoded as a signed 32-bit integer in ARGB32 format.</summary>
        </member>
        <member name="M:Terminal.Gui.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Color"/> <see langword="struct"/> using the supplied component
                values.
            </summary>
            <param name="red">The red 8-bits.</param>
            <param name="green">The green 8-bits.</param>
            <param name="blue">The blue 8-bits.</param>
            <param name="alpha">Optional; defaults to 0xFF. The Alpha channel is not supported by Terminal.Gui.</param>
            <remarks>Alpha channel is not currently supported by Terminal.Gui.</remarks>
            <exception cref="T:System.OverflowException">If the value of any parameter is greater than <see cref="F:System.Byte.MaxValue"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value of any parameter is negative.</exception>
        </member>
        <member name="M:Terminal.Gui.Color.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Color"/> class with an encoded signed 32-bit color value in
                ARGB32 format.
            </summary>
            <param name="rgba">The encoded 32-bit color value (see <see cref="F:Terminal.Gui.Color.Rgba"/>).</param>
            <remarks>
                The alpha channel is not currently supported, so the value of the alpha channel bits will not affect
                rendering.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.#ctor(System.UInt32)">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Color"/> class with an encoded unsigned 32-bit color value in
                ARGB32 format.
            </summary>
            <param name="argb">The encoded unsigned 32-bit color value (see <see cref="F:Terminal.Gui.Color.Argb"/>).</param>
            <remarks>
                The alpha channel is not currently supported, so the value of the alpha channel bits will not affect
                rendering.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.#ctor(Terminal.Gui.ColorName@)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Color"/> color from a legacy 16-color named value.</summary>
            <param name="colorName">The 16-color value.</param>
        </member>
        <member name="M:Terminal.Gui.Color.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Color"/> color from string. See
                <see cref="M:Terminal.Gui.Color.TryParse(System.String,System.Nullable{Terminal.Gui.Color}@)"/> for details.
            </summary>
            <param name="colorString"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="colorString"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
                If <paramref name="colorString"/> is an empty string or consists of only whitespace
                characters.
            </exception>
            <exception cref="T:Terminal.Gui.ColorParseException">If thrown by <see cref="M:Terminal.Gui.Color.Parse(System.String,System.IFormatProvider)"/></exception>
        </member>
        <member name="M:Terminal.Gui.Color.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Color"/> with all channels set to 0.</summary>
        </member>
        <member name="P:Terminal.Gui.Color.Colors">
            <summary>Gets or sets the 3-byte/6-character hexadecimal value for each of the legacy 16-color values.</summary>
        </member>
        <member name="M:Terminal.Gui.Color.GetAnsiColorCode">
            <summary>
                Gets the <see cref="T:Terminal.Gui.Color"/> using a legacy 16-color <see cref="T:Terminal.Gui.ColorName"/> value. <see langword="get"/> will
                return the closest 16 color match to the true color when no exact value is found.
            </summary>
            <remarks>
                Get returns the <see cref="M:Terminal.Gui.Color.GetClosestNamedColor(Terminal.Gui.Color)"/> of the closest 24-bit color value. Set sets the RGB
                value using a hard-coded map.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.GetClosestNamedColor">
            <summary>
                Gets the <see cref="T:Terminal.Gui.Color"/> using a legacy 16-color <see cref="T:Terminal.Gui.ColorName"/> value. <see langword="get"/>
                will return the closest 16 color match to the true color when no exact value is found.
            </summary>
            <remarks>
                Get returns the <see cref="M:Terminal.Gui.Color.GetClosestNamedColor(Terminal.Gui.Color)"/> of the closest 24-bit color value. Set sets the RGB
                value using a hard-coded map.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.IsClosestToNamedColor(Terminal.Gui.ColorName@)">
            <summary>
                Determines if the closest named <see cref="T:Terminal.Gui.Color"/> to <see langword="this"/> is the provided
                <paramref name="namedColor"/>.
            </summary>
            <param name="namedColor">
                The <see cref="M:Terminal.Gui.Color.GetClosestNamedColor(Terminal.Gui.Color)"/> to check if this <see cref="T:Terminal.Gui.Color"/> is closer
                to than any other configured named color.
            </param>
            <returns>
                <see langword="true"/> if the closest named color is the provided value. <br/> <see langword="false"/> if any
                other named color is closer to this <see cref="T:Terminal.Gui.Color"/> than <paramref name="namedColor"/>.
            </returns>
            <remarks>
                If <see langword="this"/> is equidistant from two named colors, the result of this method is not guaranteed to
                be determinate.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.IsColorClosestToNamedColor(Terminal.Gui.Color@,Terminal.Gui.ColorName@)">
            <summary>
                Determines if the closest named <see cref="T:Terminal.Gui.Color"/> to <paramref name="color"/>/> is the provided
                <paramref name="namedColor"/>.
            </summary>
            <param name="color">
                The color to test against the <see cref="M:Terminal.Gui.Color.GetClosestNamedColor(Terminal.Gui.Color)"/> value in
                <paramref name="namedColor"/>.
            </param>
            <param name="namedColor">
                The <see cref="M:Terminal.Gui.Color.GetClosestNamedColor(Terminal.Gui.Color)"/> to check if this <see cref="T:Terminal.Gui.Color"/> is closer
                to than any other configured named color.
            </param>
            <returns>
                <see langword="true"/> if the closest named color to <paramref name="color"/> is the provided value. <br/>
                <see langword="false"/> if any other named color is closer to <paramref name="color"/> than
                <paramref name="namedColor"/>.
            </returns>
            <remarks>
                If <paramref name="color"/> is equidistant from two named colors, the result of this method is not guaranteed
                to be determinate.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.GetClosestNamedColor(Terminal.Gui.Color)">
            <summary>Gets the "closest" named color to this <see cref="T:Terminal.Gui.Color"/> value.</summary>
            <param name="inputColor"></param>
            <remarks>
                Distance is defined here as the Euclidean distance between each color interpreted as a <see cref="T:System.Numerics.Vector3"/>.
                <para/>
                The order of the values in the passed Vector3 must be
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Color.GetHighlightColor">
            <summary>
            Gets a color that is the same hue as the current color, but with a different lightness.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Terminal.Gui.Color.Black">
            <summary>The black color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.Blue">
            <summary>The blue color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.Green">
            <summary>The green color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.Cyan">
            <summary>The cyan color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.Red">
            <summary>The red color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.Magenta">
            <summary>The magenta color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.Yellow">
            <summary>The yellow color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.Gray">
            <summary>The gray color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.DarkGray">
            <summary>The dark gray color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightBlue">
            <summary>The bright bBlue color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightGreen">
            <summary>The bright green color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightCyan">
            <summary>The bright cyan color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightRed">
            <summary>The bright red color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightMagenta">
            <summary>The bright magenta color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightYellow">
            <summary>The bright yellow color.</summary>
        </member>
        <member name="F:Terminal.Gui.Color.White">
            <summary>The White color.</summary>
        </member>
        <member name="M:Terminal.Gui.Color.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:System.Object.ToString"/>
            <summary>
                Returns a <see langword="string"/> representation of the current <see cref="T:Terminal.Gui.Color"/> value, according to the
                provided <paramref name="formatString"/> and optional <paramref name="formatProvider"/>.
            </summary>
            <param name="formatString">
                A format string that will be passed to
                <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.
                <para/>
                See remarks for parameters passed to that method.
            </param>
            <param name="formatProvider">
                An optional <see cref="T:System.IFormatProvider"/> to use when formatting the <see cref="T:Terminal.Gui.Color"/>
                using custom format strings not specified for this method. Provides this instance as <see cref="F:Terminal.Gui.Color.Argb"/>. <br/> If
                this parameter is not null, the specified <see cref="T:System.IFormatProvider"/> will be used instead of the custom
                formatting provided by the <see cref="T:Terminal.Gui.Color"/> type.
                <para/>
                See remarks for defined format strings.
            </param>
            <remarks>
                Pre-defined format strings for this method, if a custom <paramref name="formatProvider"/> is not supplied are:
                <list type="bullet">
                    <listheader>
                        <term>Value</term> <description>Result</description>
                    </listheader>
                    <item>
                        <term>g or null or empty string</term>
                        <description>
                            General/default format - Returns a named <see cref="T:Terminal.Gui.Color"/> if there is a match, or a
                            24-bit/3-byte/6-hex digit string in "#RRGGBB" format.
                        </description>
                    </item>
                    <item>
                        <term>G</term>
                        <description>
                            Extended general format - Returns a named <see cref="T:Terminal.Gui.Color"/> if there is a match, or a
                            32-bit/4-byte/8-hex digit string in "#AARRGGBB" format.
                        </description>
                    </item>
                    <item>
                        <term>d</term>
                        <description>
                            Decimal format - Returns a 3-component decimal representation of the <see cref="T:Terminal.Gui.Color"/> in
                            "rgb(R,G,B)" format.
                        </description>
                    </item>
                    <item>
                        <term>D</term>
                        <description>
                            Extended decimal format - Returns a 4-component decimal representation of the
                            <see cref="T:Terminal.Gui.Color"/> in "rgba(R,G,B,A)" format.
                        </description>
                    </item>
                </list>
                <para>
                    If <paramref name="formatProvider"/> is provided and is a non-null <see cref="T:Terminal.Gui.ICustomColorFormatter"/>, the
                    following behaviors are available, for the specified values of <paramref name="formatString"/>:
                    <list type="bullet">
                        <listheader>
                            <term>Value</term> <description>Result</description>
                        </listheader>
                        <item>
                            <term>null or empty string</term>
                            <description>
                                Calls <see cref="M:Terminal.Gui.ICustomColorFormatter.Format(System.String,System.Byte,System.Byte,System.Byte,System.Byte)"/> on the
                                provided <paramref name="formatProvider"/> with the null string, and <see cref="F:Terminal.Gui.Color.R"/>,
                                <see cref="F:Terminal.Gui.Color.G"/>, <see cref="F:Terminal.Gui.Color.B"/>, and <see cref="F:Terminal.Gui.Color.A"/> as typed arguments of type <see cref="T:System.Byte"/>
                                .
                            </description>
                        </item>
                        <item>
                            <term>All other values</term>
                            <description>
                                Calls <see cref="M:System.String.Format``1(System.IFormatProvider,System.Text.CompositeFormat,``0)"/> with the provided
                                <paramref name="formatProvider"/> and <paramref name="formatString"/> (parsed as a
                                <see cref="T:System.Text.CompositeFormat"/>), with the value of <see cref="F:Terminal.Gui.Color.Argb"/> as the sole
                                <see langword="uint"/>-typed argument.
                            </description>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
            <remarks>
                <para>
                    This method should be used only when absolutely necessary, because it <b>always</b> has more overhead than
                    <see cref="M:Terminal.Gui.Color.ToString(System.String,System.IFormatProvider)"/>, as this method results in an intermediate allocation
                    of one or more instances of <see langword="string"/> and a copy of that string to
                    <paramref name="destination"/> if formatting was successful. <br/> When possible, use
                    <see cref="M:Terminal.Gui.Color.ToString(System.String,System.IFormatProvider)"/>, which attempts to avoid intermediate allocations.
                </para>
                <para>
                    This method only returns <see langword="true"/> and with its output written to <paramref name="destination"/>
                    if the formatted string, <i>in its entirety</i>, will fit in <paramref name="destination"/>. If the resulting
                    formatted string is too large to fit in <paramref name="destination"/>, the result will be false and
                    <paramref name="destination"/> will be unaltered.
                </para>
                <para>
                    The resulting formatted string may be <b>shorter</b> than <paramref name="destination"/>. When this method
                    returns <see langword="true"/>, use <paramref name="charsWritten"/> when handling the value of
                    <paramref name="destination"/>.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.Parse(System.String,System.IFormatProvider)">
            <summary>Converts the provided <see langword="string"/> to a new <see cref="T:Terminal.Gui.Color"/> value.</summary>
            <param name="text">
                The text to analyze. Formats supported are "#RGB", "#RRGGBB", "#ARGB", "#AARRGGBB", "rgb(r,g,b)",
                "rgb(r,g,b,a)", "rgba(r,g,b)", "rgba(r,g,b,a)", and any of the <see cref="T:Terminal.Gui.ColorName"/> string values.
            </param>
            <param name="formatProvider">
                If specified and not <see langword="null"/>, will be passed to
                <see cref="M:Terminal.Gui.Color.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)"/>.
            </param>
            <returns>A <see cref="T:Terminal.Gui.Color"/> value equivalent to <paramref name="text"/>, if parsing was successful.</returns>
            <remarks>While <see cref="T:Terminal.Gui.Color"/> supports the alpha channel <see cref="F:Terminal.Gui.Color.A"/>, Terminal.Gui does not.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="text"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
                If <paramref name="text"/> is an empty string or consists of only whitespace
                characters.
            </exception>
            <exception cref="T:Terminal.Gui.ColorParseException">
                If thrown by
                <see cref="M:Terminal.Gui.Color.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)"/>.
            </exception>
        </member>
        <member name="M:Terminal.Gui.Color.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
                Converts the provided <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> to a new <see cref="T:Terminal.Gui.Color"/>
                value.
            </summary>
            <param name="text">
                The text to analyze. Formats supported are "#RGB", "#RRGGBB", "#RGBA", "#AARRGGBB", "rgb(r,g,b)",
                "rgb(r,g,b,a)", "rgba(r,g,b)", "rgba(r,g,b,a)", and any of the <see cref="T:Terminal.Gui.ColorName"/> string values.
            </param>
            <param name="formatProvider">
                Optional <see cref="T:System.IFormatProvider"/> to provide parsing services for the input text.
                <br/> Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> if <see langword="null"/>. <br/> If not null, must
                implement <see cref="T:Terminal.Gui.ICustomColorFormatter"/> or will be ignored and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
                will be used.
            </param>
            <returns>A <see cref="T:Terminal.Gui.Color"/> value equivalent to <paramref name="text"/>, if parsing was successful.</returns>
            <remarks>While <see cref="T:Terminal.Gui.Color"/> supports the alpha channel <see cref="F:Terminal.Gui.Color.A"/>, Terminal.Gui does not.</remarks>
            <exception cref="T:System.ArgumentException">
                with an inner <see cref="T:System.FormatException"/> if <paramref name="text"/> was unable
                to be successfully parsed as a <see cref="T:Terminal.Gui.Color"/>, for any reason.
            </exception>
        </member>
        <member name="M:Terminal.Gui.Color.TryParse(System.String,System.IFormatProvider,Terminal.Gui.Color@)">
            <summary>Converts the provided <see langword="string"/> to a new <see cref="T:Terminal.Gui.Color"/> value.</summary>
            <param name="text">
                The text to analyze. Formats supported are "#RGB", "#RRGGBB", "#ARGB", "#AARRGGBB", "rgb(r,g,b)",
                "rgb(r,g,b,a)", "rgba(r,g,b)", "rgba(r,g,b,a)", and any of the <see cref="M:Terminal.Gui.Color.GetClosestNamedColor(Terminal.Gui.Color)"/> string
                values.
            </param>
            <param name="formatProvider">
                Optional <see cref="T:System.IFormatProvider"/> to provide formatting services for the input text.
                <br/> Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> if <see langword="null"/>.
            </param>
            <param name="result">
                The parsed value, if successful, or <see langword="default"/>(<see cref="T:Terminal.Gui.Color"/>), if
                unsuccessful.
            </param>
            <returns>A <see langword="bool"/> value indicating whether parsing was successful.</returns>
            <remarks>While <see cref="T:Terminal.Gui.Color"/> supports the alpha channel <see cref="F:Terminal.Gui.Color.A"/>, Terminal.Gui does not.</remarks>
        </member>
        <member name="M:Terminal.Gui.Color.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,Terminal.Gui.Color@)">
            <summary>
                Converts the provided <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> to a new <see cref="T:Terminal.Gui.Color"/>
                value.
            </summary>
            <param name="text">
                The text to analyze. Formats supported are "#RGB", "#RRGGBB", "#ARGB", "#AARRGGBB", "rgb(r,g,b)",
                "rgb(r,g,b,a)", "rgba(r,g,b)", "rgba(r,g,b,a)", and any of the <see cref="M:Terminal.Gui.Color.GetClosestNamedColor(Terminal.Gui.Color)"/> string
                values.
            </param>
            <param name="formatProvider">
                If specified and not <see langword="null"/>, will be passed to
                <see cref="M:Terminal.Gui.Color.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)"/>.
            </param>
            <param name="color">
                The parsed value, if successful, or <see langword="default"/>(<see cref="T:Terminal.Gui.Color"/>), if
                unsuccessful.
            </param>
            <returns>A <see langword="bool"/> value indicating whether parsing was successful.</returns>
            <remarks>While <see cref="T:Terminal.Gui.Color"/> supports the alpha channel <see cref="F:Terminal.Gui.Color.A"/>, Terminal.Gui does not.</remarks>
        </member>
        <member name="M:Terminal.Gui.Color.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
            <remarks>
                Use of this method involves a stack allocation of <paramref name="utf8Destination"/>.Length * 2 bytes. Use of
                the overload taking a char span is recommended.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.Parse(System.ReadOnlySpan{System.Byte},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Color.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,Terminal.Gui.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Color.ToString">
            <summary>Converts the color to a string representation.</summary>
            <remarks>
                <para>If the color is a named color, the name is returned. Otherwise, the color is returned as a hex string.</para>
                <para><see cref="F:Terminal.Gui.Color.A"/> (Alpha channel) is ignored and the returned string will not include it for this overload.</para>
            </remarks>
            <returns>The string representation of this value in #RRGGBB format.</returns>
        </member>
        <member name="M:Terminal.Gui.Color.TryParse(System.String,System.Nullable{Terminal.Gui.Color}@)">
            <summary>Converts the provided string to a new <see cref="T:Terminal.Gui.Color"/> instance.</summary>
            <param name="text">
                The text to analyze. Formats supported are "#RGB", "#RRGGBB", "#ARGB", "#AARRGGBB", "rgb(r,g,b)",
                "rgb(r,g,b,a)", "rgba(r,g,b)", "rgba(r,g,b,a)", and any of the <see cref="T:Terminal.Gui.ColorName"/> string values.
            </param>
            <param name="color">The parsed value.</param>
            <returns>A boolean value indicating whether parsing was successful.</returns>
            <remarks>While <see cref="T:Terminal.Gui.Color"/> supports the alpha channel <see cref="F:Terminal.Gui.Color.A"/>, Terminal.Gui does not.</remarks>
        </member>
        <member name="P:Terminal.Gui.Color.MaxValue">
            <inheritdoc/>
            <returns>
                A <see cref="T:Terminal.Gui.Color"/> <see langword="struct"/> with all values set to <see cref="F:System.Byte.MaxValue"/>, meaning
                white.
            </returns>
        </member>
        <member name="P:Terminal.Gui.Color.MinValue">
            <inheritdoc/>
            <returns>A <see cref="T:Terminal.Gui.Color"/> <see langword="struct"/> with all values set to zero.</returns>
            <remarks>
                Though this returns a <see cref="T:Terminal.Gui.Color"/> with <see cref="F:Terminal.Gui.Color.A"/>, <see cref="F:Terminal.Gui.Color.R"/>, <see cref="F:Terminal.Gui.Color.G"/>, and
                <see cref="F:Terminal.Gui.Color.B"/> all set to zero, Terminal.Gui will treat it as black, because the alpha channel is not supported.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Color.op_Explicit(Terminal.Gui.Color)~System.Numerics.Vector3">
            <summary>
                Implicit conversion from <see cref="T:Terminal.Gui.Color"/> to <see cref="T:System.Numerics.Vector3"/> via
                <see cref="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)"/> where ( <see cref="F:System.Numerics.Vector3.X"/>, <see cref="F:System.Numerics.Vector3.Y"/>,
                <see cref="F:System.Numerics.Vector3.Z"/>) is (R,G,B).
            </summary>
            <remarks>
                This cast is narrowing and drops the alpha channel.
                <para/>
                Use <see cref="M:Terminal.Gui.Color.op_Implicit(Terminal.Gui.Color)~System.Numerics.Vector4"/> to maintain full value.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Color.op_Implicit(System.Int32)~Terminal.Gui.Color">
            <summary>
                Implicit conversion from <see langword="int"/> to <see cref="T:Terminal.Gui.Color"/>, via the <see cref="M:Terminal.Gui.Color.#ctor(System.Int32)"/>
                costructor.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Color.op_Implicit(System.UInt32)~Terminal.Gui.Color">
            <summary>
                Implicit conversion from <see langword="uint"/> to <see cref="T:Terminal.Gui.Color"/>, via the <see cref="M:Terminal.Gui.Color.#ctor(System.UInt32)"/>
                costructor.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Color.op_Implicit(Terminal.Gui.ColorName)~Terminal.Gui.Color">
            <summary>
                Implicit conversion from <see cref="M:Terminal.Gui.Color.GetClosestNamedColor(Terminal.Gui.Color)"/> to <see cref="T:Terminal.Gui.Color"/> via lookup from
                <see cref="P:Terminal.Gui.ColorExtensions.ColorNameToColorMap"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Color.op_Implicit(System.Numerics.Vector4)~Terminal.Gui.Color">
            <summary>
                Implicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:Terminal.Gui.Color"/>, where (<see cref="F:System.Numerics.Vector4.X"/>,
                <see cref="F:System.Numerics.Vector4.Y"/>, <see cref="F:System.Numerics.Vector4.Z"/>, <see cref="F:System.Numerics.Vector4.W"/>) is (<see cref="F:Terminal.Gui.Color.A"/>,<see cref="F:Terminal.Gui.Color.R"/>,
                <see cref="F:Terminal.Gui.Color.G"/>,<see cref="F:Terminal.Gui.Color.B"/>), via <see cref="M:Terminal.Gui.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Color.op_Implicit(System.Numerics.Vector3)~Terminal.Gui.Color">
            <summary>
                Implicit conversion from <see cref="T:System.Numerics.Vector3"/>, where <see cref="F:System.Numerics.Vector3.X"/> = <see cref="F:Terminal.Gui.Color.R"/>,
                <see cref="F:System.Numerics.Vector3.Y"/> = <see cref="F:Terminal.Gui.Color.G"/>, and <see cref="F:System.Numerics.Vector3.Z"/> = <see cref="F:Terminal.Gui.Color.B"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Color.op_Implicit(Terminal.Gui.Color)~System.Int32">
            <summary>
                Implicit conversion from <see cref="T:Terminal.Gui.Color"/> to <see langword="int"/> by returning the value of the
                <see cref="F:Terminal.Gui.Color.Rgba"/> field.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Color.op_Implicit(Terminal.Gui.Color)~System.UInt32">
            <summary>
                Implicit conversion from <see cref="T:Terminal.Gui.Color"/> to <see langword="uint"/> by returning the value of the
                <see cref="F:Terminal.Gui.Color.Argb"/> field.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Color.op_Implicit(Terminal.Gui.Color)~System.Numerics.Vector4">
            <summary>
                Implicit conversion to <see cref="T:System.Numerics.Vector3"/>, where <see cref="F:System.Numerics.Vector3.X"/> = <see cref="F:Terminal.Gui.Color.R"/>,
                <see cref="F:System.Numerics.Vector3.Y"/> = <see cref="F:Terminal.Gui.Color.G"/>, and <see cref="F:System.Numerics.Vector3.Z"/> = <see cref="F:Terminal.Gui.Color.B"/>.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Colors">
            <summary>
                Holds the <see cref="T:Terminal.Gui.ColorScheme"/>s that define the <see cref="T:Terminal.Gui.Attribute"/>s that are used by views to render
                themselves.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Colors.ColorSchemes">
            <summary>Gets a dictionary of defined <see cref="T:Terminal.Gui.ColorScheme"/> objects.</summary>
            <remarks>
                <para>
                    The <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> dictionary includes the following keys, by default:
                    <list type="table">
                        <listheader>
                            <term>Built-in Color Scheme</term> <description>Description</description>
                        </listheader>
                        <item>
                            <term>Base</term> <description>The base color scheme used for most Views.</description>
                        </item>
                        <item>
                            <term>TopLevel</term>
                            <description>The application Toplevel color scheme; used for the <see cref="T:Terminal.Gui.Toplevel"/> View.</description>
                        </item>
                        <item>
                            <term>Dialog</term>
                            <description>
                                The dialog color scheme; used for <see cref="T:Terminal.Gui.Dialog"/>, <see cref="T:Terminal.Gui.MessageBox"/>, and
                                other views dialog-like views.
                            </description>
                        </item>
                        <item>
                            <term>Menu</term>
                            <description>
                                The menu color scheme; used for <see cref="T:Terminal.Gui.MenuBar"/>, <see cref="T:Terminal.Gui.ContextMenu"/>, and
                                <see cref="T:Terminal.Gui.StatusBar"/>.
                            </description>
                        </item>
                        <item>
                            <term>Error</term>
                            <description>
                                The color scheme for showing errors, such as in
                                <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(System.String,System.String,System.String[])"/>.
                            </description>
                        </item>
                    </list>
                </para>
                <para>Changing the values of an entry in this dictionary will affect all views that use the scheme.</para>
                <para>
                    <see cref="T:Terminal.Gui.ConfigurationManager"/> can be used to override the default values for these schemes and add
                    additional schemes. See <see cref="P:Terminal.Gui.ConfigurationManager.Themes"/>.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Colors.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.Add(System.Collections.Generic.KeyValuePair{System.String,Terminal.Gui.ColorScheme})">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.Contains(System.Collections.Generic.KeyValuePair{System.String,Terminal.Gui.ColorScheme})">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Terminal.Gui.ColorScheme}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.Remove(System.Collections.Generic.KeyValuePair{System.String,Terminal.Gui.ColorScheme})">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Colors.Count">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Colors.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.Add(System.String,Terminal.Gui.ColorScheme)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.ContainsKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.TryGetValue(System.String,Terminal.Gui.ColorScheme@)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Colors.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Colors.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Colors.Values">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.Colors.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Colors.Reset">
            <summary>Resets the <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> dictionary to the default values.</summary>
        </member>
        <member name="T:Terminal.Gui.ColorScheme">
            <summary>Defines a standard set of <see cref="T:Terminal.Gui.Attribute"/>s for common visible elements in a <see cref="T:Terminal.Gui.View"/>.</summary>
            <remarks>
                <para>
                    ColorScheme objects are immutable. Once constructed, the properties cannot be changed. To change a
                    ColorScheme, create a new one with the desired values, using the <see cref="M:Terminal.Gui.ColorScheme.#ctor(Terminal.Gui.ColorScheme)"/>
                    constructor.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.#ctor">
            <summary>Creates a new instance set to the default colors (see <see cref="P:Terminal.Gui.Attribute.Default"/>).</summary>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.#ctor(Terminal.Gui.ColorScheme)">
            <summary>Creates a new instance, initialized with the values from <paramref name="scheme"/>.</summary>
            <param name="scheme">The scheme to initialize the new instance with.</param>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.#ctor(Terminal.Gui.Attribute)">
            <summary>Creates a new instance, initialized with the values from <paramref name="attribute"/>.</summary>
            <param name="attribute">The attribute to initialize the new instance with.</param>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.#ctor(Terminal.Gui.Attribute,Terminal.Gui.Attribute,Terminal.Gui.Attribute,Terminal.Gui.Attribute,Terminal.Gui.Attribute)">
            <summary>Creates a new instance, initialized with the values provided.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.Disabled">
            <summary>The default foreground and background color for text when the view is disabled.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.Focus">
            <summary>The foreground and background color for text when the view has the focus.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.HotFocus">
            <summary>The foreground and background color for for text in a focused view that indicates a <see cref="P:Terminal.Gui.View.HotKey"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.HotNormal">
            <summary>The foreground and background color for text in a non-focused view that indicates a <see cref="P:Terminal.Gui.View.HotKey"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.Normal">
            <summary>The foreground and background color for text when the view is not focused, hot, or disabled.</summary>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.Equals(Terminal.Gui.ColorScheme)">
            <summary>Compares two <see cref="T:Terminal.Gui.ColorScheme"/> objects for equality.</summary>
            <param name="other"></param>
            <returns>true if the two objects are equal</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.GetHashCode">
            <summary>Returns a hashcode for this instance.</summary>
            <returns>hashcode for this instance</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.GlyphDefinitions">
            <summary>Defines the standard set of glyphs used to draw checkboxes, lines, borders, etc...</summary>
            <remarks>
                <para>
                    Access with <see cref="P:Terminal.Gui.ConfigurationManager.Glyphs"/> (which is a global using alias for
                    <see cref="P:Terminal.Gui.ConfigurationManager.Glyphs"/>).
                </para>
                <para>
                    The default glyphs can be changed via the <see cref="T:Terminal.Gui.ConfigurationManager"/>. Within a <c>config.json</c>
                    file The Json property name is the property name prefixed with "Glyphs.".
                </para>
                <para>
                    The JSon property can be either a decimal number or a string. The string may be one of: - A unicode char
                    (e.g. "☑") - A hex value in U+ format (e.g. "U+2611") - A hex value in UTF-16 format (e.g. "\\u2611")
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.File">
            <summary>File icon.  Defaults to ☰ (Trigram For Heaven)</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Folder">
            <summary>Folder icon.  Defaults to ꤉ (Kayah Li Digit Nine)</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HorizontalEllipsis">
            <summary>Horizontal Ellipsis - … U+2026</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VerticalFourDots">
            <summary>Vertical Four Dots - ⁞ U+205e</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Checked">
            <summary>Checked indicator (e.g. for <see cref="T:Terminal.Gui.ListView"/> and <see cref="T:Terminal.Gui.CheckBox"/>).</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.UnChecked">
            <summary>Not Checked indicator (e.g. for <see cref="T:Terminal.Gui.ListView"/> and <see cref="T:Terminal.Gui.CheckBox"/>).</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.NullChecked">
            <summary>Null Checked indicator (e.g. for <see cref="T:Terminal.Gui.ListView"/> and <see cref="T:Terminal.Gui.CheckBox"/>).</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Selected">
            <summary>Selected indicator  (e.g. for <see cref="T:Terminal.Gui.ListView"/> and <see cref="T:Terminal.Gui.RadioGroup"/>).</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.UnSelected">
            <summary>Not Selected indicator (e.g. for <see cref="T:Terminal.Gui.ListView"/> and <see cref="T:Terminal.Gui.RadioGroup"/>).</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightArrow">
            <summary>Horizontal arrow.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftArrow">
            <summary>Left arrow.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.DownArrow">
            <summary>Down arrow.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.UpArrow">
            <summary>Vertical arrow.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftDefaultIndicator">
            <summary>Left default indicator (e.g. for <see cref="T:Terminal.Gui.Button"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightDefaultIndicator">
            <summary>Horizontal default indicator (e.g. for <see cref="T:Terminal.Gui.Button"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftBracket">
            <summary>Left Bracket (e.g. for <see cref="T:Terminal.Gui.Button"/>. Default is (U+005B) - [.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightBracket">
            <summary>Horizontal Bracket (e.g. for <see cref="T:Terminal.Gui.Button"/>. Default is (U+005D) - ].</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BlocksMeterSegment">
            <summary>Half block meter segment (e.g. for <see cref="T:Terminal.Gui.ProgressBar"/>).</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.ContinuousMeterSegment">
            <summary>Continuous block meter segment (e.g. for <see cref="T:Terminal.Gui.ProgressBar"/>).</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Stipple">
            <summary>Stipple pattern (e.g. for <see cref="T:Terminal.Gui.ScrollBarView"/>). Default is Light Shade (U+2591) - ░.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Diamond">
            <summary>Diamond (e.g. for <see cref="T:Terminal.Gui.ScrollBarView"/>. Default is Lozenge (U+25CA) - ◊.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Close">
            <summary>Close. Default is Heavy Ballot X (U+2718) - ✘.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Minimize">
            <summary>Minimize. Default is Lower Horizontal Shadowed White Circle (U+274F) - ❏.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Maximize">
            <summary>Maximize. Default is Upper Horizontal Shadowed White Circle (U+273D) - ✽.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Dot">
            <summary>Dot. Default is (U+2219) - ∙.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BlackCircle">
            <summary>Black Circle . Default is (U+025cf) - ●.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Expand">
            <summary>Expand (e.g. for <see cref="T:Terminal.Gui.TreeView"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Collapse">
            <summary>Expand (e.g. for <see cref="T:Terminal.Gui.TreeView"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.IdenticalTo">
            <summary>Identical To (U+226)</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Apple">
            <summary>Apple (non-BMP). Because snek. And because it's an example of a non-BMP surrogate pair. See Issue #2610.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.AppleBMP">
            <summary>Apple (BMP). Because snek. See Issue #2610.</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HLine">
            <summary>Box Drawings Horizontal Line - Light (U+2500) - ─</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VLine">
            <summary>Box Drawings Vertical Line - Light (U+2502) - │</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HLineDbl">
            <summary>Box Drawings Double Horizontal (U+2550) - ═</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VLineDbl">
            <summary>Box Drawings Double Vertical (U+2551) - ║</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HLineHvDa2">
            <summary>Box Drawings Heavy Double Dash Horizontal (U+254D) - ╍</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VLineHvDa3">
            <summary>Box Drawings Heavy Triple Dash Vertical (U+2507) - ┇</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HLineHvDa3">
            <summary>Box Drawings Heavy Triple Dash Horizontal (U+2505) - ┅</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HLineHvDa4">
            <summary>Box Drawings Heavy Quadruple Dash Horizontal (U+2509) - ┉</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VLineHvDa2">
            <summary>Box Drawings Heavy Double Dash Vertical (U+254F) - ╏</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VLineHvDa4">
            <summary>Box Drawings Heavy Quadruple Dash Vertical (U+250B) - ┋</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HLineDa2">
            <summary>Box Drawings Light Double Dash Horizontal (U+254C) - ╌</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VLineDa3">
            <summary>Box Drawings Light Triple Dash Vertical (U+2506) - ┆</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HLineDa3">
            <summary>Box Drawings Light Triple Dash Horizontal (U+2504) - ┄</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HLineDa4">
            <summary>Box Drawings Light Quadruple Dash Horizontal (U+2508) - ┈</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VLineDa2">
            <summary>Box Drawings Light Double Dash Vertical (U+254E) - ╎</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VLineDa4">
            <summary>Box Drawings Light Quadruple Dash Vertical (U+250A) - ┊</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HLineHv">
            <summary>Box Drawings Heavy Horizontal (U+2501) - ━</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.VLineHv">
            <summary>Box Drawings Heavy Vertical (U+2503) - ┃</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HalfLeftLine">
            <summary>Box Drawings Light Left (U+2574) - ╴</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HalfTopLine">
            <summary>Box Drawings Light Vertical (U+2575) - ╵</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HalfRightLine">
            <summary>Box Drawings Light Horizontal (U+2576) - ╶</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HalfBottomLine">
            <summary>Box Drawings Light Down (U+2577) - ╷</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HalfLeftLineHv">
            <summary>Box Drawings Heavy Left (U+2578) - ╸</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HalfTopLineHv">
            <summary>Box Drawings Heavy Vertical (U+2579) - ╹</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HalfRightLineHv">
            <summary>Box Drawings Heavy Horizontal (U+257A) - ╺</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.HalfBottomLineLt">
            <summary>Box Drawings Light Vertical and Horizontal (U+257B) - ╻</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightSideLineLtHv">
            <summary>Box Drawings Light Horizontal and Heavy Horizontal (U+257C) - ╼</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BottomSideLineLtHv">
            <summary>Box Drawings Light Vertical and Heavy Horizontal (U+257D) - ╽</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftSideLineHvLt">
            <summary>Box Drawings Heavy Left and Light Horizontal (U+257E) - ╾</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.TopSideLineHvLt">
            <summary>Box Drawings Heavy Vertical and Light Horizontal (U+257F) - ╿</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.ULCorner">
            <summary>Box Drawings Upper Left Corner - Light Vertical and Light Horizontal (U+250C) - ┌</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.ULCornerDbl">
            <summary>Box Drawings Upper Left Corner -  Double (U+2554) - ╔</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.ULCornerR">
            <summary>Box Drawings Upper Left Corner - Light Arc Down and Horizontal (U+256D) - ╭</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.ULCornerHv">
            <summary>Box Drawings Heavy Down and Horizontal (U+250F) - ┏</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.ULCornerHvLt">
            <summary>Box Drawings Down Heavy and Horizontal Light (U+251E) - ┎</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.ULCornerLtHv">
            <summary>Box Drawings Down Light and Horizontal Heavy (U+250D) - ┎</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.ULCornerDblSingle">
            <summary>Box Drawings Double Down and Single Horizontal (U+2553) - ╓</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.ULCornerSingleDbl">
            <summary>Box Drawings Single Down and Double Horizontal (U+2552) - ╒</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LLCorner">
            <summary>Box Drawings Lower Left Corner - Light Vertical and Light Horizontal (U+2514) - └</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LLCornerHv">
            <summary>Box Drawings Heavy Vertical and Horizontal (U+2517) - ┗</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LLCornerHvLt">
            <summary>Box Drawings Heavy Vertical and Horizontal Light (U+2516) - ┖</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LLCornerLtHv">
            <summary>Box Drawings Vertical Light and Horizontal Heavy (U+2511) - ┕</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LLCornerDbl">
            <summary>Box Drawings Double Vertical and Double Left (U+255A) - ╚</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LLCornerSingleDbl">
            <summary>Box Drawings Single Vertical and Double Left (U+2558) - ╘</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LLCornerDblSingle">
            <summary>Box Drawings Double Down and Single Left (U+2559) - ╙</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LLCornerR">
            <summary>Box Drawings Upper Left Corner - Light Arc Down and Left (U+2570) - ╰</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.URCorner">
            <summary>Box Drawings Upper Horizontal Corner - Light Vertical and Light Horizontal (U+2510) - ┐</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.URCornerDbl">
            <summary>Box Drawings Upper Horizontal Corner - Double Vertical and Double Horizontal (U+2557) - ╗</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.URCornerR">
            <summary>Box Drawings Upper Horizontal Corner - Light Arc Vertical and Horizontal (U+256E) - ╮</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.URCornerHv">
            <summary>Box Drawings Heavy Down and Left (U+2513) - ┓</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.URCornerHvLt">
            <summary>Box Drawings Heavy Vertical and Left Down Light (U+2511) - ┑</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.URCornerLtHv">
            <summary>Box Drawings Down Light and Horizontal Heavy (U+2514) - ┒</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.URCornerDblSingle">
            <summary>Box Drawings Double Vertical and Single Left (U+2556) - ╖</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.URCornerSingleDbl">
            <summary>Box Drawings Single Vertical and Double Left (U+2555) - ╕</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LRCorner">
            <summary>Box Drawings Lower Right Corner - Light (U+2518) - ┘</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LRCornerDbl">
            <summary>Box Drawings Lower Right Corner - Double (U+255D) - ╝</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LRCornerR">
            <summary>Box Drawings Lower Right Corner - Rounded (U+256F) - ╯</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LRCornerHv">
            <summary>Box Drawings Lower Right Corner - Heavy (U+251B) - ┛</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LRCornerDblSingle">
            <summary>Box Drawings Lower Right Corner - Double Vertical and Single Horizontal (U+255C) - ╜</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LRCornerSingleDbl">
            <summary>Box Drawings Lower Right Corner - Single Vertical and Double Horizontal (U+255B) - ╛</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LRCornerLtHv">
            <summary>Box Drawings Lower Right Corner - Light Vertical and Heavy Horizontal (U+2519) - ┙</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LRCornerHvLt">
            <summary>Box Drawings Lower Right Corner - Heavy Vertical and Light Horizontal (U+251A) - ┚</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftTee">
            <summary>Box Drawings Left Tee - Single Vertical and Single Horizontal (U+251C) - ├</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftTeeDblH">
            <summary>Box Drawings Left Tee - Single Vertical and Double Horizontal (U+255E) - ╞</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftTeeDblV">
            <summary>Box Drawings Left Tee - Double Vertical and Single Horizontal (U+255F) - ╟</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftTeeDbl">
            <summary>Box Drawings Left Tee - Double Vertical and Double Horizontal (U+2560) - ╠</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftTeeHvH">
            <summary>Box Drawings Left Tee - Heavy Horizontal and Light Vertical (U+2523) - ┝</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftTeeHvV">
            <summary>Box Drawings Left Tee - Light Horizontal and Heavy Vertical (U+252B) - ┠</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.LeftTeeHvDblH">
            <summary>Box Drawings Left Tee - Heavy Vertical and Heavy Horizontal (U+2527) - ┣</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightTee">
            <summary>Box Drawings Righ Tee - Single Vertical and Single Horizontal (U+2524) - ┤</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightTeeDblH">
            <summary>Box Drawings Right Tee - Single Vertical and Double Horizontal (U+2561) - ╡</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightTeeDblV">
            <summary>Box Drawings Right Tee - Double Vertical and Single Horizontal (U+2562) - ╢</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightTeeDbl">
            <summary>Box Drawings Right Tee - Double Vertical and Double Horizontal (U+2563) - ╣</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightTeeHvH">
            <summary>Box Drawings Right Tee - Heavy Horizontal and Light Vertical (U+2528) - ┥</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightTeeHvV">
            <summary>Box Drawings Right Tee - Light Horizontal and Heavy Vertical (U+2530) - ┨</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.RightTeeHvDblH">
            <summary>Box Drawings Right Tee - Heavy Vertical and Heavy Horizontal (U+252C) - ┫</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.TopTee">
            <summary>Box Drawings Top Tee - Single Vertical and Single Horizontal (U+252C) - ┬</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.TopTeeDblH">
            <summary>Box Drawings Top Tee - Single Vertical and Double Horizontal (U+2564) - ╤</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.TopTeeDblV">
            <summary>Box Drawings Top Tee - Double Vertical and Single Horizontal  (U+2565) - ╥</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.TopTeeDbl">
            <summary>Box Drawings Top Tee - Double Vertical and Double Horizontal (U+2566) - ╦</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.TopTeeHvH">
            <summary>Box Drawings Top Tee - Heavy Horizontal and Light Vertical (U+252F) - ┯</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.TopTeeHvV">
            <summary>Box Drawings Top Tee - Light Horizontal and Heavy Vertical (U+2537) - ┰</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.TopTeeHvDblH">
            <summary>Box Drawings Top Tee - Heavy Vertical and Heavy Horizontal (U+2533) - ┳</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BottomTee">
            <summary>Box Drawings Bottom Tee - Single Vertical and Single Horizontal (U+2534) - ┴</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BottomTeeDblH">
            <summary>Box Drawings Bottom Tee - Single Vertical and Double Horizontal (U+2567) - ╧</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BottomTeeDblV">
            <summary>Box Drawings Bottom Tee - Double Vertical and Single Horizontal (U+2568) - ╨</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BottomTeeDbl">
            <summary>Box Drawings Bottom Tee - Double Vertical and Double Horizontal (U+2569) - ╩</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BottomTeeHvH">
            <summary>Box Drawings Bottom Tee - Heavy Horizontal and Light Vertical (U+2535) - ┷</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BottomTeeHvV">
            <summary>Box Drawings Bottom Tee - Light Horizontal and Heavy Vertical (U+253D) - ┸</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.BottomTeeHvDblH">
            <summary>Box Drawings Bottom Tee - Heavy Vertical and Heavy Horizontal (U+2539) - ┻</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.Cross">
            <summary>Box Drawings Cross - Single Vertical and Single Horizontal (U+253C) - ┼</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.CrossDblH">
            <summary>Box Drawings Cross - Single Vertical and Double Horizontal (U+256A) - ╪</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.CrossDblV">
            <summary>Box Drawings Cross - Double Vertical and Single Horizontal (U+256B) - ╫</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.CrossDbl">
            <summary>Box Drawings Cross - Double Vertical and Double Horizontal (U+256C) - ╬</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.CrossHvH">
            <summary>Box Drawings Cross - Heavy Horizontal and Light Vertical (U+253F) - ┿</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.CrossHvV">
            <summary>Box Drawings Cross - Light Horizontal and Heavy Vertical (U+2541) - ╂</summary>
        </member>
        <member name="P:Terminal.Gui.GlyphDefinitions.CrossHv">
            <summary>Box Drawings Cross - Heavy Vertical and Heavy Horizontal (U+254B) - ╋</summary>
        </member>
        <member name="T:Terminal.Gui.ICustomColorFormatter">
            <summary>An interface to support custom formatting and parsing of <see cref="T:Terminal.Gui.Color"/> values.</summary>
        </member>
        <member name="M:Terminal.Gui.ICustomColorFormatter.Format(System.String,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
                A method that returns a <see langword="string"/> based on the <paramref name="formatString"/> specified and
                the byte parameters <paramref name="r"/>, <paramref name="g"/>, <paramref name="b"/>, and <paramref name="a"/>,
                which are provided by <see cref="T:Terminal.Gui.Color"/>
            </summary>
            <param name="formatString"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ICustomColorFormatter.Parse(System.ReadOnlySpan{System.Char})">
            <summary>A method that returns a <see cref="T:Terminal.Gui.Color"/> value based on the <paramref name="text"/> specified.</summary>
            <param name="text">
                A string or other <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> to parse as a
                <see cref="T:Terminal.Gui.Color"/>.
            </param>
            <returns>A <see cref="T:Terminal.Gui.Color"/> value equivalent to <paramref name="text"/>.</returns>
        </member>
        <member name="P:Terminal.Gui.IntersectionDefinition.Line">
            <summary>The line that intersects <see cref="P:Terminal.Gui.IntersectionDefinition.Point"/></summary>
        </member>
        <member name="P:Terminal.Gui.IntersectionDefinition.Point">
            <summary>The point at which the intersection happens</summary>
        </member>
        <member name="P:Terminal.Gui.IntersectionDefinition.Type">
            <summary>Defines how <see cref="P:Terminal.Gui.IntersectionDefinition.Line"/> position relates to <see cref="P:Terminal.Gui.IntersectionDefinition.Point"/>.</summary>
        </member>
        <member name="T:Terminal.Gui.IntersectionRuneType">
            <summary>The type of Rune that we will use before considering double width, curved borders etc</summary>
        </member>
        <member name="F:Terminal.Gui.IntersectionType.None">
            <summary>There is no intersection</summary>
        </member>
        <member name="F:Terminal.Gui.IntersectionType.PassOverHorizontal">
            <summary>A line passes directly over this point traveling along the horizontal axis</summary>
        </member>
        <member name="F:Terminal.Gui.IntersectionType.PassOverVertical">
            <summary>A line passes directly over this point traveling along the vertical axis</summary>
        </member>
        <member name="F:Terminal.Gui.IntersectionType.StartUp">
            <summary>A line starts at this point and is traveling up</summary>
        </member>
        <member name="F:Terminal.Gui.IntersectionType.StartRight">
            <summary>A line starts at this point and is traveling right</summary>
        </member>
        <member name="F:Terminal.Gui.IntersectionType.StartDown">
            <summary>A line starts at this point and is traveling down</summary>
        </member>
        <member name="F:Terminal.Gui.IntersectionType.StartLeft">
            <summary>A line starts at this point and is traveling left</summary>
        </member>
        <member name="F:Terminal.Gui.IntersectionType.Dot">
            <summary>A line exists at this point who has 0 length</summary>
        </member>
        <member name="T:Terminal.Gui.Justification">
            <summary>
                Controls how the <see cref="T:Terminal.Gui.Justifier"/> justifies items within a container. 
            </summary>
        </member>
        <member name="F:Terminal.Gui.Justification.Left">
            <summary>
                The items will be aligned to the left.
                Set <see cref="P:Terminal.Gui.Justifier.PutSpaceBetweenItems"/> to <see langword="true"/> to ensure at least one space between
                each item.
            </summary>
            <example>
                <c>
                    111 2222 33333
                </c>
            </example>
        </member>
        <member name="F:Terminal.Gui.Justification.Right">
            <summary>
                The items will be aligned to the right.
                Set <see cref="P:Terminal.Gui.Justifier.PutSpaceBetweenItems"/> to <see langword="true"/> to ensure at least one space between
                each item.
            </summary>
            <example>
                <c>
                    111 2222 33333
                </c>
            </example>
        </member>
        <member name="F:Terminal.Gui.Justification.Centered">
            <summary>
                The group will be centered in the container.
                If centering is not possible, the group will be left-justified.
                Set <see cref="P:Terminal.Gui.Justifier.PutSpaceBetweenItems"/> to <see langword="true"/> to ensure at least one space between
                each item.
            </summary>
            <example>
                <c>
                    111 2222 33333
                </c>
            </example>
        </member>
        <member name="F:Terminal.Gui.Justification.Justified">
            <summary>
                The items will be justified. Space will be added between the items such that the first item
                is at the start and the right side of the last item against the end.
                Set <see cref="P:Terminal.Gui.Justifier.PutSpaceBetweenItems"/> to <see langword="true"/> to ensure at least one space between
                each item.
            </summary>
            <example>
                <c>
                    111    2222     33333
                </c>
            </example>
        </member>
        <member name="F:Terminal.Gui.Justification.FirstLeftRestRight">
            <summary>
                The first item will be aligned to the left and the remaining will aligned to the right.
                Set <see cref="P:Terminal.Gui.Justifier.PutSpaceBetweenItems"/> to <see langword="true"/> to ensure at least one space between
                each item.
            </summary>
            <example>
                <c>
                    111        2222 33333
                </c>
            </example>
        </member>
        <member name="F:Terminal.Gui.Justification.LastRightRestLeft">
            <summary>
                The last item will be aligned to the right and the remaining will aligned to the left.
                Set <see cref="P:Terminal.Gui.Justifier.PutSpaceBetweenItems"/> to <see langword="true"/> to ensure at least one space between
                each item.
            </summary>
            <example>
                <c>
                    111 2222        33333
                </c>
            </example>
        </member>
        <member name="T:Terminal.Gui.Justifier">
            <summary>
                Justifies items within a container based on the specified <see cref="P:Terminal.Gui.Justifier.Justification"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Justifier.Justification">
            <summary>
            Gets or sets how the <see cref="T:Terminal.Gui.Justifier"/> justifies items within a container.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Justifier.ContainerSize">
            <summary>
            The size of the container.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Justifier.PutSpaceBetweenItems">
            <summary>
                Gets or sets whether <see cref="M:Terminal.Gui.Justifier.Justify(System.Int32[])"/> puts a space is placed between items. Default is <see langword="false"/>. If <see langword="true"/>, a space will be
                placed between each item, which is useful for justifying text.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Justifier.Justify(System.Int32[])">
            <summary>
                Takes a list of items and returns their positions when justified within a container <see name="ContainerSize"/> wide based on the specified
                <see cref="P:Terminal.Gui.Justifier.Justification"/>.
            </summary>
            <param name="sizes">The sizes of the items to justify.</param>
            <returns>The locations of the items, from left to right.</returns>
        </member>
        <member name="M:Terminal.Gui.Justifier.Justify(Terminal.Gui.Justification,System.Boolean,System.Int32,System.Int32[])">
            <summary>
                Takes a list of items and returns their positions when justified within a container <paramref name="containerSize"/> wide based on the specified
                <see cref="P:Terminal.Gui.Justifier.Justification"/>.
            </summary>
            <param name="sizes">The sizes of the items to justify.</param>
            <param name="justification">The justification style.</param>
            <param name="putSpaceBetweenItems"></param>
            <param name="containerSize">The size of the container.</param>
            <returns>The locations of the items, from left to right.</returns>
        </member>
        <member name="T:Terminal.Gui.LineCanvas">
            <summary>Facilitates box drawing and line intersection detection and rendering.  Does not support diagonal lines.</summary>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.#ctor">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.#ctor(System.Collections.Generic.IEnumerable{Terminal.Gui.StraightLine})">
            <summary>Creates a new instance with the given <paramref name="lines"/>.</summary>
            <param name="lines">Initial lines for the canvas.</param>
        </member>
        <member name="P:Terminal.Gui.LineCanvas.Viewport">
            <summary>
                Gets the rectangle that describes the bounds of the canvas. Location is the coordinates of the line that is
                furthest left/top and Size is defined by the line that extends the furthest right/bottom.
            </summary>
        </member>
        <member name="P:Terminal.Gui.LineCanvas.Lines">
            <summary>Gets the lines in the canvas.</summary>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.AddLine(System.Drawing.Point,System.Int32,Terminal.Gui.Orientation,Terminal.Gui.LineStyle,System.Nullable{Terminal.Gui.Attribute})">
            <summary>
                <para>Adds a new <paramref name="length"/> long line to the canvas starting at <paramref name="start"/>.</para>
                <para>
                    Use positive <paramref name="length"/> for the line to extend Right and negative for Left when
                    <see cref="T:Terminal.Gui.Orientation"/> is <see cref="F:Terminal.Gui.Orientation.Horizontal"/>.
                </para>
                <para>
                    Use positive <paramref name="length"/> for the line to extend Down and negative for Up when
                    <see cref="T:Terminal.Gui.Orientation"/> is <see cref="F:Terminal.Gui.Orientation.Vertical"/>.
                </para>
            </summary>
            <param name="start">Starting point.</param>
            <param name="length">
                The length of line. 0 for an intersection (cross or T). Positive for Down/Right. Negative for
                Up/Left.
            </param>
            <param name="orientation">The direction of the line.</param>
            <param name="style">The style of line to use</param>
            <param name="attribute"></param>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.AddLine(Terminal.Gui.StraightLine)">
            <summary>Adds a new line to the canvas</summary>
            <param name="line"></param>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.Clear">
            <summary>Clears all lines from the LineCanvas.</summary>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.ClearCache">
            <summary>
                Clears any cached states from the canvas Call this method if you make changes to lines that have already been
                added.
            </summary>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.GetCellMap">
            <summary>
                Evaluates the lines that have been added to the canvas and returns a map containing the glyphs and their
                locations. The glyphs are the characters that should be rendered so that all lines connect up with the appropriate
                intersection symbols.
            </summary>
            <returns>A map of all the points within the canvas.</returns>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.GetMap(System.Drawing.Rectangle)">
            <summary>
                Evaluates the lines that have been added to the canvas and returns a map containing the glyphs and their
                locations. The glyphs are the characters that should be rendered so that all lines connect up with the appropriate
                intersection symbols.
            </summary>
            <param name="inArea">A rectangle to constrain the search by.</param>
            <returns>A map of the points within the canvas that intersect with <paramref name="inArea"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.GetMap">
            <summary>
                Evaluates the lines that have been added to the canvas and returns a map containing the glyphs and their
                locations. The glyphs are the characters that should be rendered so that all lines connect up with the appropriate
                intersection symbols.
            </summary>
            <returns>A map of all the points within the canvas.</returns>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.Merge(Terminal.Gui.LineCanvas)">
            <summary>Merges one line canvas into this one.</summary>
            <param name="lineCanvas"></param>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.RemoveLastLine">
            <summary>Removes the last line added to the canvas</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.ToString">
            <summary>
                Returns the contents of the line canvas rendered to a string. The string will include all columns and rows,
                even if <see cref="P:Terminal.Gui.LineCanvas.Viewport"/> has negative coordinates. For example, if the canvas contains a single line that
                starts at (-1,-1) with a length of 2, the rendered string will have a length of 2.
            </summary>
            <returns>The canvas rendered to a string.</returns>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.Exactly(System.Collections.Generic.HashSet{Terminal.Gui.IntersectionType},Terminal.Gui.IntersectionType[])">
            <summary>
                Returns true if all requested <paramref name="types"/> appear in <paramref name="intersects"/> and there are
                no additional <see cref="T:Terminal.Gui.IntersectionRuneType"/>
            </summary>
            <param name="intersects"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.Has(System.Collections.Generic.HashSet{Terminal.Gui.IntersectionType},Terminal.Gui.IntersectionType[])">
            <summary>
                Returns true if the <paramref name="intersects"/> collection has all the <paramref name="types"/> specified
                (i.e. AND).
            </summary>
            <param name="intersects"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.LineCanvas.IntersectionRuneResolver.SetGlyphs">
            <summary>
                Sets the glyphs used. Call this method after construction and any time ConfigurationManager has updated the
                settings.
            </summary>
        </member>
        <member name="T:Terminal.Gui.LineStyle">
            <summary>Defines the style of lines for a <see cref="T:Terminal.Gui.LineCanvas"/>.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.None">
            <summary>No border is drawn.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.Single">
            <summary>The border is drawn using thin line CM.Glyphs.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.Dashed">
            <summary>The border is drawn using thin line glyphs with dashed (double and triple) straight lines.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.Dotted">
            <summary>The border is drawn using thin line glyphs with short dashed (triple and quadruple) straight lines.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.Double">
            <summary>The border is drawn using thin double line CM.Glyphs.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.Heavy">
            <summary>The border is drawn using heavy line CM.Glyphs.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.HeavyDashed">
            <summary>The border is drawn using heavy line glyphs with dashed (double and triple) straight lines.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.HeavyDotted">
            <summary>The border is drawn using heavy line glyphs with short dashed (triple and quadruple) straight lines.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.Rounded">
            <summary>The border is drawn using thin line glyphs with rounded corners.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.RoundedDashed">
            <summary>The border is drawn using thin line glyphs with rounded corners and dashed (double and triple) straight lines.</summary>
        </member>
        <member name="F:Terminal.Gui.LineStyle.RoundedDotted">
            <summary>
                The border is drawn using thin line glyphs with rounded corners and short dashed (triple and quadruple)
                straight lines.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Ruler">
            <summary>Draws a ruler on the screen.</summary>
            <remarks>
                <para></para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Ruler.Attribute">
            <summary>Gets or sets the foreground and background color to use.</summary>
        </member>
        <member name="P:Terminal.Gui.Ruler.Length">
            <summary>Gets or sets the length of the ruler. The default is 0.</summary>
        </member>
        <member name="P:Terminal.Gui.Ruler.Orientation">
            <summary>Gets or sets whether the ruler is drawn horizontally or vertically. The default is horizontally.</summary>
        </member>
        <member name="M:Terminal.Gui.Ruler.Draw(System.Drawing.Point,System.Int32)">
            <summary>Draws the <see cref="T:Terminal.Gui.Ruler"/>.</summary>
            <param name="location">The location to start drawing the ruler, in screen-relative coordinates.</param>
            <param name="start">The start value of the ruler.</param>
        </member>
        <member name="T:Terminal.Gui.StraightLine">
            <summary>A line between two points on a horizontal or vertical <see cref="P:Terminal.Gui.StraightLine.Orientation"/> and a given style/color.</summary>
        </member>
        <member name="M:Terminal.Gui.StraightLine.#ctor(System.Drawing.Point,System.Int32,Terminal.Gui.Orientation,Terminal.Gui.LineStyle,System.Nullable{Terminal.Gui.Attribute})">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.StraightLine"/> class.</summary>
            <param name="start"></param>
            <param name="length"></param>
            <param name="orientation"></param>
            <param name="style"></param>
            <param name="attribute"></param>
        </member>
        <member name="P:Terminal.Gui.StraightLine.Attribute">
            <summary>Gets or sets the color of the line.</summary>
        </member>
        <member name="P:Terminal.Gui.StraightLine.Length">
            <summary>Gets or sets the length of the line.</summary>
        </member>
        <member name="P:Terminal.Gui.StraightLine.Orientation">
            <summary>Gets or sets the orientation (horizontal or vertical) of the line.</summary>
        </member>
        <member name="P:Terminal.Gui.StraightLine.Start">
            <summary>Gets or sets where the line begins.</summary>
        </member>
        <member name="P:Terminal.Gui.StraightLine.Style">
            <summary>Gets or sets the line style of the line (e.g. dotted, double).</summary>
        </member>
        <member name="P:Terminal.Gui.StraightLine.Viewport">
            <summary>
                Gets the rectangle that describes the bounds of the canvas. Location is the coordinates of the line that is
                furthest left/top and Size is defined by the line that extends the furthest right/bottom.
            </summary>
        </member>
        <member name="M:Terminal.Gui.StraightLine.ToString">
            <summary>Formats the Line as a string in (Start.X,Start.Y,Length,Orientation) notation.</summary>
        </member>
        <member name="T:Terminal.Gui.StraightLineExtensions">
            <summary>Extension methods for <see cref="T:Terminal.Gui.StraightLine"/> (including collections).</summary>
        </member>
        <member name="M:Terminal.Gui.StraightLineExtensions.Exclude(System.Collections.Generic.IEnumerable{Terminal.Gui.StraightLine},System.Drawing.Point,System.Int32,Terminal.Gui.Orientation)">
            <summary>
                Splits or removes all lines in the <paramref name="collection"/> such that none cover the given exclusion
                area.
            </summary>
            <param name="collection">Lines to adjust</param>
            <param name="start">First point to remove from collection</param>
            <param name="length">The number of sequential points to exclude</param>
            <param name="orientation">Orientation of the exclusion line</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.StraightLineExtensions.CreateLineFromDiff(Terminal.Gui.StraightLine,System.Int32,System.Int32)">
            <summary>
                Creates a new line which is part of <paramref name="l"/> from the point on the varying axis
                <paramref name="from"/> to <paramref name="length"/>.  Horizontal lines have points that vary by x while vertical
                lines have points that vary by y
            </summary>
            <param name="l">Line to create sub part from</param>
            <param name="from">Point on varying axis to start at</param>
            <param name="length">Length of line to return</param>
            <returns>The new line</returns>
        </member>
        <member name="M:Terminal.Gui.StraightLineExtensions.GetLineEndOnDiffAxis(System.Drawing.Point,System.Int32,Terminal.Gui.Orientation)">
            <summary>
                <para>
                    Calculates the single digit point where a line ends on the differing axis i.e. the maximum (controlling for
                    negative lengths).
                </para>
                <para>
                    For lines with <see cref="F:Terminal.Gui.Orientation.Horizontal"/> this is an x coordinate. For lines that are
                    <see cref="F:Terminal.Gui.Orientation.Vertical"/> this is a y coordinate.
                </para>
            </summary>
            <param name="start">Where the line starts</param>
            <param name="length">Length of the line</param>
            <param name="orientation">Orientation of the line</param>
            <returns>The maximum x or y (whichever is differing) point on the line, controlling for negative lengths. </returns>
        </member>
        <member name="M:Terminal.Gui.StraightLineExtensions.GetLineStartOnDiffAxis(System.Drawing.Point,System.Int32,Terminal.Gui.Orientation)">
            <summary>
                <para>
                    Calculates the single digit point where a line starts on the differing axis i.e. the minimum (controlling for
                    negative lengths).
                </para>
                <para>
                    For lines with <see cref="F:Terminal.Gui.Orientation.Horizontal"/> this is an x coordinate. For lines that are
                    <see cref="F:Terminal.Gui.Orientation.Vertical"/> this is a y coordinate.
                </para>
            </summary>
            <param name="start">Where the line starts</param>
            <param name="length">Length of the line</param>
            <param name="orientation">Orientation of the line</param>
            <returns>The minimum x or y (whichever is differing) point on the line, controlling for negative lengths. </returns>
        </member>
        <member name="T:Terminal.Gui.Thickness">
            <summary>
                Describes the thickness of a frame around a rectangle. Four <see cref="T:System.Int32"/> values describe the
                <see cref="F:Terminal.Gui.Thickness.Left"/>, <see cref="F:Terminal.Gui.Thickness.Top"/>, <see cref="F:Terminal.Gui.Thickness.Right"/>, and <see cref="F:Terminal.Gui.Thickness.Bottom"/> sides of the rectangle,
                respectively.
            </summary>
            <remarks>
                <para>
                    Use the helper API (<see cref="M:Terminal.Gui.Thickness.GetInside(System.Drawing.Rectangle)"/> to get the rectangle describing the insides of the
                    frame,
                    with the thickness widths subtracted.
                </para>
                <para>Use the helper API (<see cref="M:Terminal.Gui.Thickness.Draw(System.Drawing.Rectangle,System.String)"/> to draw the frame with the specified thickness.</para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.Thickness.Bottom">
            <summary>Gets or sets the width of the lower side of the rectangle.</summary>
        </member>
        <member name="F:Terminal.Gui.Thickness.Left">
            <summary>Gets or sets the width of the left side of the rectangle.</summary>
        </member>
        <member name="F:Terminal.Gui.Thickness.Right">
            <summary>Gets or sets the width of the right side of the rectangle.</summary>
        </member>
        <member name="F:Terminal.Gui.Thickness.Top">
            <summary>Gets or sets the width of the upper side of the rectangle.</summary>
        </member>
        <member name="M:Terminal.Gui.Thickness.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Thickness"/> class with all widths set to 0.</summary>
        </member>
        <member name="M:Terminal.Gui.Thickness.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Thickness"/> class with a uniform width to each side.</summary>
            <param name="width"></param>
        </member>
        <member name="M:Terminal.Gui.Thickness.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Thickness"/> class that has specific widths applied to each side
                of the rectangle.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="P:Terminal.Gui.Thickness.Empty">
            <summary>Gets an empty thickness.</summary>
        </member>
        <member name="P:Terminal.Gui.Thickness.Horizontal">
            <summary>
                Gets the total width of the left and right sides of the rectangle. Sets the width of the left and rigth sides
                of the rectangle to half the specified value.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Thickness.Vertical">
            <summary>
                Gets the total height of the top and bottom sides of the rectangle. Sets the height of the top and bottom
                sides of the rectangle to half the specified value.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Thickness.Equals(Terminal.Gui.Thickness)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other"></param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Terminal.Gui.Thickness.Contains(System.Drawing.Rectangle@,System.Drawing.Point@)">
            <summary>
                Gets whether the specified coordinates lie within the thickness (inside the bounding rectangle but outside
                the rectangle described by <see cref="M:Terminal.Gui.Thickness.GetInside(System.Drawing.Rectangle)"/>.
            </summary>
            <param name="outside">Describes the location and size of the rectangle that contains the thickness.</param>
            <param name="location">The coordinate to check.</param>
            <returns><see langword="true"/> if the specified coordinate is within the thickness; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Thickness.Add(Terminal.Gui.Thickness)">
            <summary>
                Adds the thickness widths of another <see cref="T:Terminal.Gui.Thickness"/> to the current <see cref="T:Terminal.Gui.Thickness"/>, returning a
                new <see cref="T:Terminal.Gui.Thickness"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Thickness.op_Addition(Terminal.Gui.Thickness,Terminal.Gui.Thickness)">
            <summary>
                Adds the thickness widths of another <see cref="T:Terminal.Gui.Thickness"/> to another <see cref="T:Terminal.Gui.Thickness"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Thickness.Draw(System.Drawing.Rectangle,System.String)">
            <summary>Draws the <see cref="T:Terminal.Gui.Thickness"/> rectangle with an optional diagnostics label.</summary>
            <remarks>
                If <see cref="T:Terminal.Gui.ViewDiagnosticFlags"/> is set to
                <see cref="F:Terminal.Gui.ViewDiagnosticFlags.Padding"/> then 'T', 'L', 'R', and 'B' glyphs will be used instead of
                space. If <see cref="T:Terminal.Gui.ViewDiagnosticFlags"/> is set to
                <see cref="F:Terminal.Gui.ViewDiagnosticFlags.Ruler"/> then a ruler will be drawn on the outer edge of the
                Thickness.
            </remarks>
            <param name="rect">The location and size of the rectangle that bounds the thickness rectangle, in screen coordinates.</param>
            <param name="label">The diagnostics label to draw on the bottom of the <see cref="F:Terminal.Gui.Thickness.Bottom"/>.</param>
            <returns>The inner rectangle remaining to be drawn.</returns>
        </member>
        <member name="M:Terminal.Gui.Thickness.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Thickness.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Thickness.GetInside(System.Drawing.Rectangle)">
            <summary>
                Returns a rectangle describing the location and size of the inside area of <paramref name="rect"/> with the
                thickness widths subtracted. The height and width of the returned rectangle will never be less than 0.
            </summary>
            <remarks>
                If a thickness width is negative, the inside rectangle will be larger than <paramref name="rect"/>. e.g. a
                <c>
                    Thickness (-1, -1, -1, -1) will result in a rectangle skewed -1 in the X and Y directions and with a Size
                    increased by 1.
                </c>
            </remarks>
            <param name="rect">The source rectangle</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Thickness.op_Equality(Terminal.Gui.Thickness,Terminal.Gui.Thickness)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Thickness.op_Inequality(Terminal.Gui.Thickness,Terminal.Gui.Thickness)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Thickness.ToString">
            <summary>Returns the thickness widths of the Thickness formatted as a string.</summary>
            <returns>The thickness widths as a string.</returns>
        </member>
        <member name="T:Terminal.Gui.ThicknessEventArgs">
            <summary>Event arguments for the <see cref="P:Terminal.Gui.ThicknessEventArgs.Thickness"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.ThicknessEventArgs.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.ThicknessEventArgs"/></summary>
        </member>
        <member name="P:Terminal.Gui.ThicknessEventArgs.PreviousThickness">
            <summary>The previous Thickness.</summary>
        </member>
        <member name="P:Terminal.Gui.ThicknessEventArgs.Thickness">
            <summary>The new Thickness.</summary>
        </member>
        <member name="T:Terminal.Gui.IAllowedType">
            <summary>Interface for <see cref="T:Terminal.Gui.FileDialog"/> restrictions on which file type(s) the user is allowed to select/enter.</summary>
        </member>
        <member name="M:Terminal.Gui.IAllowedType.IsAllowed(System.String)">
            <summary>
                Returns true if the file at <paramref name="path"/> is compatible with this allow option.  Note that the file
                may not exist (e.g. in the case of saving).
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.AllowedTypeAny">
            <summary><see cref="T:Terminal.Gui.IAllowedType"/> that allows selection of any types (*.*).</summary>
        </member>
        <member name="M:Terminal.Gui.AllowedTypeAny.IsAllowed(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AllowedTypeAny.ToString">
            <summary>Returns a string representation of this <see cref="T:Terminal.Gui.AllowedTypeAny"/>.</summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.AllowedType">
            <summary>
                Describes a requirement on what <see cref="T:System.IO.FileInfo"/> can be selected. This can be combined with other
                <see cref="T:Terminal.Gui.IAllowedType"/> in a <see cref="T:Terminal.Gui.FileDialog"/> to for example show only .csv files but let user change to
                open any if they want.
            </summary>
        </member>
        <member name="M:Terminal.Gui.AllowedType.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.AllowedType"/> class.</summary>
            <param name="description">The human readable text to display.</param>
            <param name="extensions">Extension(s) to match e.g. .csv.</param>
        </member>
        <member name="P:Terminal.Gui.AllowedType.Description">
            <summary>Gets or Sets the human readable description for the file type e.g. "Comma Separated Values".</summary>
        </member>
        <member name="P:Terminal.Gui.AllowedType.Extensions">
            <summary>Gets or Sets the permitted file extension(s) (e.g. ".csv").</summary>
        </member>
        <member name="M:Terminal.Gui.AllowedType.IsAllowed(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AllowedType.ToString">
            <summary>Returns <see cref="P:Terminal.Gui.AllowedType.Description"/> plus all <see cref="P:Terminal.Gui.AllowedType.Extensions"/> separated by semicolons.</summary>
        </member>
        <member name="T:Terminal.Gui.DefaultFileOperations">
            <summary>Default file operation handlers using modal dialogs.</summary>
        </member>
        <member name="M:Terminal.Gui.DefaultFileOperations.Delete(System.Collections.Generic.IEnumerable{System.IO.Abstractions.IFileSystemInfo})">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DefaultFileOperations.Rename(System.IO.Abstractions.IFileSystem,System.IO.Abstractions.IFileSystemInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DefaultFileOperations.New(System.IO.Abstractions.IFileSystem,System.IO.Abstractions.IDirectoryInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.FileDialogState.Path">
            <summary>Gets what was entered in the path text box of the dialog when the state was active.</summary>
        </member>
        <member name="T:Terminal.Gui.FileDialogStyle">
            <summary>Stores style settings for <see cref="T:Terminal.Gui.FileDialog"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.FileDialogStyle.#ctor(System.IO.Abstractions.IFileSystem)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.FileDialogStyle"/> class.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.CancelButtonText">
            <summary>Gets or sets the text on the 'Cancel' button.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.ColorProvider">
            <summary>
                Gets or sets the class thatis responsible for determining which color to use to represent files and
                directories when <see cref="P:Terminal.Gui.FileDialogStyle.UseColors"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.Culture">
            <summary>
                Gets or sets the culture to use (e.g. for number formatting). Defaults to
                <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.DateFormat">
            <summary>
                Gets or sets the format to use for date/times in the Modified column. Defaults to
                <see cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern"/> of the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.DefaultUseColors">
            <summary>
                Gets or sets the default value to use for <see cref="P:Terminal.Gui.FileDialogStyle.UseColors"/>. This can be populated from .tui config
                files via <see cref="T:Terminal.Gui.ConfigurationManager"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.DefaultUseUnicodeCharacters">
            <summary>
                Gets or sets the default value to use for <see cref="P:Terminal.Gui.FileDialogStyle.UseUnicodeCharacters"/>. This can be populated from .tui
                config files via <see cref="T:Terminal.Gui.ConfigurationManager"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.DirectoryAlreadyExistsFeedback">
            <summary>
                Gets or sets error message when user <see cref="T:Terminal.Gui.OpenMode"/> is <see cref="F:Terminal.Gui.OpenMode.File"/> and user enters the
                name of an existing directory (File system cannot have a folder with the same name as a file).
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.DirectoryMustExistFeedback">
            <summary>
                Gets or sets error message when user selects a directory that does not exist and <see cref="T:Terminal.Gui.OpenMode"/> is
                <see cref="F:Terminal.Gui.OpenMode.Directory"/> and <see cref="P:Terminal.Gui.FileDialog.MustExist"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.FileAlreadyExistsFeedback">
            <summary>
                Gets or sets error message when user <see cref="T:Terminal.Gui.OpenMode"/> is <see cref="F:Terminal.Gui.OpenMode.Directory"/> and user
                enters the name of an existing file (File system cannot have a folder with the same name as a file).
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.FileMustExistFeedback">
            <summary>
                Gets or sets error message when user selects a file that does not exist and <see cref="T:Terminal.Gui.OpenMode"/> is
                <see cref="F:Terminal.Gui.OpenMode.File"/> and <see cref="P:Terminal.Gui.FileDialog.MustExist"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.FilenameColumnName">
            <summary>Gets or sets the header text displayed in the Filename column of the files table.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.FileOrDirectoryMustExistFeedback">
            <summary>
                Gets or sets error message when user selects a file/dir that does not exist and <see cref="T:Terminal.Gui.OpenMode"/> is
                <see cref="F:Terminal.Gui.OpenMode.Mixed"/> and <see cref="P:Terminal.Gui.FileDialog.MustExist"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.FlipOkCancelButtonLayoutOrder">
            <summary>
                Gets or sets whether to flip the order of the Ok and Cancel buttons. Defaults to false (Ok button then Cancel
                button). Set to true to show Cancel button on left then Ok button instead.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.IconProvider">
            <summary>Gets or sets the class responsible for determining which symbol to use to represent files and directories.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.ModifiedColumnName">
            <summary>Gets or sets the header text displayed in the Modified column of the files table.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.OkButtonText">
            <summary>Gets or sets the text on the 'Ok' button.  Typically you may want to change this to "Open" or "Save" etc.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.PathCaption">
            <summary>Gets or sets the text displayed in the 'Path' text box when user has not supplied any input yet.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.SearchCaption">
            <summary>Gets or sets the text displayed in the 'Search' text box when user has not supplied any input yet.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.SizeColumnName">
            <summary>Gets or sets the header text displayed in the Size column of the files table.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.TableStyle">
            <summary>Gets the style settings for the table of files (in currently selected directory).</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.TreeRootGetter">
            <summary>
                Gets or Sets the method for getting the root tree objects that are displayed in the collapse-able tree in the
                <see cref="T:Terminal.Gui.FileDialog"/>.  Defaults to all accessible <see cref="M:System.Environment.GetLogicalDrives"/> and unique
                <see cref="T:System.Environment.SpecialFolder"/>.
            </summary>
            <remarks>Must be configured before showing the dialog.</remarks>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.TreeStyle">
            <summary>Gets the style settings for the collapse-able directory/places tree</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.TypeColumnName">
            <summary>Gets or sets the header text displayed in the Type column of the files table.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.UseColors">
            <summary>
                Gets or Sets a value indicating whether different colors should be used for different file types/directories.
                Defaults to false.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.UseUnicodeCharacters">
            <summary>Gets or sets whether to use advanced unicode characters which might not be installed on all users computers.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialogStyle.WrongFileTypeFeedback">
            <summary>
                Gets or sets error message when user attempts to select a file type that is not one of
                <see cref="P:Terminal.Gui.FileDialog.AllowedTypes"/>
            </summary>
        </member>
        <member name="T:Terminal.Gui.FilesSelectedEventArgs">
            <summary>Event args for the <see cref="E:Terminal.Gui.FileDialog.FilesSelected"/> event</summary>
        </member>
        <member name="M:Terminal.Gui.FilesSelectedEventArgs.#ctor(Terminal.Gui.FileDialog)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.FilesSelectedEventArgs"/></summary>
            <param name="dialog"></param>
        </member>
        <member name="P:Terminal.Gui.FilesSelectedEventArgs.Cancel">
            <summary>
                Set to true if you want to prevent the selection going ahead (this will leave the <see cref="T:Terminal.Gui.FileDialog"/>
                still showing).
            </summary>
        </member>
        <member name="P:Terminal.Gui.FilesSelectedEventArgs.Dialog">
            <summary>
                The dialog where the choice is being made.  Use <see cref="P:Terminal.Gui.FileDialog.Path"/> and/or
                <see cref="P:Terminal.Gui.FileDialog.MultiSelected"/> to evaluate the users choice.
            </summary>
        </member>
        <member name="T:Terminal.Gui.FileSystemInfoStats">
            <summary>
                Wrapper for <see cref="P:Terminal.Gui.FileSystemInfoStats.FileSystemInfo"/> that contains additional information (e.g. <see cref="P:Terminal.Gui.FileSystemInfoStats.IsParent"/>)
                and helper methods.
            </summary>
        </member>
        <member name="M:Terminal.Gui.FileSystemInfoStats.#ctor(System.IO.Abstractions.IFileSystemInfo,System.Globalization.CultureInfo)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.FileSystemInfoStats"/> class.</summary>
            <param name="fsi">The directory of path to wrap.</param>
            <param name="culture"></param>
        </member>
        <member name="P:Terminal.Gui.FileSystemInfoStats.FileSystemInfo">
            <summary>Gets the wrapped <see cref="P:Terminal.Gui.FileSystemInfoStats.FileSystemInfo"/> (directory or file).</summary>
        </member>
        <member name="P:Terminal.Gui.FileSystemInfoStats.IsParent">
            <summary>Gets or Sets a value indicating whether this instance represents the parent of the current state (i.e. "..").</summary>
        </member>
        <member name="T:Terminal.Gui.FileSystemTreeBuilder">
            <summary>TreeView builder for creating file system based trees.</summary>
        </member>
        <member name="M:Terminal.Gui.FileSystemTreeBuilder.#ctor">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.FileSystemTreeBuilder"/> class.</summary>
        </member>
        <member name="P:Terminal.Gui.FileSystemTreeBuilder.IncludeFiles">
            <summary>Gets or sets a flag indicating whether to show files as leaf elements in the tree. Defaults to true.</summary>
        </member>
        <member name="P:Terminal.Gui.FileSystemTreeBuilder.Sorter">
            <summary>Gets or sets the order of directory children.  Defaults to <see langword="this"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.FileSystemTreeBuilder.Compare(System.IO.Abstractions.IFileSystemInfo,System.IO.Abstractions.IFileSystemInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.FileSystemTreeBuilder.SupportsCanExpand">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FileSystemTreeBuilder.CanExpand(System.IO.Abstractions.IFileSystemInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FileSystemTreeBuilder.GetChildren(System.IO.Abstractions.IFileSystemInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.IFileOperations">
            <summary>
                Interface for defining how to handle file/directory deletion, rename and newing attempts in
                <see cref="T:Terminal.Gui.FileDialog"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.IFileOperations.Delete(System.Collections.Generic.IEnumerable{System.IO.Abstractions.IFileSystemInfo})">
            <summary>Specifies how to handle file/directory deletion attempts in <see cref="T:Terminal.Gui.FileDialog"/>.</summary>
            <param name="toDelete"></param>
            <returns><see langword="true"/> if operation was completed or <see langword="false"/> if cancelled</returns>
            <remarks>
                Ensure you use a try/catch block with appropriate error handling (e.g. showing a <see cref="T:Terminal.Gui.MessageBox"/>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.IFileOperations.New(System.IO.Abstractions.IFileSystem,System.IO.Abstractions.IDirectoryInfo)">
            <summary>Specifies how to handle 'new directory' operation in <see cref="T:Terminal.Gui.FileDialog"/>.</summary>
            <param name="fileSystem"></param>
            <param name="inDirectory">The parent directory in which the new directory should be created</param>
            <returns>The newly created directory or null if cancelled.</returns>
            <remarks>
                Ensure you use a try/catch block with appropriate error handling (e.g. showing a <see cref="T:Terminal.Gui.MessageBox"/>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.IFileOperations.Rename(System.IO.Abstractions.IFileSystem,System.IO.Abstractions.IFileSystemInfo)">
            <summary>Specifies how to handle file/directory rename attempts in <see cref="T:Terminal.Gui.FileDialog"/>.</summary>
            <param name="fileSystem"></param>
            <param name="toRename"></param>
            <returns>The new name for the file or null if cancelled</returns>
            <remarks>
                Ensure you use a try/catch block with appropriate error handling (e.g. showing a <see cref="T:Terminal.Gui.MessageBox"/>
            </remarks>
        </member>
        <member name="T:Terminal.Gui.ISearchMatcher">
            <summary>Defines whether a given file/directory matches a set of search terms.</summary>
        </member>
        <member name="M:Terminal.Gui.ISearchMatcher.Initialize(System.String)">
            <summary>Called once for each new search. Defines the string the user has provided as search terms.</summary>
        </member>
        <member name="M:Terminal.Gui.ISearchMatcher.IsMatch(System.IO.Abstractions.IFileSystemInfo)">
            <summary>Return true if <paramref name="f"/> is a match to the last provided search terms</summary>
        </member>
        <member name="T:Terminal.Gui.Command">
            <summary>Actions which can be performed by the application or bound to keys in a <see cref="T:Terminal.Gui.View"/> control.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.HotKey">
            <summary>Invoked when the HotKey for the View has been pressed.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Accept">
            <summary>Accepts the current state (e.g. list selection, button press, toggle, etc).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Select">
            <summary>Selects an item (e.g. a list item or menu item) without necessarily accepting it.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineDown">
            <summary>Moves down one item (cell, line, etc...).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineDownExtend">
            <summary>Extends the selection down one (cell, line, etc...).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineDownToLastBranch">
            <summary>Moves down to the last child node of the branch that holds the current selection.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.ScrollDown">
            <summary>Scrolls down one (cell, line, etc...) (without changing the selection).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineUp">
            <summary>Moves up one (cell, line, etc...).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineUpExtend">
            <summary>Extends the selection up one item (cell, line, etc...).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineUpToFirstBranch">
            <summary>Moves up to the first child node of the branch that holds the current selection.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.ScrollUp">
            <summary>Scrolls up one item (cell, line, etc...) (without changing the selection).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Left">
            <summary>
                Moves the selection left one by the minimum increment supported by the <see cref="T:Terminal.Gui.View"/> e.g. single
                character, cell, item etc.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ScrollLeft">
            <summary>Scrolls one item (cell, character, etc...) to the left</summary>
        </member>
        <member name="F:Terminal.Gui.Command.LeftExtend">
            <summary>
                Extends the selection left one by the minimum increment supported by the view e.g. single character, cell,
                item etc.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Right">
            <summary>
                Moves the selection right one by the minimum increment supported by the view e.g. single character, cell, item
                etc.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ScrollRight">
            <summary>Scrolls one item (cell, character, etc...) to the right.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.RightExtend">
            <summary>
                Extends the selection right one by the minimum increment supported by the view e.g. single character, cell,
                item etc.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.WordLeft">
            <summary>Moves the caret to the start of the previous word.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.WordLeftExtend">
            <summary>Extends the selection to the start of the previous word.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.WordRight">
            <summary>Moves the caret to the start of the next word.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.WordRightExtend">
            <summary>Extends the selection to the start of the next word.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.CutToEndLine">
            <summary>Cuts to the clipboard the characters from the current position to the end of the line.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.CutToStartLine">
            <summary>Cuts to the clipboard the characters from the current position to the start of the line.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.KillWordForwards">
            <summary>Deletes the characters forwards.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.KillWordBackwards">
            <summary>Deletes the characters backwards.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.ToggleOverwrite">
            <summary>
                Toggles overwrite mode such that newly typed text overwrites the text that is already there (typically
                associated with the Insert key).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.EnableOverwrite">
            <summary>
                Enables overwrite mode such that newly typed text overwrites the text that is already there (typically
                associated with the Insert key).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.DisableOverwrite">
            <summary>Disables overwrite mode (<see cref="F:Terminal.Gui.Command.EnableOverwrite"/>)</summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageDown">
            <summary>Move one page down.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageDownExtend">
            <summary>Move one page page extending the selection to cover revealed objects/characters.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageUp">
            <summary>Move one page up.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageUpExtend">
            <summary>Move one page up extending the selection to cover revealed objects/characters.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.TopHome">
            <summary>Moves to the top/home.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.TopHomeExtend">
            <summary>Extends the selection to the top/home.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.BottomEnd">
            <summary>Moves to the bottom/end.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.BottomEndExtend">
            <summary>Extends the selection to the bottom/end.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.OpenSelectedItem">
            <summary>Open the selected item.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.ToggleExpandCollapse">
            <summary>Toggles the Expanded or collapsed state of a a list or item (with subitems).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Expand">
            <summary>Expands a list or item (with subitems).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.ExpandAll">
            <summary>Recursively Expands all child items and their child items (if any).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Collapse">
            <summary>Collapses a list or item (with subitems).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.CollapseAll">
            <summary>Recursively collapses a list items of their children (if any).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Cancel">
            <summary>Cancels an action or any temporary states on the control e.g. expanding a combo list.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.UnixEmulation">
            <summary>Unix emulation.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.DeleteCharRight">
            <summary>Deletes the character on the right.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.DeleteCharLeft">
            <summary>Deletes the character on the left.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.SelectAll">
            <summary>Selects all objects.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.DeleteAll">
            <summary>Deletes all objects.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.StartOfLine">
            <summary>Moves the cursor to the start of line.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.StartOfLineExtend">
            <summary>Extends the selection to the start of line.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.EndOfLine">
            <summary>Moves the cursor to the end of line.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.EndOfLineExtend">
            <summary>Extends the selection to the end of line.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.StartOfPage">
            <summary>Moves the cursor to the top of page.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.EndOfPage">
            <summary>Moves the cursor to the bottom of page.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageLeft">
            <summary>Moves to the left page.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageRight">
            <summary>Moves to the right page.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.LeftHome">
            <summary>Moves to the left begin.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.LeftHomeExtend">
            <summary>Extends the selection to the left begin.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.RightEnd">
            <summary>Moves to the right end.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.RightEndExtend">
            <summary>Extends the selection to the right end.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Undo">
            <summary>Undo changes.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Redo">
            <summary>Redo changes.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Copy">
            <summary>Copies the current selection.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Cut">
            <summary>Cuts the current selection.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Paste">
            <summary>Pastes the current selection.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.QuitToplevel">
            <summary>Quit a <see cref="T:Terminal.Gui.Toplevel"/>.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Suspend">
            <summary>Suspend a application (Only implemented in <see cref="T:Terminal.Gui.CursesDriver"/>).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.NextView">
            <summary>Moves focus to the next view.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.PreviousView">
            <summary>Moves focuss to the previous view.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.NextViewOrTop">
            <summary>Moves focus to the next view or Toplevel (case of Overlapped).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.PreviousViewOrTop">
            <summary>Moves focus to the next previous or Toplevel (case of Overlapped).</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Refresh">
            <summary>Refresh.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.ToggleExtend">
            <summary>Toggles the selection.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.NewLine">
            <summary>Inserts a new item.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Tab">
            <summary>Tabs to the next item.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.BackTab">
            <summary>Tabs back to the previous item.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.Save">
            <summary>Saves the current document.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.SaveAs">
            <summary>Saves the current document with a new name.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.New">
            <summary>Creates a new document.</summary>
        </member>
        <member name="F:Terminal.Gui.Command.ShowContextMenu">
            <summary>Shows context about the item (e.g. a context menu).</summary>
        </member>
        <member name="T:Terminal.Gui.GrabMouseEventArgs">
            <summary>Args <see cref="M:Terminal.Gui.Application.GrabMouse(Terminal.Gui.View)"/> related events.</summary>
        </member>
        <member name="M:Terminal.Gui.GrabMouseEventArgs.#ctor(Terminal.Gui.View)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.GrabMouseEventArgs"/> class.</summary>
            <param name="view">The view that the event is about.</param>
        </member>
        <member name="P:Terminal.Gui.GrabMouseEventArgs.Cancel">
            <summary>
                Flag that allows the cancellation of the event. If set to <see langword="true"/> in the event handler, the
                event will be canceled.
            </summary>
        </member>
        <member name="P:Terminal.Gui.GrabMouseEventArgs.View">
            <summary>Gets the view that grabbed the mouse.</summary>
        </member>
        <member name="T:Terminal.Gui.Key">
            <summary>
                Provides an abstraction for common keyboard operations and state. Used for processing keyboard input and
                raising keyboard events.
            </summary>
            <remarks>
                <para>
                    This class provides a high-level abstraction with helper methods and properties for common keyboard
                    operations. Use this class instead of the <see cref="T:Terminal.Gui.KeyCode"/> enumeration for keyboard input
                    whenever possible.
                </para>
                <para></para>
                <para>
                    The default value for <see cref="T:Terminal.Gui.Key"/> is <see cref="F:Terminal.Gui.KeyCode.Null"/> and can be tested using
                    <see cref="P:Terminal.Gui.Key.Empty"/>.
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Concept</term><description>Definition</description>
                        </listheader>
                        <item>
                            <term>Testing Shift State</term>
                            <description>
                                The <c>Is</c> properties (<see cref="P:Terminal.Gui.Key.IsShift"/>,<see cref="P:Terminal.Gui.Key.IsCtrl"/>, <see cref="P:Terminal.Gui.Key.IsAlt"/>)
                                test for shift state; whether the key press was modified by a shift key.
                            </description>
                        </item>
                        <item>
                            <term>Adding Shift State</term>
                            <description>
                                The <c>With</c> properties (<see cref="P:Terminal.Gui.Key.WithShift"/>,<see cref="P:Terminal.Gui.Key.WithCtrl"/>,
                                <see cref="P:Terminal.Gui.Key.WithAlt"/>) return a copy of the Key with the shift modifier applied. This is useful for
                                specifying a key that requires a shift modifier (e.g.
                                <c>var ControlAltDelete = new Key(Key.Delete).WithAlt.WithDel;</c>.
                            </description>
                        </item>
                        <item>
                            <term>Removing Shift State</term>
                            <description>
                                The <c>No</c> properties (<see cref="P:Terminal.Gui.Key.NoShift"/>,<see cref="P:Terminal.Gui.Key.NoCtrl"/>, <see cref="P:Terminal.Gui.Key.NoAlt"/>)
                                return a copy of the Key with the shift modifier removed. This is useful for specifying a key that
                                does not require a shift modifier (e.g. <c>var ControlDelete = ControlAltDelete.NoCtrl;</c>.
                            </description>
                        </item>
                        <item>
                            <term>Encoding of A..Z</term>
                            <description>
                                Lowercase alpha keys are encoded (in <see cref="P:Terminal.Gui.Key.KeyCode"/>) as values between 65 and
                                90 corresponding to the un-shifted A to Z keys on a keyboard. Properties are provided for these
                                (e.g. <see cref="P:Terminal.Gui.Key.A"/>, <see cref="P:Terminal.Gui.Key.B"/>, etc.). Even though the encoded values are the same
                                as the ASCII values for uppercase characters, these enum values represent *lowercase*, un-shifted
                                characters.
                            </description>
                        </item>
                        <item>
                            <term>Persistence as strings</term>
                            <description>
                                Keys are persisted as <c>"[Modifiers]+[Key]</c>. For example
                                <c>new Key(Key.Delete).WithAlt.WithDel</c> is persisted as <c>"Ctrl+Alt+Delete"</c>. See
                                <see cref="M:Terminal.Gui.Key.ToString"/> and <see cref="M:Terminal.Gui.Key.TryParse(System.String,Terminal.Gui.Key@)"/> for more
                                information.
                            </description>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Key.#ctor">
            <summary>Constructs a new <see cref="T:Terminal.Gui.Key"/></summary>
        </member>
        <member name="M:Terminal.Gui.Key.#ctor(Terminal.Gui.KeyCode)">
            <summary>Constructs a new <see cref="T:Terminal.Gui.Key"/> from the provided Key value</summary>
            <param name="k">The key</param>
        </member>
        <member name="M:Terminal.Gui.Key.#ctor(Terminal.Gui.Key)">
            <summary>
            Copy constructor.
            </summary>
            <param name="key">The Key to copy</param>
        </member>
        <member name="M:Terminal.Gui.Key.#ctor(System.Char)">
            <summary>Constructs a new <see cref="T:Terminal.Gui.Key"/> from a char.</summary>
            <remarks>
                <para>
                    The key codes for the A..Z keys are encoded as values between 65 and 90 (<see cref="F:Terminal.Gui.KeyCode.A"/> through
                    <see cref="F:Terminal.Gui.KeyCode.Z"/>). While these are the same as the ASCII values for uppercase characters, they represent
                    *keys*, not characters. Therefore, this constructor will store 'A'..'Z' as <see cref="F:Terminal.Gui.KeyCode.A"/>..
                    <see cref="F:Terminal.Gui.KeyCode.Z"/> with the <see cref="F:Terminal.Gui.KeyCode.ShiftMask"/> set and will store `a`..`z` as
                    <see cref="F:Terminal.Gui.KeyCode.A"/>..<see cref="F:Terminal.Gui.KeyCode.Z"/>.
                </para>
            </remarks>
            <param name="ch"></param>
        </member>
        <member name="M:Terminal.Gui.Key.#ctor(System.String)">
            <summary>
                Constructs a new Key from a string describing the key. See
                <see cref="M:Terminal.Gui.Key.TryParse(System.String,Terminal.Gui.Key@)"/> for information on the format of the string.
            </summary>
            <param name="str">The string describing the key.</param>
        </member>
        <member name="P:Terminal.Gui.Key.AsRune">
            <summary>
                The key value as a Rune. This is the actual value of the key pressed, and is independent of the modifiers.
                Useful for determining if a key represents is a printable character.
            </summary>
            <remarks>
                <para>Keys with Ctrl or Alt modifiers will return <see langword="default"/>.</para>
                <para>
                    If the key is a letter key (A-Z), the Rune will be the upper or lower case letter depending on whether
                    <see cref="F:Terminal.Gui.KeyCode.ShiftMask"/> is set.
                </para>
                <para>
                    If the key is outside of the <see cref="F:Terminal.Gui.KeyCode.CharMask"/> range, the returned Rune will be
                    <see langword="default"/>.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Key.Handled">
            <summary>
                Indicates if the current Key event has already been processed and the driver should stop notifying any other
                event subscriber. It's important to set this value to true specially when updating any View's layout from inside the
                subscriber method.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Key.IsAlt">
            <summary>Gets a value indicating whether the Alt key was pressed (real or synthesized)</summary>
            <value><see langword="true"/> if is alternate; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Terminal.Gui.Key.IsCtrl">
            <summary>Gets a value indicating whether the Ctrl key was pressed.</summary>
            <value><see langword="true"/> if is ctrl; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Terminal.Gui.Key.IsKeyCodeAtoZ">
            <summary>
                Gets a value indicating whether the key represents a key in the range of <see cref="F:Terminal.Gui.KeyCode.A"/> to
                <see cref="F:Terminal.Gui.KeyCode.Z"/>, regardless of the <see cref="F:Terminal.Gui.KeyCode.ShiftMask"/>. This is useful for testing if a key is
                based on these keys which are special cased.
            </summary>
            <remarks>
                IMPORTANT: Lowercase alpha keys are encoded in <see cref="P:Terminal.Gui.Key.KeyCode"/> as values between 65 and 90
                corresponding to the un-shifted A to Z keys on a keyboard. Helper properties are provided these (e.g.
                <see cref="P:Terminal.Gui.Key.A"/>, <see cref="P:Terminal.Gui.Key.B"/>, etc.). Even though the values are the same as the ASCII values for
                uppercase characters, these enum values represent *lowercase*, un-shifted characters.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Key.IsShift">
            <summary>Gets a value indicating whether the Shift key was pressed.</summary>
            <value><see langword="true"/> if is shift; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Terminal.Gui.Key.IsValid">
            <summary>
                Indicates whether the <see cref="T:Terminal.Gui.Key"/> is valid or not. Invalid keys are <see cref="P:Terminal.Gui.Key.Empty"/>, and keys
                with only shift modifiers.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Key.KeyCode">
            <summary>The encoded key value.</summary>
            <para>
                IMPORTANT: Lowercase alpha keys are encoded (in <see cref="T:Terminal.Gui.KeyCode"/>) as values between 65 and 90
                corresponding to the un-shifted A to Z keys on a keyboard. Enum values are provided for these (e.g.
                <see cref="F:Terminal.Gui.KeyCode.A"/>, <see cref="F:Terminal.Gui.KeyCode.B"/>, etc.). Even though the values are the same as the ASCII values
                for uppercase characters, these enum values represent *lowercase*, un-shifted characters.
            </para>
            <remarks>This property is the backing data for the <see cref="T:Terminal.Gui.Key"/>. It is a <see cref="P:Terminal.Gui.Key.KeyCode"/> enum value.</remarks>
        </member>
        <member name="P:Terminal.Gui.Key.NoAlt">
            <summary>
                Helper for removing a shift modifier from a <see cref="T:Terminal.Gui.Key"/>.
                <code>
            var ControlAltDelete = new Key(Key.Delete).WithAlt.WithDel;
            var AltDelete = ControlAltDelete.NoCtrl;
            </code>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Key.NoCtrl">
            <summary>
                Helper for removing a shift modifier from a <see cref="T:Terminal.Gui.Key"/>.
                <code>
            var ControlAltDelete = new Key(Key.Delete).WithAlt.WithDel;
            var AltDelete = ControlAltDelete.NoCtrl;
            </code>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Key.NoShift">
            <summary>
                Helper for removing a shift modifier from a <see cref="T:Terminal.Gui.Key"/>.
                <code>
            var ControlAltDelete = new Key(Key.Delete).WithAlt.WithDel;
            var AltDelete = ControlAltDelete.NoCtrl;
            </code>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Key.WithAlt">
            <summary>
                Helper for specifying a shifted <see cref="T:Terminal.Gui.Key"/>.
                <code>
            var ControlAltDelete = new Key(Key.Delete).WithAlt.WithDel;
            </code>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Key.WithCtrl">
            <summary>
                Helper for specifying a shifted <see cref="T:Terminal.Gui.Key"/>.
                <code>
            var ControlAltDelete = new Key(Key.Delete).WithAlt.WithDel;
            </code>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Key.WithShift">
            <summary>
                Helper for specifying a shifted <see cref="T:Terminal.Gui.Key"/>.
                <code>
            var ControlAltDelete = new Key(Key.Delete).WithAlt.WithDel;
            </code>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Key.GetIsKeyCodeAtoZ(Terminal.Gui.KeyCode)">
            <summary>
                Tests if a KeyCode represents a key in the range of <see cref="F:Terminal.Gui.KeyCode.A"/> to <see cref="F:Terminal.Gui.KeyCode.Z"/>,
                regardless of the <see cref="F:Terminal.Gui.KeyCode.ShiftMask"/>. This is useful for testing if a key is based on these keys which
                are special cased.
            </summary>
            <remarks>
                IMPORTANT: Lowercase alpha keys are encoded in <see cref="P:Terminal.Gui.Key.KeyCode"/> as values between 65 and 90
                corresponding to the un-shifted A to Z keys on a keyboard. Helper properties are provided these (e.g.
                <see cref="P:Terminal.Gui.Key.A"/>, <see cref="P:Terminal.Gui.Key.B"/>, etc.). Even though the values are the same as the ASCII values for
                uppercase characters, these enum values represent *lowercase*, un-shifted characters.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Key.ToRune(Terminal.Gui.KeyCode)">
            <summary>
                Converts a <see cref="P:Terminal.Gui.Key.KeyCode"/> to a <see cref="T:System.Text.Rune"/>. Useful for determining if a key represents is a
                printable character.
            </summary>
            <remarks>
                <para>Keys with Ctrl or Alt modifiers will return <see langword="default"/>.</para>
                <para>
                    If the key is a letter key (A-Z), the Rune will be the upper or lower case letter depending on whether
                    <see cref="F:Terminal.Gui.KeyCode.ShiftMask"/> is set.
                </para>
                <para>
                    If the key is outside of the <see cref="F:Terminal.Gui.KeyCode.CharMask"/> range, the returned Rune will be
                    <see langword="default"/>.
                </para>
            </remarks>
            <param name="key"></param>
            <returns>The key converted to a Rune. <see langword="default"/> if conversion is not possible.</returns>
        </member>
        <member name="M:Terminal.Gui.Key.op_Explicit(Terminal.Gui.Key)~System.Text.Rune">
            <summary>
                Explicitly cast a <see cref="T:Terminal.Gui.Key"/> to a <see cref="T:System.Text.Rune"/>. The conversion is lossy because properties such
                as <see cref="P:Terminal.Gui.Key.Handled"/> are not encoded in <see cref="P:Terminal.Gui.Key.KeyCode"/>.
            </summary>
            <remarks>Uses <see cref="P:Terminal.Gui.Key.AsRune"/>.</remarks>
            <param name="kea"></param>
        </member>
        <member name="M:Terminal.Gui.Key.op_Explicit(Terminal.Gui.Key)~System.UInt32">
            <summary>
                Explicitly cast <see cref="T:Terminal.Gui.Key"/> to a <see langword="uint"/>. The conversion is lossy because properties such
                as <see cref="P:Terminal.Gui.Key.Handled"/> are not encoded in <see cref="P:Terminal.Gui.Key.KeyCode"/>.
            </summary>
            <param name="kea"></param>
        </member>
        <member name="M:Terminal.Gui.Key.op_Explicit(Terminal.Gui.Key)~Terminal.Gui.KeyCode">
            <summary>
                Explicitly cast <see cref="T:Terminal.Gui.Key"/> to a <see cref="P:Terminal.Gui.Key.KeyCode"/>. The conversion is lossy because properties such
                as <see cref="P:Terminal.Gui.Key.Handled"/> are not encoded in <see cref="P:Terminal.Gui.Key.KeyCode"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Terminal.Gui.Key.op_Implicit(Terminal.Gui.KeyCode)~Terminal.Gui.Key">
            <summary>Cast <see cref="P:Terminal.Gui.Key.KeyCode"/> to a <see cref="T:Terminal.Gui.Key"/>.</summary>
            <param name="keyCode"></param>
        </member>
        <member name="M:Terminal.Gui.Key.op_Implicit(System.Char)~Terminal.Gui.Key">
            <summary>Cast <see langword="char"/> to a <see cref="T:Terminal.Gui.Key"/>.</summary>
            <remarks>See <see cref="M:Terminal.Gui.Key.#ctor(System.Char)"/> for more information.</remarks>
            <param name="ch"></param>
        </member>
        <member name="M:Terminal.Gui.Key.op_Implicit(System.String)~Terminal.Gui.Key">
            <summary>Cast <see langword="string"/> to a <see cref="T:Terminal.Gui.Key"/>.</summary>
            <remarks>See <see cref="M:Terminal.Gui.Key.#ctor(System.String)"/> for more information.</remarks>
            <param name="str"></param>
        </member>
        <member name="M:Terminal.Gui.Key.op_Implicit(Terminal.Gui.Key)~System.String">
            <summary>Cast a <see cref="T:Terminal.Gui.Key"/> to a <see langword="string"/>.</summary>
            <remarks>See <see cref="M:Terminal.Gui.Key.#ctor(System.String)"/> for more information.</remarks>
            <param name="key"></param>
        </member>
        <member name="M:Terminal.Gui.Key.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Key.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Key.op_Equality(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>Compares two <see cref="T:Terminal.Gui.Key"/>s for equality.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Key.op_Inequality(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>Compares two <see cref="T:Terminal.Gui.Key"/>s for not equality.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Key.op_LessThan(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>Compares two <see cref="T:Terminal.Gui.Key"/>s for less-than.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Key.op_GreaterThan(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>Compares two <see cref="T:Terminal.Gui.Key"/>s for greater-than.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Key.op_LessThanOrEqual(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>Compares two <see cref="T:Terminal.Gui.Key"/>s for greater-than-or-equal-to.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Key.op_GreaterThanOrEqual(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>Compares two <see cref="T:Terminal.Gui.Key"/>s for greater-than-or-equal-to.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Key.ToString">
            <summary>Pretty prints the KeyEvent</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Key.ToString(Terminal.Gui.KeyCode)">
            <summary>Formats a <see cref="P:Terminal.Gui.Key.KeyCode"/> as a string using the default separator of '+'</summary>
            <param name="key">The key to format.</param>
            <returns>
                The formatted string. If the key is a printable character, it will be returned as a string. Otherwise, the key
                name will be returned.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Key.ToString(Terminal.Gui.KeyCode,System.Text.Rune)">
            <summary>Formats a <see cref="P:Terminal.Gui.Key.KeyCode"/> as a string.</summary>
            <param name="key">The key to format.</param>
            <param name="separator">The character to use as a separator between modifier keys and and the key itself.</param>
            <returns>
                The formatted string. If the key is a printable character, it will be returned as a string. Otherwise, the key
                name will be returned.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Key.TryParse(System.String,Terminal.Gui.Key@)">
            <summary>Converts the provided string to a new <see cref="T:Terminal.Gui.Key"/> instance.</summary>
            <param name="text">
                The text to analyze. Formats supported are "Ctrl+X", "Alt+X", "Shift+X", "Ctrl+Alt+X",
                "Ctrl+Shift+X", "Alt+Shift+X", "Ctrl+Alt+Shift+X", and "X".
            </param>
            <param name="key">The parsed value.</param>
            <returns>A boolean value indicating whether parsing was successful.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Terminal.Gui.Key.Empty">
            <summary>An uninitialized The <see cref="T:Terminal.Gui.Key"/> object.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Backspace">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the Backspace key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Tab">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the tab key (forwards tab key).</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Enter">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the return key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Clear">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the clear key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Esc">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the Escape key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Space">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the Space bar key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D0">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 0 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D1">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 1 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D2">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 2 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D3">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 3 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D4">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 4 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D5">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 5 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D6">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 6 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D7">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 7 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D8">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 8 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D9">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for 9 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.A">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the A key (un-shifted). Use <c>Key.A.WithShift</c> for uppercase 'A'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.B">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the B key (un-shifted). Use <c>Key.B.WithShift</c> for uppercase 'B'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.C">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the C key (un-shifted). Use <c>Key.C.WithShift</c> for uppercase 'C'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.D">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the D key (un-shifted). Use <c>Key.D.WithShift</c> for uppercase 'D'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.E">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the E key (un-shifted). Use <c>Key.E.WithShift</c> for uppercase 'E'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the F key (un-shifted). Use <c>Key.F.WithShift</c> for uppercase 'F'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.G">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the G key (un-shifted). Use <c>Key.G.WithShift</c> for uppercase 'G'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.H">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the H key (un-shifted). Use <c>Key.H.WithShift</c> for uppercase 'H'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.I">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the I key (un-shifted). Use <c>Key.I.WithShift</c> for uppercase 'I'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.J">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the J key (un-shifted). Use <c>Key.J.WithShift</c> for uppercase 'J'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.K">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the K key (un-shifted). Use <c>Key.K.WithShift</c> for uppercase 'K'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.L">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the L key (un-shifted). Use <c>Key.L.WithShift</c> for uppercase 'L'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.M">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the M key (un-shifted). Use <c>Key.M.WithShift</c> for uppercase 'M'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.N">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the N key (un-shifted). Use <c>Key.N.WithShift</c> for uppercase 'N'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.O">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the O key (un-shifted). Use <c>Key.O.WithShift</c> for uppercase 'O'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.P">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the P key (un-shifted). Use <c>Key.P.WithShift</c> for uppercase 'P'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Q">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the Q key (un-shifted). Use <c>Key.Q.WithShift</c> for uppercase 'Q'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.R">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the R key (un-shifted). Use <c>Key.R.WithShift</c> for uppercase 'R'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.S">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the S key (un-shifted). Use <c>Key.S.WithShift</c> for uppercase 'S'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.T">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the T key (un-shifted). Use <c>Key.T.WithShift</c> for uppercase 'T'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.U">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the U key (un-shifted). Use <c>Key.U.WithShift</c> for uppercase 'U'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.V">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the V key (un-shifted). Use <c>Key.V.WithShift</c> for uppercase 'V'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.W">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the W key (un-shifted). Use <c>Key.W.WithShift</c> for uppercase 'W'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.X">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the X key (un-shifted). Use <c>Key.X.WithShift</c> for uppercase 'X'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Y">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the Y key (un-shifted). Use <c>Key.Y.WithShift</c> for uppercase 'Y'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Z">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the Z key (un-shifted). Use <c>Key.Z.WithShift</c> for uppercase 'Z'.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Delete">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the Delete key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.CursorUp">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for the Cursor up key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.CursorDown">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for Cursor down key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.CursorLeft">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for Cursor left key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.CursorRight">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for Cursor right key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.PageUp">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for Page Up key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.PageDown">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for Page Down key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.Home">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for Home key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.End">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for End key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.InsertChar">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for Insert Character key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.DeleteChar">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for Delete Character key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.PrintScreen">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for Print Screen key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F1">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F1 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F2">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F2 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F3">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F3 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F4">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F4 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F5">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F5 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F6">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F6 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F7">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F7 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F8">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F8 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F9">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F9 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F10">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F10 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F11">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F11 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F12">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F12 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F13">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F13 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F14">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F14 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F15">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F15 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F16">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F16 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F17">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F17 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F18">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F18 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F19">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F19 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F20">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F20 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F21">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F21 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F22">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F22 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F23">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F23 key.</summary>
        </member>
        <member name="P:Terminal.Gui.Key.F24">
            <summary>The <see cref="T:Terminal.Gui.Key"/> object for F24 key.</summary>
        </member>
        <member name="T:Terminal.Gui.KeyBindingScope">
            <summary>
                Defines the scope of a <see cref="T:Terminal.Gui.Command"/> that has been bound to a key with
                <see cref="M:Terminal.Gui.KeyBindings.Add(Terminal.Gui.Key,Terminal.Gui.Command[])"/>.
            </summary>
            <remarks>
                <para>Key bindings are scoped to the most-focused view (<see cref="F:Terminal.Gui.KeyBindingScope.Focused"/>) by default.</para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.KeyBindingScope.Focused">
            <summary>The key binding is scoped to just the view that has focus.</summary>
        </member>
        <member name="F:Terminal.Gui.KeyBindingScope.HotKey">
            <summary>
                The key binding is scoped to the View's SuperView and will be triggered even when the View does not have focus, as
                long as the SuperView does have focus. This is typically used for <see cref="P:Terminal.Gui.View.HotKey"/>s.
                <remarks>
                    <para>
                        Use for Views such as MenuBar and StatusBar which provide commands (shortcuts etc...) that trigger even
                        when not focused.
                    </para>
                    <para>
                        HotKey-scoped key bindings are only invoked if the key down event was not handled by the focused view or
                        any of its subviews.
                    </para>
                </remarks>
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyBindingScope.Application">
            <summary>
                The key binding will be triggered regardless of which view has focus. This is typically used for global
                commands.
            </summary>
            <remarks>
                Application-scoped key bindings are only invoked if the key down event was not handled by the focused view or
                any of its subviews, and if the key down event was not bound to a <see cref="P:Terminal.Gui.View.HotKey"/>.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.KeyBinding">
            <summary>Provides a collection of <see cref="T:Terminal.Gui.Command"/> objects that are scoped to <see cref="T:Terminal.Gui.KeyBindingScope"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.KeyBinding.#ctor(Terminal.Gui.Command[],Terminal.Gui.KeyBindingScope)">
            <summary>Initializes a new instance.</summary>
            <param name="commands"></param>
            <param name="scope"></param>
        </member>
        <member name="P:Terminal.Gui.KeyBinding.Commands">
            <summary>The actions which can be performed by the application or bound to keys in a <see cref="T:Terminal.Gui.View"/> control.</summary>
        </member>
        <member name="P:Terminal.Gui.KeyBinding.Scope">
            <summary>The scope of the <see cref="P:Terminal.Gui.KeyBinding.Commands"/> bound to a key.</summary>
        </member>
        <member name="T:Terminal.Gui.KeyBindings">
            <summary>A class that provides a collection of <see cref="T:Terminal.Gui.KeyBinding"/> objects bound to a <see cref="T:Terminal.Gui.Key"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.KeyBindings.Bindings">
            <summary>The collection of <see cref="T:Terminal.Gui.KeyBinding"/> objects.</summary>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.Add(Terminal.Gui.Key,Terminal.Gui.KeyBinding)">
            <summary>Adds a <see cref="T:Terminal.Gui.KeyBinding"/> to the collection.</summary>
            <param name="key"></param>
            <param name="binding"></param>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.Add(Terminal.Gui.Key,Terminal.Gui.KeyBindingScope,Terminal.Gui.Command[])">
            <summary>
                <para>Adds a new key combination that will trigger the commands in <paramref name="commands"/>.</para>
                <para>
                    If the key is already bound to a different array of <see cref="T:Terminal.Gui.Command"/>s it will be rebound
                    <paramref name="commands"/>.
                </para>
            </summary>
            <remarks>
                Commands are only ever applied to the current <see cref="T:Terminal.Gui.View"/> (i.e. this feature cannot be used to switch
                focus to another view and perform multiple commands there).
            </remarks>
            <param name="key">The key to check.</param>
            <param name="scope">The scope for the command.</param>
            <param name="commands">
                The command to invoked on the <see cref="T:Terminal.Gui.View"/> when <paramref name="key"/> is pressed. When
                multiple commands are provided,they will be applied in sequence. The bound <paramref name="key"/> strike will be
                consumed if any took effect.
            </param>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.Add(Terminal.Gui.Key,Terminal.Gui.Command[])">
            <summary>
                <para>
                    Adds a new key combination that will trigger the commands in <paramref name="commands"/> (if supported by the
                    View - see <see cref="M:Terminal.Gui.View.GetSupportedCommands"/>).
                </para>
                <para>
                    This is a helper function for <see cref="M:Terminal.Gui.KeyBindings.Add(Terminal.Gui.Key,Terminal.Gui.KeyBindingScope,Terminal.Gui.Command[])"/> for
                    <see cref="F:Terminal.Gui.KeyBindingScope.Focused"/> scoped commands.
                </para>
                <para>
                    If the key is already bound to a different array of <see cref="T:Terminal.Gui.Command"/>s it will be rebound
                    <paramref name="commands"/>.
                </para>
            </summary>
            <remarks>
                Commands are only ever applied to the current <see cref="T:Terminal.Gui.View"/> (i.e. this feature cannot be used to switch
                focus to another view and perform multiple commands there).
            </remarks>
            <param name="key">The key to check.</param>
            <param name="commands">
                The command to invoked on the <see cref="T:Terminal.Gui.View"/> when <paramref name="key"/> is pressed. When
                multiple commands are provided,they will be applied in sequence. The bound <paramref name="key"/> strike will be
                consumed if any took effect.
            </param>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.Clear">
            <summary>Removes all <see cref="T:Terminal.Gui.KeyBinding"/> objects from the collection.</summary>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.Clear(Terminal.Gui.Command[])">
            <summary>
                Removes all key bindings that trigger the given command set. Views can have multiple different keys bound to
                the same command sets and this method will clear all of them.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.Get(Terminal.Gui.Key)">
            <summary>Gets the <see cref="T:Terminal.Gui.KeyBinding"/> for the specified <see cref="T:Terminal.Gui.Key"/>.</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.Get(Terminal.Gui.Key,Terminal.Gui.KeyBindingScope)">
            <summary>Gets the <see cref="T:Terminal.Gui.KeyBinding"/> for the specified <see cref="T:Terminal.Gui.Key"/>.</summary>
            <param name="key"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.GetCommands(Terminal.Gui.Key)">
            <summary>Gets the array of <see cref="T:Terminal.Gui.Command"/>s bound to <paramref name="key"/> if it exists.</summary>
            <param name="key">The key to check.</param>
            <returns>
                The array of <see cref="T:Terminal.Gui.Command"/>s if <paramref name="key"/> is bound. An empty <see cref="T:Terminal.Gui.Command"/> array
                if not.
            </returns>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.GetKeyFromCommands(Terminal.Gui.Command[])">
            <summary>Gets the Key used by a set of commands.</summary>
            <remarks></remarks>
            <param name="commands">The set of commands to search.</param>
            <returns>The <see cref="T:Terminal.Gui.Key"/> used by a <see cref="T:Terminal.Gui.Command"/></returns>
            <exception cref="T:System.InvalidOperationException">If no matching set of commands was found.</exception>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.Remove(Terminal.Gui.Key)">
            <summary>Removes a <see cref="T:Terminal.Gui.KeyBinding"/> from the collection.</summary>
            <param name="key"></param>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.Replace(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>Replaces a key combination already bound to a set of <see cref="T:Terminal.Gui.Command"/>s.</summary>
            <remarks></remarks>
            <param name="fromKey">The key to be replaced.</param>
            <param name="toKey">The new key to be used.</param>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.TryGet(Terminal.Gui.Key,Terminal.Gui.KeyBinding@)">
            <summary>Gets the commands bound with the specified Key.</summary>
            <remarks></remarks>
            <param name="key">The key to check.</param>
            <param name="binding">
                When this method returns, contains the commands bound with the specified Key, if the Key is
                found; otherwise, null. This parameter is passed uninitialized.
            </param>
            <returns><see langword="true"/> if the Key is bound; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.KeyBindings.TryGet(Terminal.Gui.Key,Terminal.Gui.KeyBindingScope,Terminal.Gui.KeyBinding@)">
            <summary>Gets the commands bound with the specified Key that are scoped to a particular scope.</summary>
            <remarks></remarks>
            <param name="key">The key to check.</param>
            <param name="scope">the scope to filter on</param>
            <param name="binding">
                When this method returns, contains the commands bound with the specified Key, if the Key is
                found; otherwise, null. This parameter is passed uninitialized.
            </param>
            <returns><see langword="true"/> if the Key is bound; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Terminal.Gui.KeyChangedEventArgs">
            <summary>
                Event args for when a <see cref="T:Terminal.Gui.Key"/> is changed from one value to a new value (e.g. in
                <see cref="E:Terminal.Gui.View.HotKeyChanged"/>)
            </summary>
        </member>
        <member name="M:Terminal.Gui.KeyChangedEventArgs.#ctor(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.KeyChangedEventArgs"/> class</summary>
            <param name="oldKey"></param>
            <param name="newKey"></param>
        </member>
        <member name="P:Terminal.Gui.KeyChangedEventArgs.NewKey">
            <summary>Gets the new <see cref="T:Terminal.Gui.Key"/> that is being used. Use <see cref="P:Terminal.Gui.Key.Empty"/> to check for empty.</summary>
        </member>
        <member name="P:Terminal.Gui.KeyChangedEventArgs.OldKey">
            <summary>Gets the old <see cref="T:Terminal.Gui.Key"/> that was set before the event. Use <see cref="P:Terminal.Gui.Key.Empty"/> to check for empty.</summary>
        </member>
        <member name="T:Terminal.Gui.KeystrokeNavigatorEventArgs">
            <summary>Event arguments for the <see cref="E:Terminal.Gui.CollectionNavigatorBase.SearchStringChanged"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.KeystrokeNavigatorEventArgs.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.KeystrokeNavigatorEventArgs"/></summary>
            <param name="searchString">The current <see cref="P:Terminal.Gui.KeystrokeNavigatorEventArgs.SearchString"/>.</param>
        </member>
        <member name="P:Terminal.Gui.KeystrokeNavigatorEventArgs.SearchString">
            <summary>he current <see cref="P:Terminal.Gui.KeystrokeNavigatorEventArgs.SearchString"/>.</summary>
        </member>
        <member name="T:Terminal.Gui.MouseFlags">
            <summary>Mouse flags reported in <see cref="T:Terminal.Gui.MouseEvent"/>.</summary>
            <remarks>They just happen to map to the ncurses ones.</remarks>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.None">
            <summary>
               No mouse event. This is the default value for <see cref="P:Terminal.Gui.MouseEvent.Flags"/> when no mouse event is being reported.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1Pressed">
            <summary>The first mouse button was pressed.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1Released">
            <summary>The first mouse button was released.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1Clicked">
            <summary>The first mouse button was clicked (press+release).</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1DoubleClicked">
            <summary>The first mouse button was double-clicked.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1TripleClicked">
            <summary>The first mouse button was triple-clicked.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2Pressed">
            <summary>The second mouse button was pressed.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2Released">
            <summary>The second mouse button was released.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2Clicked">
            <summary>The second mouse button was clicked (press+release).</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2DoubleClicked">
            <summary>The second mouse button was double-clicked.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2TripleClicked">
            <summary>The second mouse button was triple-clicked.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3Pressed">
            <summary>The third mouse button was pressed.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3Released">
            <summary>The third mouse button was released.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3Clicked">
            <summary>The third mouse button was clicked (press+release).</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3DoubleClicked">
            <summary>The third mouse button was double-clicked.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3TripleClicked">
            <summary>The third mouse button was triple-clicked.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4Pressed">
            <summary>The fourth mouse button was pressed.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4Released">
            <summary>The fourth mouse button was released.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4Clicked">
            <summary>The fourth button was clicked (press+release).</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4DoubleClicked">
            <summary>The fourth button was double-clicked.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4TripleClicked">
            <summary>The fourth button was triple-clicked.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ButtonShift">
            <summary>Flag: the shift key was pressed when the mouse button took place.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ButtonCtrl">
            <summary>Flag: the ctrl key was pressed when the mouse button took place.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ButtonAlt">
            <summary>Flag: the alt key was pressed when the mouse button took place.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ReportMousePosition">
            <summary>The mouse position is being reported in this event.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledUp">
            <summary>Vertical button wheeled up.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledDown">
            <summary>Vertical button wheeled down.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledLeft">
            <summary>Vertical button wheeled up while pressing ButtonCtrl.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledRight">
            <summary>Vertical button wheeled down while pressing ButtonCtrl.</summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.AllEvents">
            <summary>Mask that captures all the events.</summary>
        </member>
        <member name="T:Terminal.Gui.MouseEvent">
            <summary>
                Conveys the details of mouse events, such as coordinates and button state, from
                ConsoleDrivers up to <see cref="T:Terminal.Gui.Application"/> and Views.
            </summary>
            <remarks>
                The <see cref="T:Terminal.Gui.Application"/> class includes the <see cref="E:Terminal.Gui.Application.MouseEvent"/> event which takes a
                MouseEvent argument.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.Flags">
            <summary>Flags indicating the kind of mouse event that is being posted.</summary>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.View">
            <summary>The View at the location for the mouse event.</summary>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.Position">
            <summary>The position of the mouse in <see cref="P:Terminal.Gui.View.Viewport"/>-relative coordinates.</summary>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.ScreenPosition">
            <summary>
                The screen-relative mouse position.
            </summary>
            <remarks>
                <para>
                    <see cref="P:Terminal.Gui.MouseEvent.Position"/> is <see cref="P:Terminal.Gui.View.Viewport"/>-relative. When the mouse is grabbed by a view,
                    <see cref="P:Terminal.Gui.MouseEvent.ScreenPosition"/> provides the mouse position screen-relative coordinates, enabling the grabbed view to know how much the
                    mouse has moved.
                </para>
                <para>
                    Calculated and processed in <see cref="M:Terminal.Gui.Application.OnMouseEvent(Terminal.Gui.MouseEvent)"/>.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.Handled">
            <summary>
                Indicates if the current mouse event has been processed. Set this value to <see langword="true"/> to indicate the mouse
                event was handled.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MouseEvent.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Terminal.Gui.MouseEvent"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Terminal.Gui.MouseEvent"/>.</returns>
        </member>
        <member name="T:Terminal.Gui.MouseEventEventArgs">
            <summary>
                Specifies the event arguments for <see cref="T:Terminal.Gui.MouseEvent"/>. This is a higher-level construct than
                the wrapped <see cref="P:Terminal.Gui.MouseEventEventArgs.MouseEvent"/> class and is used for the events defined on <see cref="T:Terminal.Gui.View"/> and subclasses
                of View (e.g. <see cref="E:Terminal.Gui.View.MouseEnter"/> and <see cref="E:Terminal.Gui.View.MouseClick"/>).
            </summary>
        </member>
        <member name="M:Terminal.Gui.MouseEventEventArgs.#ctor(Terminal.Gui.MouseEvent)">
            <summary>Constructs.</summary>
            <param name="me">The mouse event.</param>
        </member>
        <member name="P:Terminal.Gui.MouseEventEventArgs.Handled">
            <summary>
                Indicates if the current mouse event has already been processed and the driver should stop notifying any other
                event subscriber. Its important to set this value to true specially when updating any View's layout from inside the
                subscriber method.
            </summary>
            <remarks>
                This property forwards to the <see cref="P:Terminal.Gui.MouseEvent.Handled"/> property and is provided as a convenience and
                for backwards compatibility
            </remarks>
        </member>
        <member name="P:Terminal.Gui.MouseEventEventArgs.MouseEvent">
            <summary>The <see cref="T:Terminal.Gui.MouseEvent"/> for the event.</summary>
        </member>
        <member name="T:Terminal.Gui.MouseFlagsChangedEventArgs">
            <summary>Args for events that describe a change in <see cref="T:Terminal.Gui.MouseFlags"/></summary>
        </member>
        <member name="M:Terminal.Gui.MouseFlagsChangedEventArgs.#ctor(Terminal.Gui.MouseFlags,Terminal.Gui.MouseFlags)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.MouseFlagsChangedEventArgs"/> class.</summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Terminal.Gui.MouseFlagsChangedEventArgs.NewValue">
            <summary>The new value</summary>
        </member>
        <member name="P:Terminal.Gui.MouseFlagsChangedEventArgs.OldValue">
            <summary>The old value before event</summary>
        </member>
        <member name="T:Terminal.Gui.PointEventArgs">
            <summary>Event args for events which relate to a single <see cref="P:Terminal.Gui.PointEventArgs.Point"/></summary>
        </member>
        <member name="M:Terminal.Gui.PointEventArgs.#ctor(System.Drawing.Point)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.PointEventArgs"/> class</summary>
            <param name="p"></param>
        </member>
        <member name="P:Terminal.Gui.PointEventArgs.Point">
            <summary>The point the event happened at</summary>
        </member>
        <member name="T:Terminal.Gui.Responder">
            <summary>Responder base class implemented by objects that want to participate on keyboard and mouse input.</summary>
        </member>
        <member name="M:Terminal.Gui.Responder.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resource.</summary>
        </member>
        <member name="E:Terminal.Gui.Responder.Disposing">
            <summary>Event raised when <see cref="M:Terminal.Gui.Responder.Dispose"/> has been called to signal that this object is being disposed.</summary>
        </member>
        <member name="M:Terminal.Gui.Responder.Dispose(System.Boolean)">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <remarks>
                If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and
                unmanaged resources can be disposed. If disposing equals false, the method has been called by the runtime from
                inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </remarks>
            <param name="disposing"></param>
        </member>
        <member name="M:Terminal.Gui.Responder.IsOverridden(Terminal.Gui.Responder,System.String)">
            <summary>Utilty function to determine <paramref name="method"/> is overridden in the <paramref name="subclass"/>.</summary>
            <param name="subclass">The view.</param>
            <param name="method">The method name.</param>
            <returns><see langword="true"/> if it's overridden, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.ShortcutHelper">
            <summary>Represents a helper to manipulate shortcut keys used on views.</summary>
        </member>
        <member name="P:Terminal.Gui.ShortcutHelper.Shortcut">
            <summary>This is the global setting that can be used as a global shortcut to invoke the action on the view.</summary>
        </member>
        <member name="P:Terminal.Gui.ShortcutHelper.ShortcutTag">
            <summary>The keystroke combination used in the <see cref="P:Terminal.Gui.ShortcutHelper.Shortcut"/> as string.</summary>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.CheckKeysFlagRange(Terminal.Gui.KeyCode,Terminal.Gui.KeyCode,Terminal.Gui.KeyCode)">
            <summary>Lookup for a <see cref="T:Terminal.Gui.KeyCode"/> on range of keys.</summary>
            <param name="key">The source key.</param>
            <param name="first">First key in range.</param>
            <param name="last">Last key in range.</param>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetShortcutFromTag(System.String,System.Text.Rune)">
            <summary>Allows to retrieve a <see cref="T:Terminal.Gui.KeyCode"/> from a <see cref="P:Terminal.Gui.ShortcutHelper.ShortcutTag"/></summary>
            <param name="tag">The key as string.</param>
            <param name="delimiter">The delimiter string.</param>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.PostShortcutValidation(Terminal.Gui.KeyCode)">
            <summary>Used at key up validation.</summary>
            <param name="key">The key to validate.</param>
            <returns><c>true</c> if is valid.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.PreShortcutValidation(Terminal.Gui.KeyCode)">
            <summary>Used at key down or key press validation.</summary>
            <param name="key">The key to validate.</param>
            <returns><c>true</c> if is valid.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetKeyToString(Terminal.Gui.KeyCode,Terminal.Gui.KeyCode@)">
            <summary>Return key as string.</summary>
            <param name="key">The key to extract.</param>
            <param name="knm">Correspond to the non modifier key.</param>
        </member>
        <member name="T:Terminal.Gui.IterationEventArgs">
            <summary>Event arguments for the <see cref="E:Terminal.Gui.Application.Iteration"/> event.</summary>
        </member>
        <member name="T:Terminal.Gui.IMainLoopDriver">
            <summary>Interface to create a platform specific <see cref="T:Terminal.Gui.MainLoop"/> driver.</summary>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.EventsPending">
            <summary>Must report whether there are any events pending, or even block waiting for events.</summary>
            <returns><c>true</c>, if there were pending events, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.Iteration">
            <summary>The iteration function.</summary>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.Setup(Terminal.Gui.MainLoop)">
            <summary>Initializes the <see cref="T:Terminal.Gui.MainLoop"/>, gets the calling main loop for the initialization.</summary>
            <remarks>Call <see cref="M:Terminal.Gui.IMainLoopDriver.TearDown"/> to release resources.</remarks>
            <param name="mainLoop">Main loop.</param>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.TearDown">
            <summary>Tears down the <see cref="T:Terminal.Gui.MainLoop"/> driver. Releases resources created in <see cref="M:Terminal.Gui.IMainLoopDriver.Setup(Terminal.Gui.MainLoop)"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.Wakeup">
            <summary>Wakes up the <see cref="T:Terminal.Gui.MainLoop"/> that might be waiting on input, must be thread safe.</summary>
        </member>
        <member name="T:Terminal.Gui.MainLoop">
            <summary>The MainLoop monitors timers and idle handlers.</summary>
            <remarks>
                Monitoring of file descriptors is only available on Unix, there does not seem to be a way of supporting this
                on Windows.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.MainLoop._idleHandlersLock">
            <summary>The idle handlers and lock that must be held while manipulating them</summary>
        </member>
        <member name="M:Terminal.Gui.MainLoop.#ctor(Terminal.Gui.IMainLoopDriver)">
            <summary>Creates a new MainLoop.</summary>
            <remarks>Use <see cref="M:Terminal.Gui.MainLoop.Dispose"/> to release resources.</remarks>
            <param name="driver">
                The <see cref="T:Terminal.Gui.ConsoleDriver"/> instance (one of the implementations FakeMainLoop, UnixMainLoop,
                NetMainLoop or WindowsMainLoop).
            </param>
        </member>
        <member name="P:Terminal.Gui.MainLoop.IdleHandlers">
            <summary>Gets a copy of the list of all idle handlers.</summary>
        </member>
        <member name="P:Terminal.Gui.MainLoop.MainLoopDriver">
            <summary>The current <see cref="T:Terminal.Gui.IMainLoopDriver"/> in use.</summary>
            <value>The main loop driver.</value>
        </member>
        <member name="P:Terminal.Gui.MainLoop.Running">
            <summary>Used for unit tests.</summary>
        </member>
        <member name="P:Terminal.Gui.MainLoop.Timeouts">
            <summary>
                Gets the list of all timeouts sorted by the <see cref="T:System.TimeSpan"/> time ticks. A shorter limit time can be
                added at the end, but it will be called before an earlier addition that has a longer limit time.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MainLoop.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})">
            <summary>
                Adds specified idle handler function to <see cref="T:Terminal.Gui.MainLoop"/> processing. The handler function will be called
                once per iteration of the main loop after other events have been handled.
            </summary>
            <remarks>
                <para>Remove an idle handler by calling <see cref="M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})"/> with the token this method returns.</para>
                <para>
                    If the <paramref name="idleHandler"/> returns  <see langword="false"/> it will be removed and not called
                    subsequently.
                </para>
            </remarks>
            <param name="idleHandler">Token that can be used to remove the idle handler with <see cref="M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})"/> .</param>
        </member>
        <member name="M:Terminal.Gui.MainLoop.AddTimeout(System.TimeSpan,System.Func{System.Boolean})">
            <summary>Adds a timeout to the <see cref="T:Terminal.Gui.MainLoop"/>.</summary>
            <remarks>
                When time specified passes, the callback will be invoked. If the callback returns true, the timeout will be
                reset, repeating the invocation. If it returns false, the timeout will stop and be removed. The returned value is a
                token that can be used to stop the timeout by calling <see cref="M:Terminal.Gui.MainLoop.RemoveTimeout(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.CheckTimersAndIdleHandlers(System.Int32@)">
            <summary>
                Called from <see cref="M:Terminal.Gui.IMainLoopDriver.EventsPending"/> to check if there are any outstanding timers or idle
                handlers.
            </summary>
            <param name="waitTimeout">
                Returns the number of milliseconds remaining in the current timer (if any). Will be -1 if
                there are no active timers.
            </param>
            <returns><see langword="true"/> if there is a timer or idle handler active.</returns>
        </member>
        <member name="M:Terminal.Gui.MainLoop.EventsPending">
            <summary>Determines whether there are pending events to be processed.</summary>
            <remarks>
                You can use this method if you want to probe if events are pending. Typically used if you need to flush the
                input queue while still running some of your own code in your main thread.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})">
            <summary>Removes an idle handler added with <see cref="M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})"/> from processing.</summary>
            <param name="token">A token returned by <see cref="M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})"/></param>
            Returns
            <c>true</c>
            if the idle handler is successfully removed; otherwise,
            <c>false</c>
            .
            This method also returns
            <c>false</c>
            if the idle handler is not found.
        </member>
        <member name="M:Terminal.Gui.MainLoop.RemoveTimeout(System.Object)">
            <summary>Removes a previously scheduled timeout</summary>
            <remarks>The token parameter is the value returned by AddTimeout.</remarks>
            Returns
            <c>true</c>
            if the timeout is successfully removed; otherwise,
            <c>false</c>
            .
            This method also returns
            <c>false</c>
            if the timeout is not found.
        </member>
        <member name="M:Terminal.Gui.MainLoop.Run">
            <summary>Runs the <see cref="T:Terminal.Gui.MainLoop"/>. Used only for unit tests.</summary>
        </member>
        <member name="M:Terminal.Gui.MainLoop.RunIteration">
            <summary>Runs one iteration of timers and file watches</summary>
            <remarks>
                Use this to process all pending events (timers, idle handlers and file watches).
                <code>
                while (main.EventsPending ()) RunIteration ();
              </code>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.Stop">
            <summary>Stops the main loop driver and calls <see cref="M:Terminal.Gui.IMainLoopDriver.Wakeup"/>. Used only for unit tests.</summary>
        </member>
        <member name="E:Terminal.Gui.MainLoop.TimeoutAdded">
            <summary>
                Invoked when a new timeout is added. To be used in the case when
                <see cref="P:Terminal.Gui.Application.EndAfterFirstIteration"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MainLoop.Wakeup">
            <summary>Wakes up the <see cref="T:Terminal.Gui.MainLoop"/> that might be waiting on input.</summary>
        </member>
        <member name="M:Terminal.Gui.MainLoop.NudgeToUniqueKey(System.Int64)">
            <summary>
                Finds the closest number to <paramref name="k"/> that is not present in <see cref="F:Terminal.Gui.MainLoop._timeouts"/>
                (incrementally).
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.btnCancel">
            <summary>
              Looks up a localized string similar to _Cancel.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.btnNo">
            <summary>
              Looks up a localized string similar to _No.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.btnOk">
            <summary>
              Looks up a localized string similar to _OK.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.btnOpen">
            <summary>
              Looks up a localized string similar to O_pen.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.btnSave">
            <summary>
              Looks up a localized string similar to _Save.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.btnSaveAs">
            <summary>
              Looks up a localized string similar to Save _as.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.btnYes">
            <summary>
              Looks up a localized string similar to _Yes.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxCopy">
            <summary>
              Looks up a localized string similar to _Copy.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxCut">
            <summary>
              Looks up a localized string similar to Cu_t.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxDeleteAll">
            <summary>
              Looks up a localized string similar to _Delete All.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxPaste">
            <summary>
              Looks up a localized string similar to _Paste.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxRedo">
            <summary>
              Looks up a localized string similar to _Redo.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxSelectAll">
            <summary>
              Looks up a localized string similar to _Select All.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxUndo">
            <summary>
              Looks up a localized string similar to _Undo.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.dpTitle">
            <summary>
              Looks up a localized string similar to Date Picker.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdAnyFiles">
            <summary>
              Looks up a localized string similar to Any Files.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdCtxDelete">
            <summary>
              Looks up a localized string similar to _Delete.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdCtxHide">
            <summary>
              Looks up a localized string similar to _Hide {0}.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdCtxNew">
            <summary>
              Looks up a localized string similar to _New.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdCtxRename">
            <summary>
              Looks up a localized string similar to _Rename.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdCtxSortAsc">
            <summary>
              Looks up a localized string similar to _Sort {0} ASC.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdCtxSortDesc">
            <summary>
              Looks up a localized string similar to _Sort {0} DESC.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdDeleteBody">
            <summary>
              Looks up a localized string similar to Are you sure you want to delete &apos;{0}&apos;? This operation is permanent.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdDeleteFailedTitle">
            <summary>
              Looks up a localized string similar to Delete Failed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdDeleteTitle">
            <summary>
              Looks up a localized string similar to Delete {0}.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdDirectory">
            <summary>
              Looks up a localized string similar to Directory.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdDirectoryAlreadyExistsFeedback">
            <summary>
              Looks up a localized string similar to Directory already exists with that name.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdDirectoryMustExistFeedback">
            <summary>
              Looks up a localized string similar to Must select an existing directory.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdExisting">
            <summary>
              Looks up a localized string similar to Existing.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdFile">
            <summary>
              Looks up a localized string similar to File.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdFileAlreadyExistsFeedback">
            <summary>
              Looks up a localized string similar to File already exists with that name.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdFileMustExistFeedback">
            <summary>
              Looks up a localized string similar to Must select an existing file.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdFilename">
            <summary>
              Looks up a localized string similar to Filename.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdFileOrDirectoryMustExistFeedback">
            <summary>
              Looks up a localized string similar to Must select an existing file or directory.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdModified">
            <summary>
              Looks up a localized string similar to Modified.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdNewFailed">
            <summary>
              Looks up a localized string similar to New Failed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdNewTitle">
            <summary>
              Looks up a localized string similar to New Folder.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdOpen">
            <summary>
              Looks up a localized string similar to Open.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdPathCaption">
            <summary>
              Looks up a localized string similar to Enter Path.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdRenameFailedTitle">
            <summary>
              Looks up a localized string similar to Rename Failed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdRenamePrompt">
            <summary>
              Looks up a localized string similar to Name:.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdRenameTitle">
            <summary>
              Looks up a localized string similar to Rename.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSave">
            <summary>
              Looks up a localized string similar to Save.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSaveAs">
            <summary>
              Looks up a localized string similar to Save as.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSearchCaption">
            <summary>
              Looks up a localized string similar to Enter Search.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSelectFolder">
            <summary>
              Looks up a localized string similar to Select folder.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSelectMixed">
            <summary>
              Looks up a localized string similar to Select Mixed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSize">
            <summary>
              Looks up a localized string similar to Size.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdType">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdWrongFileTypeFeedback">
            <summary>
              Looks up a localized string similar to Wrong file type.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.wzBack">
            <summary>
              Looks up a localized string similar to _Back.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.wzFinish">
            <summary>
              Looks up a localized string similar to Fi_nish.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.wzNext">
            <summary>
              Looks up a localized string similar to _Next....
            </summary>
        </member>
        <member name="T:Terminal.Gui.RunState">
            <summary>The execution state for a <see cref="P:Terminal.Gui.RunState.Toplevel"/> view.</summary>
        </member>
        <member name="M:Terminal.Gui.RunState.#ctor(Terminal.Gui.Toplevel)">
            <summary>Initializes a new <see cref="T:Terminal.Gui.RunState"/> class.</summary>
            <param name="view"></param>
        </member>
        <member name="P:Terminal.Gui.RunState.Toplevel">
            <summary>The <see cref="P:Terminal.Gui.RunState.Toplevel"/> belonging to this <see cref="T:Terminal.Gui.RunState"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.RunState.Dispose">
            <summary>Releases all resource used by the <see cref="T:Terminal.Gui.RunState"/> object.</summary>
            <remarks>Call <see cref="M:Terminal.Gui.RunState.Dispose"/> when you are finished using the <see cref="T:Terminal.Gui.RunState"/>.</remarks>
            <remarks>
                <see cref="M:Terminal.Gui.RunState.Dispose"/> method leaves the <see cref="T:Terminal.Gui.RunState"/> in an unusable state. After calling
                <see cref="M:Terminal.Gui.RunState.Dispose"/>, you must release all references to the <see cref="T:Terminal.Gui.RunState"/> so the garbage collector can
                reclaim the memory that the <see cref="T:Terminal.Gui.RunState"/> was occupying.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.RunState.Dispose(System.Boolean)">
            <summary>Releases all resource used by the <see cref="T:Terminal.Gui.RunState"/> object.</summary>
            <param name="disposing">If set to <see langword="true"/> we are disposing and should dispose held objects.</param>
        </member>
        <member name="T:Terminal.Gui.RunStateEventArgs">
            <summary>Event arguments for events about <see cref="T:Terminal.Gui.RunState"/></summary>
        </member>
        <member name="M:Terminal.Gui.RunStateEventArgs.#ctor(Terminal.Gui.RunState)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.RunStateEventArgs"/> class</summary>
            <param name="state"></param>
        </member>
        <member name="P:Terminal.Gui.RunStateEventArgs.State">
            <summary>The state being reported on by the event</summary>
        </member>
        <member name="T:Terminal.Gui.StackExtensions">
            <summary>Extension of <see cref="T:System.Collections.Generic.Stack`1"/> helper to work with specific <see cref="T:System.Collections.Generic.IEqualityComparer`1"/></summary>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.Contains``1(System.Collections.Generic.Stack{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Check if the stack object contains the value to find.</summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="valueToFind">Value to find.</param>
            <param name="comparer">The comparison object.</param>
            <returns><c>true</c> If the value was found.<c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.FindDuplicates``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Find all duplicates stack objects values.</summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="comparer">The comparison object.</param>
            <returns>The duplicates stack object.</returns>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.MoveNext``1(System.Collections.Generic.Stack{``0})">
            <summary>Move the first stack object value to the end.</summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.MovePrevious``1(System.Collections.Generic.Stack{``0})">
            <summary>Move the last stack object value to the top.</summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.MoveTo``1(System.Collections.Generic.Stack{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Move the stack object value to the index.</summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="valueToMove">Value to move.</param>
            <param name="index">The index where to move.</param>
            <param name="comparer">The comparison object.</param>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.Replace``1(System.Collections.Generic.Stack{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Replaces an stack object values that match with the value to replace.</summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="valueToReplace">Value to replace.</param>
            <param name="valueToReplaceWith">Value to replace with to what matches the value to replace.</param>
            <param name="comparer">The comparison object.</param>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.Swap``1(System.Collections.Generic.Stack{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Swap two stack objects values that matches with the both values.</summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="valueToSwapFrom">Value to swap from.</param>
            <param name="valueToSwapTo">Value to swap to.</param>
            <param name="comparer">The comparison object.</param>
        </member>
        <member name="T:Terminal.Gui.AppendAutocomplete">
            <summary>
                Autocomplete for a <see cref="T:Terminal.Gui.TextField"/> which shows suggestions within the box. Displayed suggestions can
                be completed using the tab key.
            </summary>
        </member>
        <member name="M:Terminal.Gui.AppendAutocomplete.#ctor(Terminal.Gui.TextField)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.AppendAutocomplete"/> class.</summary>
        </member>
        <member name="P:Terminal.Gui.AppendAutocomplete.ColorScheme">
            <summary>
                The color used for rendering the appended text. Note that only <see cref="P:Terminal.Gui.ColorScheme.Normal"/> is used and
                then only <see cref="P:Terminal.Gui.Attribute.Foreground"/> (Background comes from <see cref="P:Terminal.Gui.AppendAutocomplete.HostControl"/>).
            </summary>
        </member>
        <member name="P:Terminal.Gui.AppendAutocomplete.HostControl">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AppendAutocomplete.ClearSuggestions">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AppendAutocomplete.GenerateSuggestions(Terminal.Gui.AutocompleteContext)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AppendAutocomplete.OnMouseEvent(Terminal.Gui.MouseEvent,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AppendAutocomplete.ProcessKey(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AppendAutocomplete.RenderOverlay(System.Drawing.Point)">
            <summary>Renders the current suggestion into the <see cref="T:Terminal.Gui.TextField"/></summary>
        </member>
        <member name="M:Terminal.Gui.AppendAutocomplete.AcceptSelectionIfAny">
            <summary>
                Accepts the current autocomplete suggestion displaying in the text box. Returns true if a valid suggestion was
                being rendered and acceptable or false if no suggestion was showing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.AppendAutocomplete.MakingSuggestion">
            <summary>
                Returns true if there is a suggestion that can be made and the control is in a state where user would expect
                to see auto-complete (i.e. focused and cursor in right place).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.AutocompleteBase">
            <summary>
                Abstract implementation of <see cref="T:Terminal.Gui.IAutocomplete"/> allows for tailoring how autocomplete is
                rendered/interacted with.
            </summary>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.HostControl">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.PopupInsideContainer">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.SuggestionGenerator">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.MaxWidth">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.MaxHeight">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.Visible">
            <inheritdoc/>
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.Suggestions">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.SelectedIdx">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.SelectionKey">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.CloseKey">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.Reopen">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.AutocompleteBase.Context">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AutocompleteBase.OnMouseEvent(Terminal.Gui.MouseEvent,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AutocompleteBase.ProcessKey(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AutocompleteBase.RenderOverlay(System.Drawing.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AutocompleteBase.ClearSuggestions">
            <inheritdoc/>
            >
        </member>
        <member name="M:Terminal.Gui.AutocompleteBase.GenerateSuggestions(Terminal.Gui.AutocompleteContext)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.AutocompleteBase.EnsureSelectedIdxIsValid">
            <summary>Updates <see cref="P:Terminal.Gui.AutocompleteBase.SelectedIdx"/> to be a valid index within <see cref="P:Terminal.Gui.AutocompleteBase.Suggestions"/></summary>
        </member>
        <member name="T:Terminal.Gui.AutocompleteContext">
            <summary>
                Describes the current state of a <see cref="T:Terminal.Gui.View"/> which is proposing autocomplete. Suggestions are based on
                this state.
            </summary>
        </member>
        <member name="M:Terminal.Gui.AutocompleteContext.#ctor(System.Collections.Generic.List{Terminal.Gui.RuneCell},System.Int32,System.Boolean)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.AutocompleteContext"/> class</summary>
        </member>
        <member name="P:Terminal.Gui.AutocompleteContext.Canceled">
            <summary>Gets or sets if the autocomplete was canceled from popup.</summary>
        </member>
        <member name="P:Terminal.Gui.AutocompleteContext.CurrentLine">
            <summary>The text on the current line.</summary>
        </member>
        <member name="P:Terminal.Gui.AutocompleteContext.CursorPosition">
            <summary>The position of the input cursor within the <see cref="P:Terminal.Gui.AutocompleteContext.CurrentLine"/>.</summary>
        </member>
        <member name="T:Terminal.Gui.IAutocomplete">
            <summary>
                Renders an overlay on another view at a given point that allows selecting from a range of 'autocomplete'
                options.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.CloseKey">
            <summary>The key that the user can press to close the currently popped autocomplete menu</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.ColorScheme">
            <summary>
                The colors to use to render the overlay. Accessing this property before the Application has been initialized
                will cause an error
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.Context">
            <summary>The context used by the autocomplete menu.</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.HostControl">
            <summary>The host control that will use autocomplete.</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.MaxHeight">
            <summary>The maximum number of visible rows in the autocomplete dropdown to render</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.MaxWidth">
            <summary>The maximum width of the autocomplete dropdown</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.PopupInsideContainer">
            <summary>Gets or sets where the popup will be displayed.</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.Reopen">
            <summary>The key that the user can press to reopen the currently popped autocomplete menu</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.SelectedIdx">
            <summary>The currently selected index into <see cref="P:Terminal.Gui.IAutocomplete.Suggestions"/> that the user has highlighted</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.SelectionKey">
            <summary>The key that the user must press to accept the currently selected autocomplete suggestion</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.SuggestionGenerator">
            <summary>
                Gets or Sets the class responsible for generating <see cref="P:Terminal.Gui.IAutocomplete.Suggestions"/> based on a given
                <see cref="T:Terminal.Gui.AutocompleteContext"/> of the <see cref="P:Terminal.Gui.IAutocomplete.HostControl"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.Suggestions">
            <summary>The strings that form the current list of suggestions to render based on what the user has typed so far.</summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.Visible">
            <summary>True if the autocomplete should be considered open and visible</summary>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.ClearSuggestions">
            <summary>Clears <see cref="P:Terminal.Gui.IAutocomplete.Suggestions"/></summary>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.GenerateSuggestions(Terminal.Gui.AutocompleteContext)">
            <summary>
                Populates <see cref="P:Terminal.Gui.IAutocomplete.Suggestions"/> with all <see cref="T:Terminal.Gui.Suggestion"/> proposed by
                <see cref="P:Terminal.Gui.IAutocomplete.SuggestionGenerator"/> at the given <paramref name="context"/> (cursor position)
            </summary>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.OnMouseEvent(Terminal.Gui.MouseEvent,System.Boolean)">
            <summary>
                Handle mouse events before <see cref="P:Terminal.Gui.IAutocomplete.HostControl"/> e.g. to make mouse events like report/click apply to the
                autocomplete control instead of changing the cursor position in the underlying text view.
            </summary>
            <param name="me">The mouse event.</param>
            <param name="fromHost">If was called from the popup or from the host.</param>
            <returns><c>true</c>if the mouse can be handled <c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.ProcessKey(Terminal.Gui.Key)">
            <summary>
                Handle key events before <see cref="P:Terminal.Gui.IAutocomplete.HostControl"/> e.g. to make key events like up/down apply to the
                autocomplete control instead of changing the cursor position in the underlying text view.
            </summary>
            <param name="a">The key event.</param>
            <returns><c>true</c>if the key can be handled <c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.RenderOverlay(System.Drawing.Point)">
            <summary>Renders the autocomplete dialog inside the given <see cref="P:Terminal.Gui.IAutocomplete.HostControl"/> at the given point.</summary>
            <param name="renderAt"></param>
        </member>
        <member name="T:Terminal.Gui.ISuggestionGenerator">
            <summary>Generates autocomplete <see cref="T:Terminal.Gui.Suggestion"/> based on a given cursor location within a string</summary>
        </member>
        <member name="M:Terminal.Gui.ISuggestionGenerator.GenerateSuggestions(Terminal.Gui.AutocompleteContext)">
            <summary>Generates autocomplete <see cref="T:Terminal.Gui.Suggestion"/> based on a given <paramref name="context"/></summary>
        </member>
        <member name="M:Terminal.Gui.ISuggestionGenerator.IsWordChar(System.Text.Rune)">
            <summary>
                Returns <see langword="true"/> if <paramref name="rune"/> is a character that would continue autocomplete
                suggesting. Returns <see langword="false"/> if it is a 'breaking' character (i.e. terminating current word
                boundary)
            </summary>
        </member>
        <member name="T:Terminal.Gui.PopupAutocomplete">
            <summary>
                Renders an overlay on another view at a given point that allows selecting from a range of 'autocomplete'
                options.
            </summary>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.#ctor">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.PopupAutocomplete"/> class.</summary>
        </member>
        <member name="P:Terminal.Gui.PopupAutocomplete.ColorScheme">
            <summary>
                The colors to use to render the overlay. Accessing this property before the Application has been initialized
                will cause an error
            </summary>
        </member>
        <member name="P:Terminal.Gui.PopupAutocomplete.HostControl">
            <summary>The host control to handle.</summary>
        </member>
        <member name="P:Terminal.Gui.PopupAutocomplete.ScrollOffset">
            <summary>
                When more suggestions are available than can be rendered the user can scroll down the dropdown list. This
                indicates how far down they have gone
            </summary>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.EnsureSelectedIdxIsValid">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.OnMouseEvent(Terminal.Gui.MouseEvent,System.Boolean)">
            <summary>
                Handle mouse events before <see cref="P:Terminal.Gui.PopupAutocomplete.HostControl"/> e.g. to make mouse events like report/click apply to the
                autocomplete control instead of changing the cursor position in the underlying text view.
            </summary>
            <param name="me">The mouse event.</param>
            <param name="fromHost">If was called from the popup or from the host.</param>
            <returns><c>true</c>if the mouse can be handled <c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.ProcessKey(Terminal.Gui.Key)">
            <summary>
                Handle key events before <see cref="P:Terminal.Gui.PopupAutocomplete.HostControl"/> e.g. to make key events like up/down apply to the
                autocomplete control instead of changing the cursor position in the underlying text view.
            </summary>
            <param name="key">The key event.</param>
            <returns><c>true</c>if the key can be handled <c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.RenderOverlay(System.Drawing.Point)">
            <summary>Renders the autocomplete dialog inside or outside the given <see cref="P:Terminal.Gui.PopupAutocomplete.HostControl"/> at the given point.</summary>
            <param name="renderAt"></param>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.Close">
            <summary>
                Closes the Autocomplete context menu if it is showing and <see cref="M:Terminal.Gui.IAutocomplete.ClearSuggestions"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.DeleteTextBackwards">
            <summary>Deletes the text backwards before insert the selected text in the <see cref="P:Terminal.Gui.PopupAutocomplete.HostControl"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.InsertSelection(Terminal.Gui.Suggestion)">
            <summary>
                Called when the user confirms a selection at the current cursor location in the <see cref="P:Terminal.Gui.PopupAutocomplete.HostControl"/>. The
                <paramref name="accepted"/> string is the full autocomplete word to be inserted. Typically a host will have to
                remove some characters such that the <paramref name="accepted"/> string completes the word instead of simply being
                appended.
            </summary>
            <param name="accepted"></param>
            <returns>True if the insertion was possible otherwise false</returns>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.InsertText(System.String)">
            <summary>Insert the selected text in the <see cref="P:Terminal.Gui.PopupAutocomplete.HostControl"/>.</summary>
            <param name="accepted"></param>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.MoveDown">
            <summary>Moves the selection in the Autocomplete context menu down one</summary>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.MoveUp">
            <summary>Moves the selection in the Autocomplete context menu up one</summary>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.RenderSelectedIdxByMouse(Terminal.Gui.MouseEvent)">
            <summary>Render the current selection in the Autocomplete context menu by the mouse reporting.</summary>
            <param name="me"></param>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.ReopenSuggestions">
            <summary>Reopen the popup after it has been closed.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.Select">
            <summary>
                Completes the autocomplete selection process. Called when user hits the
                <see cref="P:Terminal.Gui.IAutocomplete.SelectionKey"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.PopupAutocomplete.SetCursorPosition(System.Int32)">
            <summary>Set the cursor position in the <see cref="P:Terminal.Gui.PopupAutocomplete.HostControl"/>.</summary>
            <param name="column"></param>
        </member>
        <member name="T:Terminal.Gui.SingleWordSuggestionGenerator">
            <summary>
                <see cref="T:Terminal.Gui.ISuggestionGenerator"/> which suggests from a collection of words those that match the
                <see cref="T:Terminal.Gui.AutocompleteContext"/>. You can update <see cref="P:Terminal.Gui.SingleWordSuggestionGenerator.AllSuggestions"/> at any time to change candidates
                considered for autocomplete.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SingleWordSuggestionGenerator.AllSuggestions">
            <summary>The full set of all strings that can be suggested.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.SingleWordSuggestionGenerator.GenerateSuggestions(Terminal.Gui.AutocompleteContext)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.SingleWordSuggestionGenerator.IsWordChar(System.Text.Rune)">
            <summary>
                Return true if the given symbol should be considered part of a word and can be contained in matches. Base
                behavior is to use <see cref="M:System.Char.IsLetterOrDigit(System.Char)"/>
            </summary>
            <param name="rune">The rune.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.SingleWordSuggestionGenerator.IdxToWord(System.Collections.Generic.List{System.Text.Rune},System.Int32,System.Int32@,System.Int32)">
            <summary>
                <para>
                    Given a <paramref name="line"/> of characters, returns the word which ends at <paramref name="idx"/> or null.
                    Also returns null if the <paramref name="idx"/> is positioned in the middle of a word.
                </para>
                <para>
                    Use this method to determine whether autocomplete should be shown when the cursor is at a given point in a
                    line and to get the word from which suggestions should be generated. Use the <paramref name="columnOffset"/> to
                    indicate if search the word at left (negative), at right (positive) or at the current column (zero) which is
                    the default.
                </para>
            </summary>
            <param name="line"></param>
            <param name="idx"></param>
            <param name="startIdx">The start index of the word.</param>
            <param name="columnOffset"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Suggestion">
            <summary>A replacement suggestion made by <see cref="T:Terminal.Gui.IAutocomplete"/></summary>
        </member>
        <member name="M:Terminal.Gui.Suggestion.#ctor(System.Int32,System.String,System.String)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.Suggestion"/> class.</summary>
            <param name="remove"></param>
            <param name="replacement"></param>
            <param name="title">User visible title for the suggestion or null if the same as <paramref name="replacement"/>.</param>
        </member>
        <member name="P:Terminal.Gui.Suggestion.Remove">
            <summary>
                The number of characters to remove at the current cursor position before adding the <see cref="P:Terminal.Gui.Suggestion.Replacement"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Suggestion.Replacement">
            <summary>The replacement text that will be added</summary>
        </member>
        <member name="P:Terminal.Gui.Suggestion.Title">
            <summary>
                The user visible description for the <see cref="P:Terminal.Gui.Suggestion.Replacement"/>. Typically this would be the same as
                <see cref="P:Terminal.Gui.Suggestion.Replacement"/> but may vary in advanced use cases (e.g. Title= "ctor", Replacement = "MyClass()\n{\n}")
            </summary>
        </member>
        <member name="T:Terminal.Gui.CollectionNavigator">
            <inheritdoc/>
            <remarks>This implementation is based on a static <see cref="P:Terminal.Gui.CollectionNavigator.Collection"/> of objects.</remarks>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.#ctor">
            <summary>Constructs a new CollectionNavigator.</summary>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.#ctor(System.Collections.IList)">
            <summary>Constructs a new CollectionNavigator for the given collection.</summary>
            <param name="collection"></param>
        </member>
        <member name="P:Terminal.Gui.CollectionNavigator.Collection">
            <summary>The collection of objects to search. <see cref="M:System.Object.ToString"/> is used to search the collection.</summary>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.ElementAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.GetCollectionLength">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.CollectionNavigatorBase">
            <summary>
                Navigates a collection of items using keystrokes. The keystrokes are used to build a search string. The
                <see cref="P:Terminal.Gui.CollectionNavigatorBase.SearchString"/> is used to find the next item in the collection that matches the search string when
                <see cref="M:Terminal.Gui.CollectionNavigatorBase.GetNextMatchingItem(System.Int32,System.Char)"/> is called.
                <para>
                    If the user types keystrokes that can't be found in the collection, the search string is cleared and the next
                    item is found that starts with the last keystroke.
                </para>
                <para>If the user pauses keystrokes for a short time (see <see cref="P:Terminal.Gui.CollectionNavigatorBase.TypingDelay"/>), the search string is cleared.</para>
            </summary>
        </member>
        <member name="P:Terminal.Gui.CollectionNavigatorBase.Comparer">
            <summary>The comparer function to use when searching the collection.</summary>
        </member>
        <member name="P:Terminal.Gui.CollectionNavigatorBase.SearchString">
            <summary>
                Gets the current search string. This includes the set of keystrokes that have been pressed since the last
                unsuccessful match or after <see cref="P:Terminal.Gui.CollectionNavigatorBase.TypingDelay"/>) milliseconds. Useful for debugging.
            </summary>
        </member>
        <member name="P:Terminal.Gui.CollectionNavigatorBase.TypingDelay">
            <summary>
                Gets or sets the number of milliseconds to delay before clearing the search string. The delay is reset on each
                call to <see cref="M:Terminal.Gui.CollectionNavigatorBase.GetNextMatchingItem(System.Int32,System.Char)"/>. The default is 500ms.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigatorBase.GetNextMatchingItem(System.Int32,System.Char)">
            <summary>
                Gets the index of the next item in the collection that matches the current <see cref="P:Terminal.Gui.CollectionNavigatorBase.SearchString"/> plus the
                provided character (typically from a key press).
            </summary>
            <param name="currentIndex">The index in the collection to start the search from.</param>
            <param name="keyStruck">The character of the key the user pressed.</param>
            <returns>
                The index of the item that matches what the user has typed. Returns <see langword="-1"/> if no item in the
                collection matched.
            </returns>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigatorBase.IsCompatibleKey(Terminal.Gui.Key)">
            <summary>
                Returns true if <paramref name="a"/> is a searchable key (e.g. letters, numbers, etc) that are valid to pass
                to this class for search filtering.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigatorBase.OnSearchStringChanged(Terminal.Gui.KeystrokeNavigatorEventArgs)">
            <summary>
                Invoked when the <see cref="P:Terminal.Gui.CollectionNavigatorBase.SearchString"/> changes. Useful for debugging. Invokes the
                <see cref="E:Terminal.Gui.CollectionNavigatorBase.SearchStringChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Terminal.Gui.CollectionNavigatorBase.SearchStringChanged">
            <summary>This event is invoked when <see cref="P:Terminal.Gui.CollectionNavigatorBase.SearchString"/>  changes. Useful for debugging.</summary>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigatorBase.ElementAt(System.Int32)">
            <summary>Returns the collection being navigated element at <paramref name="idx"/>.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigatorBase.GetCollectionLength">
            <summary>Return the number of elements in the collection</summary>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigatorBase.GetNextMatchingItem(System.Int32,System.String,System.Boolean)">
            <summary>Gets the index of the next item in the collection that matches <paramref name="search"/>.</summary>
            <param name="currentIndex">The index in the collection to start the search from.</param>
            <param name="search">The search string to use.</param>
            <param name="minimizeMovement">
                Set to <see langword="true"/> to stop the search on the first match if there are
                multiple matches for <paramref name="search"/>. e.g. "ca" + 'r' should stay on "car" and not jump to "cart". If
                <see langword="false"/> (the default), the next matching item will be returned, even if it is above in the
                collection.
            </param>
            <returns>The index of the next matching item or <see langword="-1"/> if no match was found.</returns>
        </member>
        <member name="T:Terminal.Gui.RuneExtensions">
            <summary>Extends <see cref="T:System.Text.Rune"/> to support TUI text manipulation.</summary>
        </member>
        <member name="F:Terminal.Gui.RuneExtensions.MaxUnicodeCodePoint">
            <summary>Maximum Unicode code point.</summary>
        </member>
        <member name="M:Terminal.Gui.RuneExtensions.CanBeEncodedAsRune(System.Byte[])">
            <summary>Reports if the provided array of bytes can be encoded as UTF-8.</summary>
            <param name="buffer">The byte array to probe.</param>
            <value><c>true</c> if is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Terminal.Gui.RuneExtensions.DecodeSurrogatePair(System.Text.Rune,System.Char[]@)">
            <summary>Attempts to decode the rune as a surrogate pair to UTF-16.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.Text.Rune"/> to support TUI text manipulation.</remarks>
            <param name="rune">The rune to decode.</param>
            <param name="chars">The chars if the rune is a surrogate pair. Null otherwise.</param>
            <returns><see langword="true"/> if the rune is a valid surrogate pair; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.RuneExtensions.Encode(System.Text.Rune,System.Byte[],System.Int32,System.Int32)">
            <summary>Writes into the destination buffer starting at offset the UTF8 encoded version of the rune.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.Text.Rune"/> to support TUI text manipulation.</remarks>
            <param name="rune">The rune to encode.</param>
            <param name="dest">The destination buffer.</param>
            <param name="start">Starting offset to look into.</param>
            <param name="count">Number of bytes valid in the buffer, or -1 to make it the length of the buffer.</param>
            <returns>he number of bytes written into the destination buffer.</returns>
        </member>
        <member name="M:Terminal.Gui.RuneExtensions.EncodeSurrogatePair(System.Char,System.Char,System.Text.Rune@)">
            <summary>Attempts to encode (as UTF-16) a surrogate pair.</summary>
            <param name="highSurrogate">The high surrogate code point.</param>
            <param name="lowSurrogate">The low surrogate code point.</param>
            <param name="result">The encoded rune.</param>
            <returns><see langword="true"/> if the encoding succeeded; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.RuneExtensions.GetColumns(System.Text.Rune)">
            <summary>Gets the number of columns the rune occupies in the terminal.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.Text.Rune"/> to support TUI text manipulation.</remarks>
            <param name="rune">The rune to measure.</param>
            <returns>
                The number of columns required to fit the rune, 0 if the argument is the null character, or -1 if the value is
                not printable, otherwise the number of columns that the rune occupies.
            </returns>
        </member>
        <member name="M:Terminal.Gui.RuneExtensions.GetEncodingLength(System.Text.Rune,System.Text.Encoding)">
            <summary>Get number of bytes required to encode the rune, based on the provided encoding.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.Text.Rune"/> to support TUI text manipulation.</remarks>
            <param name="rune">The rune to probe.</param>
            <param name="encoding">The encoding used; the default is UTF8.</param>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Terminal.Gui.RuneExtensions.IsCombiningMark(System.Text.Rune)">
            <summary>Returns <see langword="true"/> if the rune is a combining character.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.Text.Rune"/> to support TUI text manipulation.</remarks>
            <param name="rune"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.RuneExtensions.IsSurrogatePair(System.Text.Rune)">
            <summary>Reports whether a rune is a surrogate code point.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.Text.Rune"/> to support TUI text manipulation.</remarks>
            <param name="rune">The rune to probe.</param>
            <returns><see langword="true"/> if the rune is a surrogate code point; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.RuneExtensions.MakePrintable(System.Text.Rune)">
            <summary>
                Ensures the rune is not a control character and can be displayed by translating characters below 0x20 to
                equivalent, printable, Unicode chars.
            </summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.Text.Rune"/> to support TUI text manipulation.</remarks>
            <param name="rune"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.StringEventArgs">
            <summary>Cancellable event args for string-based property change events.</summary>
        </member>
        <member name="M:Terminal.Gui.StringEventArgs.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.StringEventArgs"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.StringEventArgs.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.StringEventArgs"/></summary>
            <param name="oldString">The old string.</param>
            <param name="newString">The new string.</param>
        </member>
        <member name="P:Terminal.Gui.StringEventArgs.NewValue">
            <summary>The new string.</summary>
        </member>
        <member name="P:Terminal.Gui.StringEventArgs.OldValue">
            <summary>The old string.</summary>
        </member>
        <member name="T:Terminal.Gui.StringExtensions">
            <summary>Extensions to <see cref="T:System.String"/> to support TUI text manipulation.</summary>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.DecodeLastRune(System.String,System.Int32)">
            <summary>Unpacks the last UTF-8 encoding in the string.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.String"/> to support TUI text manipulation.</remarks>
            <param name="str">The string to decode.</param>
            <param name="end">Index in string to stop at; if -1, use the buffer length.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.DecodeRune(System.String,System.Int32,System.Int32)">
            <summary>Unpacks the first UTF-8 encoding in the string and returns the rune and its width in bytes.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.String"/> to support TUI text manipulation.</remarks>
            <param name="str">The string to decode.</param>
            <param name="start">Starting offset.</param>
            <param name="count">Number of bytes in the buffer, or -1 to make it the length of the buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.GetColumns(System.String)">
            <summary>Gets the number of columns the string occupies in the terminal.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.String"/> to support TUI text manipulation.</remarks>
            <param name="str">The string to measure.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.GetRuneCount(System.String)">
            <summary>Gets the number of runes in the string.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.String"/> to support TUI text manipulation.</remarks>
            <param name="str">The string to count.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.IsAllAsciiDigits(System.ReadOnlySpan{System.Char})">
            <summary>
                Determines if this <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> is composed entirely of ASCII
                digits.
            </summary>
            <param name="stringSpan">A <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> to check.</param>
            <returns>
                A <see langword="bool"/> indicating if all elements of the <see cref="T:System.ReadOnlySpan`1"/> are ASCII digits (
                <see langword="true"/>) or not (<see langword="false"/>
            </returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.IsAllAsciiHexDigits(System.ReadOnlySpan{System.Char})">
            <summary>
                Determines if this <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> is composed entirely of ASCII
                digits.
            </summary>
            <param name="stringSpan">A <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> to check.</param>
            <returns>
                A <see langword="bool"/> indicating if all elements of the <see cref="T:System.ReadOnlySpan`1"/> are ASCII digits (
                <see langword="true"/>) or not (<see langword="false"/>
            </returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>Repeats the string <paramref name="n"/> times.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.String"/> to support TUI text manipulation.</remarks>
            <param name="str">The text to repeat.</param>
            <param name="n">Number of times to repeat the text.</param>
            <returns>The text repeated if <paramref name="n"/> is greater than zero, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.ToRuneList(System.String)">
            <summary>Converts the string into a <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.String"/> to support TUI text manipulation.</remarks>
            <param name="str">The string to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.ToRunes(System.String)">
            <summary>Converts the string into a <see cref="T:System.Text.Rune"/> array.</summary>
            <remarks>This is a Terminal.Gui extension method to <see cref="T:System.String"/> to support TUI text manipulation.</remarks>
            <param name="str">The string to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.ToString(System.Collections.Generic.IEnumerable{System.Text.Rune})">
            <summary>Converts a <see cref="T:System.Text.Rune"/> generic collection into a string.</summary>
            <param name="runes">The enumerable rune to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.StringExtensions.ToString(System.Collections.Generic.IEnumerable{System.Byte},System.Text.Encoding)">
            <summary>Converts a byte generic collection into a string in the provided encoding (default is UTF8)</summary>
            <param name="bytes">The enumerable byte to convert.</param>
            <param name="encoding">The encoding to be used.</param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TableCollectionNavigator">
            <summary>Collection navigator for cycling selections in a <see cref="T:Terminal.Gui.TableView"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TableCollectionNavigator.#ctor(Terminal.Gui.TableView)">
            <summary>Creates a new instance for navigating the data in the wrapped <paramref name="tableView"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TableCollectionNavigator.ElementAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TableCollectionNavigator.GetCollectionLength">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.TextAlignment">
            <summary>Text alignment enumeration, controls how text is displayed.</summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Left">
            <summary>The text will be left-aligned.</summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Right">
            <summary>The text will be right-aligned.</summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Centered">
            <summary>The text will be centered horizontally.</summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Justified">
            <summary>
                The text will be justified (spaces will be added to existing spaces such that the text fills the container
                horizontally).
            </summary>
        </member>
        <member name="T:Terminal.Gui.TextDirection">
            <summary>Text direction enumeration, controls how text is displayed.</summary>
            <remarks>
                <para>TextDirection  [H] = Horizontal  [V] = Vertical</para>
                <table>
                    <tr>
                        <th>TextDirection</th> <th>Description</th>
                    </tr>
                    <tr>
                        <td>LeftRight_TopBottom [H]</td> <td>Normal</td>
                    </tr>
                    <tr>
                        <td>TopBottom_LeftRight [V]</td> <td>Normal</td>
                    </tr>
                    <tr>
                        <td>RightLeft_TopBottom [H]</td> <td>Invert Text</td>
                    </tr>
                    <tr>
                        <td>TopBottom_RightLeft [V]</td> <td>Invert Lines</td>
                    </tr>
                    <tr>
                        <td>LeftRight_BottomTop [H]</td> <td>Invert Lines</td>
                    </tr>
                    <tr>
                        <td>BottomTop_LeftRight [V]</td> <td>Invert Text</td>
                    </tr>
                    <tr>
                        <td>RightLeft_BottomTop [H]</td> <td>Invert Text + Invert Lines</td>
                    </tr>
                    <tr>
                        <td>BottomTop_RightLeft [V]</td> <td>Invert Text + Invert Lines</td>
                    </tr>
                </table>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.TextDirection.LeftRight_TopBottom">
            <summary>Normal horizontal direction. <code>HELLO<br/>WORLD</code></summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.TopBottom_LeftRight">
            <summary>Normal vertical direction. <code>H W<br/>E O<br/>L R<br/>L L<br/>O D</code></summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.RightLeft_TopBottom">
            <summary>This is a horizontal direction. <br/> RTL <code>OLLEH<br/>DLROW</code></summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.TopBottom_RightLeft">
            <summary>This is a vertical direction. <code>W H<br/>O E<br/>R L<br/>L L<br/>D O</code></summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.LeftRight_BottomTop">
            <summary>This is a horizontal direction. <code>WORLD<br/>HELLO</code></summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.BottomTop_LeftRight">
            <summary>This is a vertical direction. <code>O D<br/>L L<br/>L R<br/>E O<br/>H W</code></summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.RightLeft_BottomTop">
            <summary>This is a horizontal direction. <code>DLROW<br/>OLLEH</code></summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.BottomTop_RightLeft">
            <summary>This is a vertical direction. <code>D O<br/>L L<br/>R L<br/>O E<br/>W H</code></summary>
        </member>
        <member name="T:Terminal.Gui.TextFormatter">
            <summary>
                Provides text formatting. Supports <see cref="P:Terminal.Gui.View.HotKey"/>s, horizontal alignment, vertical alignment,
                multiple lines, and word-based line wrap.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Alignment">
            <summary>Controls the horizontal text-alignment property.</summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.AutoSize">
            <summary>Gets or sets whether the <see cref="P:Terminal.Gui.TextFormatter.Size"/> should be automatically changed to fit the <see cref="P:Terminal.Gui.TextFormatter.Text"/>.</summary>
            <remarks>
                <para>Used when <see cref="T:Terminal.Gui.View"/> is using <see cref="M:Terminal.Gui.Dim.Auto(Terminal.Gui.Dim.DimAutoStyle,Terminal.Gui.Dim,Terminal.Gui.Dim)"/> to resize the view's <see cref="P:Terminal.Gui.View.Viewport"/> to fit <see cref="P:Terminal.Gui.TextFormatter.Size"/>.</para>
                <para>
                    AutoSize is ignored if <see cref="F:Terminal.Gui.TextAlignment.Justified"/> and
                    <see cref="F:Terminal.Gui.VerticalTextAlignment.Justified"/> are used.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetHotKeySpecifierLength(System.Boolean)">
            <summary>
                Gets the width or height of the <see cref="P:Terminal.Gui.TextFormatter.HotKeySpecifier"/> characters
                in the <see cref="P:Terminal.Gui.TextFormatter.Text"/> property.
            </summary>
            <remarks>
                Only the first HotKey specifier found in <see cref="P:Terminal.Gui.TextFormatter.Text"/> is supported.
            </remarks>
            <param name="isWidth">
                If <see langword="true"/> (the default) the width required for the HotKey specifier is returned. Otherwise the
                height
                is returned.
            </param>
            <returns>
                The number of characters required for the <see cref="P:Terminal.Gui.TextFormatter.HotKeySpecifier"/>. If the text
                direction specified
                by <see cref="T:Terminal.Gui.TextDirection"/> does not match the <paramref name="isWidth"/> parameter, <c>0</c> is returned.
            </returns>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.CursorPosition">
            <summary>
                Gets the cursor position of the <see cref="P:Terminal.Gui.TextFormatter.HotKey"/>. If the <see cref="P:Terminal.Gui.TextFormatter.HotKey"/> is defined, the cursor will
                be positioned over it.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Direction">
            <summary>Controls the text-direction property.</summary>
            <value>The text vertical alignment.</value>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.FillRemaining">
            <summary>
                Determines if the viewport width will be used or only the text width will be used,
                If <see langword="true"/> all the viewport area will be filled with whitespaces and the same background color
                showing a perfect rectangle.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKey">
            <summary>Gets or sets the hot key. Fires the <see cref="E:Terminal.Gui.TextFormatter.HotKeyChanged"/> event.</summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKeyPos">
            <summary>The position in the text of the hot key. The hot key will be rendered using the hot color.</summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKeySpecifier">
            <summary>
                The specifier character for the hot key (e.g. '_'). Set to '\xffff' to disable hot key support for this View
                instance. The default is '\xffff'.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.MultiLine">
            <summary>Gets or sets a value indicating whether multi line is allowed.</summary>
            <remarks>Multi line is ignored if <see cref="P:Terminal.Gui.TextFormatter.WordWrap"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.NeedsFormat">
            <summary>Gets or sets whether the <see cref="T:Terminal.Gui.TextFormatter"/> needs to format the text.</summary>
            <remarks>
                <para>If <see langword="false"/> when Draw is called, the Draw call will be faster.</para>
                <para>Used by <see cref="M:Terminal.Gui.TextFormatter.Draw(System.Drawing.Rectangle,Terminal.Gui.Attribute,Terminal.Gui.Attribute,System.Drawing.Rectangle,Terminal.Gui.ConsoleDriver)"/></para>
                <para>Set to <see langword="true"/> when any of the properties of <see cref="T:Terminal.Gui.TextFormatter"/> are set.</para>
                <para>Set to <see langword="false"/> when the text is formatted (if <see cref="M:Terminal.Gui.TextFormatter.GetLines"/> is accessed).</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.PreserveTrailingSpaces">
            <summary>
                Gets or sets whether trailing spaces at the end of word-wrapped lines are preserved or not when
                <see cref="P:Terminal.Gui.TextFormatter.WordWrap"/> is enabled. If <see langword="true"/> trailing spaces at the end of wrapped
                lines will be removed when <see cref="P:Terminal.Gui.TextFormatter.Text"/> is formatted for display. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Size">
            <summary>Gets or sets the size <see cref="P:Terminal.Gui.TextFormatter.Text"/> will be constrained to when formatted.</summary>
            <remarks>
                <para>
                    Does not return the size of the formatted text but the size that will be used to constrain the text when
                    formatted.
                </para>
                <para>When set, <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/> is set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.TabWidth">
            <summary>Gets or sets the number of columns used for a tab.</summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Text">
            <summary>The text to be formatted. This string is never modified.</summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.VerticalAlignment">
            <summary>Controls the vertical text-alignment property.</summary>
            <value>The text vertical alignment.</value>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.WordWrap">
            <summary>Gets or sets whether word wrap will be used to fit <see cref="P:Terminal.Gui.TextFormatter.Text"/> to <see cref="P:Terminal.Gui.TextFormatter.Size"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Draw(System.Drawing.Rectangle,Terminal.Gui.Attribute,Terminal.Gui.Attribute,System.Drawing.Rectangle,Terminal.Gui.ConsoleDriver)">
            <summary>Draws the text held by <see cref="T:Terminal.Gui.TextFormatter"/> to <see cref="T:Terminal.Gui.ConsoleDriver"/> using the colors specified.</summary>
            <remarks>
                Causes the text to be formatted (references <see cref="M:Terminal.Gui.TextFormatter.GetLines"/>). Sets <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/> to
                <c>false</c>.
            </remarks>
            <param name="screen">Specifies the screen-relative location and maximum size for drawing the text.</param>
            <param name="normalColor">The color to use for all text except the hotkey</param>
            <param name="hotColor">The color to use to draw the hotkey</param>
            <param name="maximum">Specifies the screen-relative location and maximum container size.</param>
            <param name="driver">The console driver currently used by the application.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Format">
            <summary>Returns the formatted text, constrained to <see cref="P:Terminal.Gui.TextFormatter.Size"/>.</summary>
            <remarks>
                If <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/> is <see langword="true"/>, causes a format, resetting <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/>
                to <see langword="false"/>.
            </remarks>
            <returns>The formatted text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.FormatAndGetSize">
            <summary>Gets the size required to hold the formatted text, given the constraints placed by <see cref="P:Terminal.Gui.TextFormatter.Size"/>.</summary>
            <remarks>Causes a format, resetting <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/> to <see langword="false"/>.</remarks>
            <returns>The size required to hold the formatted text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetLines">
            <summary>Gets a list of formatted lines, constrained to <see cref="P:Terminal.Gui.TextFormatter.Size"/>.</summary>
            <remarks>
                <para>
                    If the text needs to be formatted (if <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/> is <see langword="true"/>)
                    <see cref="M:Terminal.Gui.TextFormatter.Format"/> will be called and upon return
                    <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/> will be <see langword="false"/>.
                </para>
                <para>
                    If either of the dimensions of <see cref="P:Terminal.Gui.TextFormatter.Size"/> are zero, the text will not be formatted and no lines will
                    be returned.
                </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.TextFormatter.HotKeyChanged">
            <summary>Event invoked when the <see cref="P:Terminal.Gui.TextFormatter.HotKey"/> is changed.</summary>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.EnableNeedsFormat``1(``0)">
            <summary>Sets <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/> to <see langword="true"/> and returns the value.</summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.IsHorizontalDirection(Terminal.Gui.TextDirection)">
            <summary>Check if it is a horizontal direction</summary>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.IsVerticalDirection(Terminal.Gui.TextDirection)">
            <summary>Check if it is a vertical direction</summary>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.IsLeftToRight(Terminal.Gui.TextDirection)">
            <summary>Check if it is Left to Right direction</summary>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.IsTopToBottom(Terminal.Gui.TextDirection)">
            <summary>Check if it is Top to Bottom direction</summary>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.SplitNewLine(System.String)">
            <summary>
                Splits all newlines in the <paramref name="text"/> into a list and supports both CRLF and LF, preserving the
                ending newline.
            </summary>
            <param name="text">The text.</param>
            <returns>A list of text without the newline characters.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ClipOrPad(System.String,System.Int32)">
            <summary>
                Adds trailing whitespace or truncates <paramref name="text"/> so that it fits exactly <paramref name="width"/>
                columns. Note that some unicode characters take 2+ columns
            </summary>
            <param name="text"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.WordWrapText(System.String,System.Int32,System.Boolean,System.Int32,Terminal.Gui.TextDirection,Terminal.Gui.TextFormatter)">
            <summary>Formats the provided text to fit within the width provided using word wrapping.</summary>
            <param name="text">The text to word wrap</param>
            <param name="width">The number of columns to constrain the text to</param>
            <param name="preserveTrailingSpaces">
                If <see langword="true"/> trailing spaces at the end of wrapped lines will be
                preserved. If <see langword="false"/> , trailing spaces at the end of wrapped lines will be trimmed.
            </param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <param name="textDirection">The text direction.</param>
            <param name="textFormatter"><see cref="T:Terminal.Gui.TextFormatter"/> instance to access any of his objects.</param>
            <returns>A list of word wrapped lines.</returns>
            <remarks>
                <para>This method does not do any justification.</para>
                <para>This method strips Newline ('\n' and '\r\n') sequences before processing.</para>
                <para>
                    If <paramref name="preserveTrailingSpaces"/> is <see langword="false"/> at most one space will be preserved
                    at the end of the last line.
                </para>
            </remarks>
            <returns>A list of lines.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ClipAndJustify(System.String,System.Int32,Terminal.Gui.TextAlignment,Terminal.Gui.TextDirection,System.Int32,Terminal.Gui.TextFormatter)">
            <summary>Justifies text within a specified width.</summary>
            <param name="text">The text to justify.</param>
            <param name="width">
                The number of columns to clip the text to. Text longer than <paramref name="width"/> will be
                clipped.
            </param>
            <param name="talign">Alignment.</param>
            <param name="textDirection">The text direction.</param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <param name="textFormatter"><see cref="T:Terminal.Gui.TextFormatter"/> instance to access any of his objects.</param>
            <returns>Justified and clipped text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ClipAndJustify(System.String,System.Int32,System.Boolean,Terminal.Gui.TextDirection,System.Int32,Terminal.Gui.TextFormatter)">
            <summary>Justifies text within a specified width.</summary>
            <param name="text">The text to justify.</param>
            <param name="width">
                The number of columns to clip the text to. Text longer than <paramref name="width"/> will be
                clipped.
            </param>
            <param name="justify">Justify.</param>
            <param name="textDirection">The text direction.</param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <param name="textFormatter"><see cref="T:Terminal.Gui.TextFormatter"/> instance to access any of his objects.</param>
            <returns>Justified and clipped text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Justify(System.String,System.Int32,System.Char,Terminal.Gui.TextDirection,System.Int32)">
            <summary>
                Justifies the text to fill the width provided. Space will be added between words to make the text just fit
                <c>width</c>. Spaces will not be added to the start or end.
            </summary>
            <param name="text"></param>
            <param name="width"></param>
            <param name="spaceChar">Character to replace whitespace and pad with. For debugging purposes.</param>
            <param name="textDirection">The text direction.</param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <returns>The justified text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Format(System.String,System.Int32,Terminal.Gui.TextAlignment,System.Boolean,System.Boolean,System.Int32,Terminal.Gui.TextDirection,System.Boolean,Terminal.Gui.TextFormatter)">
            <summary>Formats text into lines, applying text alignment and optionally wrapping text to new lines on word boundaries.</summary>
            <param name="text"></param>
            <param name="width">The number of columns to constrain the text to for word wrapping and clipping.</param>
            <param name="talign">Specifies how the text will be aligned horizontally.</param>
            <param name="wordWrap">
                If <see langword="true"/>, the text will be wrapped to new lines no longer than
                <paramref name="width"/>. If <see langword="false"/>, forces text to fit a single line. Line breaks are converted
                to spaces. The text will be clipped to <paramref name="width"/>.
            </param>
            <param name="preserveTrailingSpaces">
                If <see langword="true"/> trailing spaces at the end of wrapped lines will be
                preserved. If <see langword="false"/> , trailing spaces at the end of wrapped lines will be trimmed.
            </param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <param name="textDirection">The text direction.</param>
            <param name="multiLine">If <see langword="true"/> new lines are allowed.</param>
            <param name="textFormatter"><see cref="T:Terminal.Gui.TextFormatter"/> instance to access any of his objects.</param>
            <returns>A list of word wrapped lines.</returns>
            <remarks>
                <para>An empty <paramref name="text"/> string will result in one empty line.</para>
                <para>If <paramref name="width"/> is 0, a single, empty line will be returned.</para>
                <para>If <paramref name="width"/> is int.MaxValue, the text will be formatted to the maximum width possible.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Format(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,Terminal.Gui.TextDirection,System.Boolean,Terminal.Gui.TextFormatter)">
            <summary>Formats text into lines, applying text alignment and optionally wrapping text to new lines on word boundaries.</summary>
            <param name="text"></param>
            <param name="width">The number of columns to constrain the text to for word wrapping and clipping.</param>
            <param name="justify">Specifies whether the text should be justified.</param>
            <param name="wordWrap">
                If <see langword="true"/>, the text will be wrapped to new lines no longer than
                <paramref name="width"/>. If <see langword="false"/>, forces text to fit a single line. Line breaks are converted
                to spaces. The text will be clipped to <paramref name="width"/>.
            </param>
            <param name="preserveTrailingSpaces">
                If <see langword="true"/> trailing spaces at the end of wrapped lines will be
                preserved. If <see langword="false"/> , trailing spaces at the end of wrapped lines will be trimmed.
            </param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <param name="textDirection">The text direction.</param>
            <param name="multiLine">If <see langword="true"/> new lines are allowed.</param>
            <param name="textFormatter"><see cref="T:Terminal.Gui.TextFormatter"/> instance to access any of his objects.</param>
            <returns>A list of word wrapped lines.</returns>
            <remarks>
                <para>An empty <paramref name="text"/> string will result in one empty line.</para>
                <para>If <paramref name="width"/> is 0, a single, empty line will be returned.</para>
                <para>If <paramref name="width"/> is int.MaxValue, the text will be formatted to the maximum width possible.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetLineCount(System.String,System.Int32)">
            <summary>Returns the number of lines needed to render the specified text given the width.</summary>
            <remarks>Calls <see cref="M:Terminal.Gui.TextFormatter.Format"/>.</remarks>
            <returns>Number of lines.</returns>
            <param name="text">Text, may contain newlines.</param>
            <param name="width">The minimum width for the text.</param>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetColumnsRequiredForVerticalText(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Int32)">
            <summary>
                Returns the number of columns required to render <paramref name="lines"/> oriented vertically.
            </summary>
            <remarks>
                This API will return incorrect results if the text includes glyphs whose width is dependent on surrounding
                glyphs (e.g. Arabic).
            </remarks>
            <param name="lines">The lines.</param>
            <param name="startLine">The line in the list to start with (any lines before will be ignored).</param>
            <param name="linesCount">The number of lines to process (if less than <c>lines.Count</c>, any lines after will be ignored).</param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <returns>The width required.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetWidestLineLength(System.String,System.Int32)">
            <summary>
                Returns the number of columns in the widest line in the text, without word wrap, accounting for wide-glyphs
                (uses <see cref="M:Terminal.Gui.StringExtensions.GetColumns(System.String)"/>). <paramref name="text"/> if it contains newlines.
            </summary>
            <remarks>
                This API will return incorrect results if the text includes glyphs who's width is dependent on surrounding
                glyphs (e.g. Arabic).
            </remarks>
            <param name="text">Text, may contain newlines.</param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <returns>The length of the longest line.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetSumMaxCharWidth(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                Gets the maximum number of columns from the text based on the <paramref name="startIndex"/> and the
                <paramref name="length"/>.
            </summary>
            <remarks>
                This API will return incorrect results if the text includes glyphs who's width is dependent on surrounding
                glyphs (e.g. Arabic).
            </remarks>
            <param name="text">The text.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <returns>The maximum characters width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetLengthThatFits(System.String,System.Int32,System.Int32,Terminal.Gui.TextDirection)">
            <summary>Gets the number of the Runes in the text that will fit in <paramref name="width"/>.</summary>
            <remarks>
                This API will return incorrect results if the text includes glyphs who's width is dependent on surrounding
                glyphs (e.g. Arabic).
            </remarks>
            <param name="text">The text.</param>
            <param name="width">The width.</param>
            <param name="tabWidth">The width used for a tab.</param>
            <param name="textDirection">The text direction.</param>
            <returns>The index of the text that fit the width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetLengthThatFits(System.Collections.Generic.List{System.Text.Rune},System.Int32,System.Int32,Terminal.Gui.TextDirection)">
            <summary>Gets the number of the Runes in a list of Runes that will fit in <paramref name="width"/>.</summary>
            <remarks>
                This API will return incorrect results if the text includes glyphs who's width is dependent on surrounding
                glyphs (e.g. Arabic).
            </remarks>
            <param name="runes">The list of runes.</param>
            <param name="width">The width.</param>
            <param name="tabWidth">The width used for a tab.</param>
            <param name="textDirection">The text direction.</param>
            <returns>The index of the last Rune in <paramref name="runes"/> that fit in <paramref name="width"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetMaxColsForWidth(System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>Gets the index position from the list based on the <paramref name="width"/>.</summary>
            <remarks>
                This API will return incorrect results if the text includes glyphs who's width is dependent on surrounding
                glyphs (e.g. Arabic).
            </remarks>
            <param name="lines">The lines.</param>
            <param name="width">The width.</param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <returns>The index of the list that fit the width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.CalcRect(System.Int32,System.Int32,System.String,Terminal.Gui.TextDirection,System.Int32)">
            <summary>Calculates the rectangle required to hold text, assuming no word wrapping or justification.</summary>
            <remarks>
                This API will return incorrect results if the text includes glyphs who's width is dependent on surrounding
                glyphs (e.g. Arabic).
            </remarks>
            <param name="x">The x location of the rectangle</param>
            <param name="y">The y location of the rectangle</param>
            <param name="text">The text to measure</param>
            <param name="direction">The text direction.</param>
            <param name="tabWidth">The number of columns used for a tab.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.FindHotKey(System.String,System.Text.Rune,System.Int32@,Terminal.Gui.Key@,System.Boolean)">
            <summary>Finds the HotKey and its location in text.</summary>
            <param name="text">The text to look in.</param>
            <param name="hotKeySpecifier">The HotKey specifier (e.g. '_') to look for.</param>
            <param name="hotPos">Outputs the Rune index into <c>text</c>.</param>
            <param name="hotKey">Outputs the hotKey. <see cref="P:Terminal.Gui.Key.Empty"/> if not found.</param>
            <param name="firstUpperCase">
                If <c>true</c> the legacy behavior of identifying the first upper case character as the
                HotKey will be enabled. Regardless of the value of this parameter, <c>hotKeySpecifier</c> takes precedence.
                Defaults to <see langword="false"/>.
            </param>
            <returns><c>true</c> if a HotKey was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ReplaceHotKeyWithTag(System.String,System.Int32)">
            <summary>
                Replaces the Rune at the index specified by the <c>hotPos</c> parameter with a tag identifying it as the
                hotkey.
            </summary>
            <param name="text">The text to tag the hotkey in.</param>
            <param name="hotPos">The Rune index of the hotkey in <c>text</c>.</param>
            <returns>The text with the hotkey tagged.</returns>
            <remarks>The returned string will not render correctly without first un-doing the tag. To undo the tag, search for</remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.RemoveHotKeySpecifier(System.String,System.Int32,System.Text.Rune)">
            <summary>Removes the hotkey specifier from text.</summary>
            <param name="text">The text to manipulate.</param>
            <param name="hotKeySpecifier">The hot-key specifier (e.g. '_') to look for.</param>
            <param name="hotPos">Returns the position of the hot-key in the text. -1 if not found.</param>
            <returns>The input text with the hotkey specifier ('_') removed.</returns>
        </member>
        <member name="T:Terminal.Gui.VerticalTextAlignment">
            <summary>Vertical text alignment enumeration, controls how text is displayed.</summary>
        </member>
        <member name="F:Terminal.Gui.VerticalTextAlignment.Top">
            <summary>The text will be top-aligned.</summary>
        </member>
        <member name="F:Terminal.Gui.VerticalTextAlignment.Bottom">
            <summary>The text will be bottom-aligned.</summary>
        </member>
        <member name="F:Terminal.Gui.VerticalTextAlignment.Middle">
            <summary>The text will centered vertically.</summary>
        </member>
        <member name="F:Terminal.Gui.VerticalTextAlignment.Justified">
            <summary>
                The text will be justified (spaces will be added to existing spaces such that the text fills the container
                vertically).
            </summary>
        </member>
        <member name="T:Terminal.Gui.Timeout">
            <summary>Provides data for timers running manipulation.</summary>
        </member>
        <member name="F:Terminal.Gui.Timeout.Callback">
            <summary>The function that will be invoked.</summary>
        </member>
        <member name="F:Terminal.Gui.Timeout.Span">
            <summary>Time to wait before invoke the callback.</summary>
        </member>
        <member name="T:Terminal.Gui.TimeoutEventArgs">
            <summary><see cref="T:System.EventArgs"/> for timeout events (e.g. <see cref="E:Terminal.Gui.MainLoop.TimeoutAdded"/>)</summary>
        </member>
        <member name="M:Terminal.Gui.TimeoutEventArgs.#ctor(Terminal.Gui.Timeout,System.Int64)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.TimeoutEventArgs"/> class.</summary>
            <param name="timeout"></param>
            <param name="ticks"></param>
        </member>
        <member name="P:Terminal.Gui.TimeoutEventArgs.Ticks">
            <summary>Gets the <see cref="P:System.DateTime.Ticks"/> in UTC time when the <see cref="P:Terminal.Gui.TimeoutEventArgs.Timeout"/> will next execute after.</summary>
        </member>
        <member name="P:Terminal.Gui.TimeoutEventArgs.Timeout">
            <summary>Gets the timeout callback handler</summary>
        </member>
        <member name="T:Terminal.Gui.Adornment">
            <summary>
                Adornments are a special form of <see cref="T:Terminal.Gui.View"/> that appear outside the <see cref="P:Terminal.Gui.View.Viewport"/>:
                <see cref="T:Terminal.Gui.Margin"/>, <see cref="T:Terminal.Gui.Border"/>, and <see cref="T:Terminal.Gui.Padding"/>. They are defined using the
                <see cref="P:Terminal.Gui.Adornment.Thickness"/> class, which specifies the thickness of the sides of a rectangle.
            </summary>
            <remarsk>
                <para>
                    Each of <see cref="T:Terminal.Gui.Margin"/>, <see cref="T:Terminal.Gui.Border"/>, and <see cref="T:Terminal.Gui.Padding"/> has slightly different
                    behavior relative to <see cref="T:Terminal.Gui.ColorScheme"/>, <see cref="M:Terminal.Gui.View.SetFocus"/>, keyboard input, and
                    mouse input. Each can be customized by manipulating their Subviews.
                </para>
            </remarsk>
        </member>
        <member name="M:Terminal.Gui.Adornment.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Adornment.#ctor(Terminal.Gui.View)">
            <summary>Constructs a new adornment for the view specified by <paramref name="parent"/>.</summary>
            <param name="parent"></param>
        </member>
        <member name="P:Terminal.Gui.Adornment.Parent">
            <summary>The Parent of this Adornment (the View this Adornment surrounds).</summary>
            <remarks>
                Adornments are distinguished from typical View classes in that they are not sub-views, but have a parent/child
                relationship with their containing View.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Adornment.Thickness">
            <summary>Defines the rectangle that the <see cref="T:Terminal.Gui.Adornment"/> will use to draw its content.</summary>
        </member>
        <member name="E:Terminal.Gui.Adornment.ThicknessChanged">
            <summary>Fired whenever the <see cref="P:Terminal.Gui.Adornment.Thickness"/> property changes.</summary>
        </member>
        <member name="M:Terminal.Gui.Adornment.OnThicknessChanged(Terminal.Gui.Thickness)">
            <summary>Called whenever the <see cref="P:Terminal.Gui.Adornment.Thickness"/> property changes.</summary>
        </member>
        <member name="P:Terminal.Gui.Adornment.SuperView">
            <summary>
                Adornments cannot be used as sub-views (see <see cref="P:Terminal.Gui.Adornment.Parent"/>); setting this property will throw
                <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Adornment.Viewport">
            <summary>
                Gets the rectangle that describes the area of the Adornment. The Location is always (0,0).
                The size is the size of the <see cref="P:Terminal.Gui.View.Frame"/>.
            </summary>
            <remarks>
                The Viewport of an Adornment cannot be modified. Attempting to set this property will throw an
                <see cref="T:System.InvalidOperationException"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Adornment.FrameToScreen">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Adornment.ScreenToFrame(System.Drawing.Point@)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Adornment.OnDrawAdornments">
            <summary>Does nothing for Adornment</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Adornment.OnDrawContent(System.Drawing.Rectangle)">
            <summary>Redraws the Adornments that comprise the <see cref="T:Terminal.Gui.Adornment"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.Adornment.OnRenderLineCanvas">
            <summary>Does nothing for Adornment</summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.Adornment.SuperViewRendersLineCanvas">
            <summary>
                Adornments only render to their <see cref="P:Terminal.Gui.Adornment.Parent"/>'s or Parent's SuperView's LineCanvas, so setting this
                property throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Adornment.Contains(System.Drawing.Point@)">
            <summary>
            Indicates whether the specified Parent's SuperView-relative coordinates are within the Adornment's Thickness.
            </summary>
            <remarks>
                The <paramref name="location"/> is relative to the PARENT's SuperView.
            </remarks>
            <param name="location"></param>
            <returns><see langword="true"/> if the specified Parent's SuperView-relative coordinates are within the Adornment's Thickness. </returns>
        </member>
        <member name="M:Terminal.Gui.Adornment.OnMouseEnter(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Adornment.OnMouseLeave(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.Border">
            <summary>The Border for a <see cref="T:Terminal.Gui.View"/>.</summary>
            <remarks>
                <para>
                    Renders a border around the view with the <see cref="P:Terminal.Gui.View.Title"/>. A border using <see cref="P:Terminal.Gui.Border.LineStyle"/>
                    will be drawn on the sides of <see cref="T:Terminal.Gui.Thickness"/> that are greater than zero.
                </para>
                <para>
                    The <see cref="P:Terminal.Gui.View.Title"/> of <see cref="P:Terminal.Gui.Adornment.Parent"/> will be drawn based on the value of
                    <see cref="F:Terminal.Gui.Thickness.Top"/>:
                </para>
                <para>
                    If <c>1</c>:
                    <code>
            ┌┤1234├──┐
            │        │
            └────────┘
            </code>
                </para>
                <para>
                    If <c>2</c>:
                    <code>
             ┌────┐
            ┌┤1234├──┐
            │        │
            └────────┘
            </code>
                </para>
                <para>
                    If <c>3</c>:
                    <code>
             ┌────┐
            ┌┤1234├──┐
            │└────┘  │
            │        │
            └────────┘
            </code>
                </para>
                <para/>
                <para>See the <see cref="T:Terminal.Gui.Adornment"/> class.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Border.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Border.#ctor(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Border.BeginInit">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Border.ColorScheme">
            <summary>
                The color scheme for the Border. If set to <see langword="null"/>, gets the <see cref="P:Terminal.Gui.Adornment.Parent"/>
                scheme. color scheme.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.LineStyle">
            <summary>
                Sets the style of the border by changing the <see cref="T:Terminal.Gui.Thickness"/>. This is a helper API for setting the
                <see cref="T:Terminal.Gui.Thickness"/> to <c>(1,1,1,1)</c> and setting the line style of the views that comprise the border. If
                set to <see cref="F:Terminal.Gui.LineStyle.None"/> no border will be drawn.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Border.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc />
        </member>
        <member name="M:Terminal.Gui.Border.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Border.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.Margin">
            <summary>The Margin for a <see cref="T:Terminal.Gui.View"/>.</summary>
            <remarks>
                <para>See the <see cref="T:Terminal.Gui.Adornment"/> class.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Margin.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Margin.#ctor(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Margin.ColorScheme">
            <summary>
                The color scheme for the Margin. If set to <see langword="null"/>, gets the <see cref="P:Terminal.Gui.Adornment.Parent"/>'s
                <see cref="P:Terminal.Gui.View.SuperView"/> scheme. color scheme.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Padding">
            <summary>The Padding for a <see cref="T:Terminal.Gui.View"/>.</summary>
            <remarks>
                <para>See the <see cref="T:Terminal.Gui.Adornment"/> class.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Padding.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Padding.#ctor(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Padding.ColorScheme">
            <summary>
                The color scheme for the Padding. If set to <see langword="null"/>, gets the <see cref="P:Terminal.Gui.Adornment.Parent"/>
                scheme. color scheme.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Padding.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <summary>Called when a mouse event occurs within the Padding.</summary>
            <remarks>
            <para>
            The coordinates are relative to <see cref="P:Terminal.Gui.View.Viewport"/>.
            </para>
            <para>
            A mouse click on the Padding will cause the Parent to focus.
            </para>
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.Pos">
            <summary>
                Describes the position of a <see cref="T:Terminal.Gui.View"/> which can be an absolute value, a percentage, centered, or
                relative to the ending dimension. Integer values are implicitly convertible to an absolute <see cref="T:Terminal.Gui.Pos"/>. These
                objects are created using the static methods Percent, AnchorEnd, and Center. The <see cref="T:Terminal.Gui.Pos"/> objects can be
                combined with the addition and subtraction operators.
            </summary>
            <remarks>
                <para>Use the <see cref="T:Terminal.Gui.Pos"/> objects on the X or Y properties of a view to control the position.</para>
                <para>
                    These can be used to set the absolute position, when merely assigning an integer value (via the implicit
                    integer to <see cref="T:Terminal.Gui.Pos"/> conversion), and they can be combined to produce more useful layouts, like:
                    Pos.Center - 3, which would shift the position of the <see cref="T:Terminal.Gui.View"/> 3 characters to the left after
                    centering for example.
                </para>
                <para>
                    Reference coordinates of another view by using the methods Left(View), Right(View), Bottom(View), Top(View).
                    The X(View) and Y(View) are aliases to Left(View) and Top(View) respectively.
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Pos Object</term> <description>Description</description>
                        </listheader>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.Function(System.Func{System.Int32})"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that computes the position by executing the provided
                                function. The function will be called every time the position is needed.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.Percent(System.Single)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that is a percentage of the width or height of the
                                SuperView.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.AnchorEnd"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that is anchored to the end (right side or bottom) of
                                the dimension, useful to flush the layout from the right or bottom.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.Center"/>
                            </term>
                            <description>Creates a <see cref="T:Terminal.Gui.Pos"/> object that can be used to center the <see cref="T:Terminal.Gui.View"/>.</description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.At(System.Int32)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that is an absolute position based on the specified
                                integer value.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.Left(Terminal.Gui.View)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Left (X) position of the specified
                                <see cref="T:Terminal.Gui.View"/>.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.X(Terminal.Gui.View)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Left (X) position of the specified
                                <see cref="T:Terminal.Gui.View"/>.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.Top(Terminal.Gui.View)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Top (Y) position of the specified
                                <see cref="T:Terminal.Gui.View"/>.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.Y(Terminal.Gui.View)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Top (Y) position of the specified
                                <see cref="T:Terminal.Gui.View"/>.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.Right(Terminal.Gui.View)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Right (X+Width) coordinate of the
                                specified <see cref="T:Terminal.Gui.View"/>.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Pos.Bottom(Terminal.Gui.View)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Bottom (Y+Height) coordinate of the
                                specified <see cref="T:Terminal.Gui.View"/>
                            </description>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Pos.AnchorEnd">
            <summary>
                Creates a <see cref="T:Terminal.Gui.Pos"/> object that is anchored to the end (right side or
                bottom) of the SuperView, minus the respective dimension of the View. This is equivalent to using
                <see cref="M:Terminal.Gui.Pos.AnchorEnd(System.Int32)"/>,
                with an offset equivalent to the View's respective dimension.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> object anchored to the end (the bottom or the right side) minus the View's dimension.</returns>
            <example>
                This sample shows how align a <see cref="T:Terminal.Gui.Button"/> to the bottom-right the SuperView.
                <code>
            anchorButton.X = Pos.AnchorEnd ();
            anchorButton.Y = Pos.AnchorEnd ();
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.AnchorEnd(System.Int32)">
            <summary>
                Creates a <see cref="T:Terminal.Gui.Pos"/> object that is anchored to the end (right side or bottom) of the SuperView,
                useful to flush the layout from the right or bottom. See also <see cref="M:Terminal.Gui.Pos.AnchorEnd"/>, which uses the view
                dimension to ensure the view is fully visible.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> object anchored to the end (the bottom or the right side).</returns>
            <param name="offset">The view will be shifted left or up by the amount specified.</param>
            <example>
                This sample shows how align a 10 column wide <see cref="T:Terminal.Gui.Button"/> to the bottom-right the SuperView.
                <code>
            anchorButton.X = Pos.AnchorEnd (10);
            anchorButton.Y = 1
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.At(System.Int32)">
            <summary>Creates a <see cref="T:Terminal.Gui.Pos"/> object that is an absolute position based on the specified integer value.</summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Pos"/>.</returns>
            <param name="n">The value to convert to the <see cref="T:Terminal.Gui.Pos"/>.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Center">
            <summary>Creates a <see cref="T:Terminal.Gui.Pos"/> object that can be used to center the <see cref="T:Terminal.Gui.View"/>.</summary>
            <returns>The center Pos.</returns>
            <example>
                This creates a <see cref="T:Terminal.Gui.TextView"/> centered horizontally, is 50% of the way down, is 30% the height, and
                is 80% the width of the <see cref="T:Terminal.Gui.View"/> it added to.
                <code>
             var textView = new TextView () {
                X = Pos.Center (),
                Y = Pos.Percent (50),
                Width = Dim.Percent (80),
                Height = Dim.Percent (30),
             };
             </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="other">The object to compare with the current object. </param>
            <returns>
                <see langword="true"/> if the specified object  is equal to the current object; otherwise,
                <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Pos.Function(System.Func{System.Int32})">
            <summary>
                Creates a <see cref="T:Terminal.Gui.Pos"/> object that computes the position by executing the provided function. The function
                will be called every time the position is needed.
            </summary>
            <param name="function">The function to be executed.</param>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> returned from the function.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.op_Addition(Terminal.Gui.Pos,Terminal.Gui.Pos)">
            <summary>Adds a <see cref="T:Terminal.Gui.Pos"/> to a <see cref="T:Terminal.Gui.Pos"/>, yielding a new <see cref="T:Terminal.Gui.Pos"/>.</summary>
            <param name="left">The first <see cref="T:Terminal.Gui.Pos"/> to add.</param>
            <param name="right">The second <see cref="T:Terminal.Gui.Pos"/> to add.</param>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that is the sum of the values of <c>left</c> and <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.op_Implicit(System.Int32)~Terminal.Gui.Pos">
            <summary>Creates an Absolute <see cref="T:Terminal.Gui.Pos"/> from the specified integer value.</summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Pos"/>.</returns>
            <param name="n">The value to convert to the <see cref="T:Terminal.Gui.Pos"/> .</param>
        </member>
        <member name="M:Terminal.Gui.Pos.op_Subtraction(Terminal.Gui.Pos,Terminal.Gui.Pos)">
            <summary>
                Subtracts a <see cref="T:Terminal.Gui.Pos"/> from a <see cref="T:Terminal.Gui.Pos"/>, yielding a new
                <see cref="T:Terminal.Gui.Pos"/>.
            </summary>
            <param name="left">The <see cref="T:Terminal.Gui.Pos"/> to subtract from (the minuend).</param>
            <param name="right">The <see cref="T:Terminal.Gui.Pos"/> to subtract (the subtrahend).</param>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that is the <c>left</c> minus <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.Percent(System.Single)">
            <summary>Creates a percentage <see cref="T:Terminal.Gui.Pos"/> object</summary>
            <returns>The percent <see cref="T:Terminal.Gui.Pos"/> object.</returns>
            <param name="percent">A value between 0 and 100 representing the percentage.</param>
            <example>
                This creates a <see cref="T:Terminal.Gui.TextField"/> centered horizontally, is 50% of the way down, is 30% the height, and
                is 80% the width of the <see cref="T:Terminal.Gui.View"/> it added to.
                <code>
             var textView = new TextField {
                 X = Pos.Center (),
                 Y = Pos.Percent (50),
                 Width = Dim.Percent (80),
                 Height = Dim.Percent (30),
             };
             </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.Top(Terminal.Gui.View)">
            <summary>Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Top (Y) position of the specified <see cref="T:Terminal.Gui.View"/>.</summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Y(Terminal.Gui.View)">
            <summary>Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Top (Y) position of the specified <see cref="T:Terminal.Gui.View"/>.</summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Left(Terminal.Gui.View)">
            <summary>Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Left (X) position of the specified <see cref="T:Terminal.Gui.View"/>.</summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.X(Terminal.Gui.View)">
            <summary>Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Left (X) position of the specified <see cref="T:Terminal.Gui.View"/>.</summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Bottom(Terminal.Gui.View)">
            <summary>
                Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Bottom (Y+Height) coordinate of the specified
                <see cref="T:Terminal.Gui.View"/>
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Right(Terminal.Gui.View)">
            <summary>
                Creates a <see cref="T:Terminal.Gui.Pos"/> object that tracks the Right (X+Width) coordinate of the specified
                <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Anchor(System.Int32)">
            <summary>
                Gets a position that is anchored to a certain point in the layout. This method is typically used
                internally by the layout system to determine where a View should be positioned.
            </summary>
            <param name="width">The width of the area where the View is being positioned (Superview.ContentSize).</param>
            <returns>
                An integer representing the calculated position. The way this position is calculated depends on the specific
                subclass of Pos that is used. For example, PosAbsolute returns a fixed position, PosAnchorEnd returns a
                position that is anchored to the end of the layout, and so on.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Pos.Calculate(System.Int32,Terminal.Gui.Dim,Terminal.Gui.View,Terminal.Gui.Dim.Dimension)">
            <summary>
                Calculates and returns the position of a <see cref="T:Terminal.Gui.View"/> object. It takes into account the dimension of the
                superview and the dimension of the view itself.
            </summary>
            <param name="superviewDimension">
                The dimension of the superview. This could be the width for x-coordinate calculation or the
                height for y-coordinate calculation.
            </param>
            <param name="dim">The dimension of the View. It could be the current width or height.</param>
            <param name="us">The View that holds this Pos object.</param>
            <param name="dimension">Width or Height</param>
            <returns>
                The calculated position of the View. The way this position is calculated depends on the specific subclass of Pos
                that
                is used.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Pos.ReferencesOtherViews">
            <summary>
            Diagnostics API to determine if this Pos object references other views.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.Pos.PosAnchorEnd.UseDimForOffset">
            <summary>
                If true, the offset is the width of the view, if false, the offset is the offset value.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Pos.PosCombine.ReferencesOtherViews">
            <summary>
            Diagnostics API to determine if this Pos object references other views.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Pos.Side">
            <summary>
            Describes which side of the view to use for the position.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Pos.Side.Left">
            <summary>
            The left (X) side of the view.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Pos.Side.Top">
            <summary>
            The top (Y) side of the view.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Pos.Side.Right">
            <summary>
            The right (X + Width) side of the view.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Pos.Side.Bottom">
            <summary>
            The bottom (Y + Height) side of the view.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Pos.PosView.ReferencesOtherViews">
            <summary>
            Diagnostics API to determine if this Pos object references other views.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Dim">
            <summary>
                <para>
                    A Dim object describes the dimensions of a <see cref="T:Terminal.Gui.View"/>. Dim is the type of the
                    <see cref="P:Terminal.Gui.View.Width"/> and <see cref="P:Terminal.Gui.View.Height"/> properties of <see cref="T:Terminal.Gui.View"/>. Dim objects enable
                    Computed Layout (see <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>) to automatically manage the dimensions of a view.
                </para>
                <para>
                    Integer values are implicitly convertible to an absolute <see cref="T:Terminal.Gui.Dim"/>. These objects are created using
                    the static methods described below. The <see cref="T:Terminal.Gui.Dim"/> objects can be combined with the addition and
                    subtraction operators.
                </para>
            </summary>
            <remarks>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Dim Object</term> <description>Description</description>
                        </listheader>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Dim.Auto(Terminal.Gui.Dim.DimAutoStyle,Terminal.Gui.Dim,Terminal.Gui.Dim)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Dim"/> object that automatically sizes the view to fit
                                the view's Text, SubViews, or ContentArea.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Dim.Function(System.Func{System.Int32})"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Dim"/> object that computes the dimension by executing the provided
                                function. The function will be called every time the dimension is needed.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Dim.Percent(System.Single,System.Boolean)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Dim"/> object that is a percentage of the width or height of the
                                SuperView.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Dim.Fill(System.Int32)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Dim"/> object that fills the dimension from the View's X position
                                to the end of the super view's width, leaving the specified number of columns for a margin.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Dim.Width(Terminal.Gui.View)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Dim"/> object that tracks the Width of the specified
                                <see cref="T:Terminal.Gui.View"/>.
                            </description>
                        </item>
                        <item>
                            <term>
                                <see cref="M:Terminal.Gui.Dim.Height(Terminal.Gui.View)"/>
                            </term>
                            <description>
                                Creates a <see cref="T:Terminal.Gui.Dim"/> object that tracks the Height of the specified
                                <see cref="T:Terminal.Gui.View"/>.
                            </description>
                        </item>
                    </list>
                </para>
                <para></para>
            </remarks>
        </member>
        <member name="T:Terminal.Gui.Dim.DimAutoStyle">
            <summary>
                Specifies how <see cref="T:Terminal.Gui.Dim.DimAuto"/> will compute the dimension.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dim.DimAutoStyle.Auto">
            <summary>
                The dimension will be computed using both the view's <see cref="P:Terminal.Gui.View.Text"/> and
                <see cref="P:Terminal.Gui.View.Subviews"/> (whichever is larger).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dim.DimAutoStyle.Content">
            <summary>
                The dimensions will be computed based on the View's non-Text content.
            <para>
                If <see cref="P:Terminal.Gui.View.ContentSize"/> is explicitly set (is not <see langword="null"/>) then <see cref="P:Terminal.Gui.View.ContentSize"/>
                will be used to determine the dimension.
            </para>
            <para>
                Otherwise, the Subview in <see cref="P:Terminal.Gui.View.Subviews"/> with the largest corresponding position plus dimension
                will determine the dimension.
            </para>
            <para>
                The corresponding dimension of the view's <see cref="P:Terminal.Gui.View.Text"/> will be ignored.
            </para>
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dim.DimAutoStyle.Text">
            <summary>
            <para>
                The corresponding dimension of the view's <see cref="P:Terminal.Gui.View.Text"/>, formatted using the
                <see cref="P:Terminal.Gui.View.TextFormatter"/> settings,
                will be used to determine the dimension.
            </para>
            <para>
                The corresponding dimensions of the <see cref="P:Terminal.Gui.View.Subviews"/> will be ignored.
            </para>
            </summary>
        </member>
        <member name="T:Terminal.Gui.Dim.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dim.Dimension.None">
            <summary>
            No dimension specified.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dim.Dimension.Height">
            <summary>
            The height dimension.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dim.Dimension.Width">
            <summary>
            The width dimension.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Dim.Auto(Terminal.Gui.Dim.DimAutoStyle,Terminal.Gui.Dim,Terminal.Gui.Dim)">
            <summary>
                Creates a <see cref="T:Terminal.Gui.Dim"/> object that automatically sizes the view to fit all the view's SubViews and/or Text.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:Terminal.Gui.Dim.DimAutoStyle"/>.
                </para>
            </remarks>
            <example>
                This initializes a <see cref="T:Terminal.Gui.View"/> with two SubViews. The view will be automatically sized to fit the two
                SubViews.
            <code>
            var button = new Button () { Text = "Click Me!", X = 1, Y = 1, Width = 10, Height = 1 };
            var textField = new TextField { Text = "Type here", X = 1, Y = 2, Width = 20, Height = 1 };
            var view = new Window () { Title = "MyWindow", X = 0, Y = 0, Width = Dim.Auto (), Height = Dim.Auto () };
            view.Add (button, textField);
            </code>
            </example>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> object.</returns>
            <param name="style">
                Specifies how <see cref="T:Terminal.Gui.Dim.DimAuto"/> will compute the dimension. The default is <see cref="F:Terminal.Gui.Dim.DimAutoStyle.Auto"/>.
            </param>
            <param name="min">Specifies the minimum dimension that view will be automatically sized to.</param>
            <param name="max">Specifies the maximum dimension that view will be automatically sized to. NOT CURRENTLY SUPPORTED.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="other">The object to compare with the current object. </param>
            <returns>
                <see langword="true"/> if the specified object  is equal to the current object; otherwise,
                <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Dim.Fill(System.Int32)">
            <summary>
                Creates a <see cref="T:Terminal.Gui.Dim"/> object that fills the dimension, leaving the specified number of columns for a
                margin.
            </summary>
            <returns>The Fill dimension.</returns>
            <param name="margin">Margin to use.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.Function(System.Func{System.Int32})">
            <summary>
                Creates a function <see cref="T:Terminal.Gui.Dim"/> object that computes the dimension by executing the provided function.
                The function will be called every time the dimension is needed.
            </summary>
            <param name="function">The function to be executed.</param>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> returned from the function.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.Height(Terminal.Gui.View)">
            <summary>Creates a <see cref="T:Terminal.Gui.Dim"/> object that tracks the Height of the specified <see cref="T:Terminal.Gui.View"/>.</summary>
            <returns>The height <see cref="T:Terminal.Gui.Dim"/> of the other <see cref="T:Terminal.Gui.View"/>.</returns>
            <param name="view">The view that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.op_Addition(Terminal.Gui.Dim,Terminal.Gui.Dim)">
            <summary>Adds a <see cref="T:Terminal.Gui.Dim"/> to a <see cref="T:Terminal.Gui.Dim"/>, yielding a new <see cref="T:Terminal.Gui.Dim"/>.</summary>
            <param name="left">The first <see cref="T:Terminal.Gui.Dim"/> to add.</param>
            <param name="right">The second <see cref="T:Terminal.Gui.Dim"/> to add.</param>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> that is the sum of the values of <c>left</c> and <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.op_Implicit(System.Int32)~Terminal.Gui.Dim">
            <summary>Creates an Absolute <see cref="T:Terminal.Gui.Dim"/> from the specified integer value.</summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Dim"/>.</returns>
            <param name="n">The value to convert to the pos.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.op_Subtraction(Terminal.Gui.Dim,Terminal.Gui.Dim)">
            <summary>
                Subtracts a <see cref="T:Terminal.Gui.Dim"/> from a <see cref="T:Terminal.Gui.Dim"/>, yielding a new
                <see cref="T:Terminal.Gui.Dim"/>.
            </summary>
            <param name="left">The <see cref="T:Terminal.Gui.Dim"/> to subtract from (the minuend).</param>
            <param name="right">The <see cref="T:Terminal.Gui.Dim"/> to subtract (the subtrahend).</param>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> that is the <c>left</c> minus <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.Percent(System.Single,System.Boolean)">
            <summary>Creates a percentage <see cref="T:Terminal.Gui.Dim"/> object that is a percentage of the width or height of the SuperView.</summary>
            <returns>The percent <see cref="T:Terminal.Gui.Dim"/> object.</returns>
            <param name="percent">A value between 0 and 100 representing the percentage.</param>
            <param name="usePosition">
                If <see langword="true"/> the dimension is computed using the View's position (<see cref="P:Terminal.Gui.View.X"/> or
                <see cref="P:Terminal.Gui.View.Y"/>).
                If <see langword="false"/> the dimension is computed using the View's <see cref="P:Terminal.Gui.View.ContentSize"/>.
            </param>
            <example>
                This initializes a <see cref="T:Terminal.Gui.TextField"/> that will be centered horizontally, is 50% of the way down, is 30% the
                height,
                and is 80% the width of the SuperView.
                <code>
             var textView = new TextField {
                X = Pos.Center (),
                Y = Pos.Percent (50),
                Width = Dim.Percent (80),
                Height = Dim.Percent (30),
             };
             </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Dim.Sized(System.Int32)">
            <summary>Creates an Absolute <see cref="T:Terminal.Gui.Dim"/> from the specified integer value.</summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Dim"/>.</returns>
            <param name="n">The value to convert to the <see cref="T:Terminal.Gui.Dim"/>.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.Width(Terminal.Gui.View)">
            <summary>Creates a <see cref="T:Terminal.Gui.Dim"/> object that tracks the Width of the specified <see cref="T:Terminal.Gui.View"/>.</summary>
            <returns>The width <see cref="T:Terminal.Gui.Dim"/> of the other <see cref="T:Terminal.Gui.View"/>.</returns>
            <param name="view">The view that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.Anchor(System.Int32)">
            <summary>
                Gets a dimension that is anchored to a certain point in the layout.
                This method is typically used internally by the layout system to determine the size of a View.
            </summary>
            <param name="width">The width of the area where the View is being sized (Superview.ContentSize).</param>
            <returns>
                An integer representing the calculated dimension. The way this dimension is calculated depends on the specific
                subclass of Dim that is used. For example, DimAbsolute returns a fixed dimension, DimFactor returns a
                dimension that is a certain percentage of the super view's size, and so on.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Dim.Calculate(System.Int32,System.Int32,Terminal.Gui.View,Terminal.Gui.Dim.Dimension)">
            <summary>
                Calculates and returns the dimension of a <see cref="T:Terminal.Gui.View"/> object. It takes into account the location of the
                <see cref="T:Terminal.Gui.View"/>, it's SuperView's ContentSize, and whether it should automatically adjust its size based on its content.
            </summary>
            <param name="location">
                The starting point from where the size calculation begins. It could be the left edge for width calculation or the
                top edge for height calculation.
            </param>
            <param name="superviewContentSize">The size of the SuperView's content. It could be width or height.</param>
            <param name="us">The View that holds this Pos object.</param>
            <param name="dimension">Width or Height</param>
            <returns>
                The calculated size of the View. The way this size is calculated depends on the specific subclass of Dim that
                is used.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Dim.ReferencesOtherViews">
            <summary>
            Diagnostics API to determine if this Dim object references other views.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Dim.DimAuto">
            <summary>
                A <see cref="T:Terminal.Gui.Dim"/> object that automatically sizes the view to fit all the view's SubViews and/or Text.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:Terminal.Gui.Dim.DimAutoStyle"/>.
                </para>
            </remarks>
            <param name="style">
                Specifies how <see cref="T:Terminal.Gui.Dim.DimAuto"/> will compute the dimension. The default is <see cref="F:Terminal.Gui.Dim.DimAutoStyle.Auto"/>.
            </param>
            <param name="min">Specifies the minimum dimension that view will be automatically sized to.</param>
            <param name="max">Specifies the maximum dimension that view will be automatically sized to. NOT CURRENTLY SUPPORTED.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.DimAuto.#ctor(Terminal.Gui.Dim.DimAutoStyle,Terminal.Gui.Dim,Terminal.Gui.Dim)">
            <summary>
                A <see cref="T:Terminal.Gui.Dim"/> object that automatically sizes the view to fit all the view's SubViews and/or Text.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:Terminal.Gui.Dim.DimAutoStyle"/>.
                </para>
            </remarks>
            <param name="style">
                Specifies how <see cref="T:Terminal.Gui.Dim.DimAuto"/> will compute the dimension. The default is <see cref="F:Terminal.Gui.Dim.DimAutoStyle.Auto"/>.
            </param>
            <param name="min">Specifies the minimum dimension that view will be automatically sized to.</param>
            <param name="max">Specifies the maximum dimension that view will be automatically sized to. NOT CURRENTLY SUPPORTED.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.DimAuto.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Terminal.Gui.Dim.DimAuto.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Terminal.Gui.Dim.DimAuto.ToString">
            <inheritdoc />
        </member>
        <member name="M:Terminal.Gui.Dim.DimAuto.ReferencesOtherViews">
            <summary>
            Diagnostics API to determine if this Dim object references other views.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Dim.DimCombine.ReferencesOtherViews">
            <summary>
            Diagnostics API to determine if this Dim object references other views.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.SizeChangedEventArgs">
            <summary>Args for events about Size (e.g. Resized)</summary>
        </member>
        <member name="M:Terminal.Gui.SizeChangedEventArgs.#ctor(System.Nullable{System.Drawing.Size})">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.SizeChangedEventArgs"/> class.</summary>
            <param name="size"></param>
        </member>
        <member name="P:Terminal.Gui.SizeChangedEventArgs.Cancel">
            <summary>Set to <see langword="true"/> to cause the resize to be cancelled, if appropriate.</summary>
        </member>
        <member name="P:Terminal.Gui.SizeChangedEventArgs.Size">
            <summary>Gets the size the event describes.  This should reflect the new/current size after the event resolved.</summary>
        </member>
        <member name="T:Terminal.Gui.LayoutStyle">
            <summary>
                <para>Indicates the LayoutStyle for the <see cref="T:Terminal.Gui.View"/>.</para>
                <para>
                    If Absolute, the <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and
                    <see cref="P:Terminal.Gui.View.Height"/> objects are all absolute values and are not relative. The position and size of the
                    view is described by <see cref="P:Terminal.Gui.View.Frame"/>.
                </para>
                <para>
                    If Computed, one or more of the <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, or
                    <see cref="P:Terminal.Gui.View.Height"/> objects are relative to the <see cref="P:Terminal.Gui.View.SuperView"/> and are computed at layout
                    time.
                </para>
            </summary>
        </member>
        <member name="F:Terminal.Gui.LayoutStyle.Absolute">
            <summary>
                Indicates the <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and
                <see cref="P:Terminal.Gui.View.Height"/> objects are all absolute values and are not relative. The position and size of the view
                is described by <see cref="P:Terminal.Gui.View.Frame"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.LayoutStyle.Computed">
            <summary>
                Indicates one or more of the <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, or
                <see cref="P:Terminal.Gui.View.Height"/>
                objects are relative to the <see cref="P:Terminal.Gui.View.SuperView"/> and are computed at layout time.  The position and size of
                the
                view
                will be computed based on these objects at layout time. <see cref="P:Terminal.Gui.View.Frame"/> will provide the absolute computed
                values.
            </summary>
        </member>
        <member name="T:Terminal.Gui.View">
            <summary>
                View is the base class for all views on the screen and represents a visible element that can render itself and
                contains zero or more nested views, called SubViews. View provides basic functionality for layout, positioning, and
                drawing. In addition, View provides keyboard and mouse event handling.
            </summary>
            <remarks>
                <list type="table">
                    <listheader>
                        <term>Term</term><description>Definition</description>
                    </listheader>
                    <item>
                        <term>SubView</term>
                        <description>
                            A View that is contained in another view and will be rendered as part of the containing view's
                            ContentArea. SubViews are added to another view via the <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/>` method. A View
                            may only be a SubView of a single View.
                        </description>
                    </item>
                    <item>
                        <term>SuperView</term><description>The View that is a container for SubViews.</description>
                    </item>
                </list>
                <para>
                    Focus is a concept that is used to describe which View is currently receiving user input. Only Views that are
                    <see cref="P:Terminal.Gui.View.Enabled"/>, <see cref="P:Terminal.Gui.View.Visible"/>, and <see cref="P:Terminal.Gui.View.CanFocus"/> will receive focus.
                </para>
                <para>
                    Views that are focusable should override <see cref="M:Terminal.Gui.View.PositionCursor"/> to make sure that the cursor is
                    placed in a location that makes sense. Some terminals do not have a way of hiding the cursor, so it can be
                    distracting to have the cursor left at the last focused view. So views should make sure that they place the
                    cursor in a visually sensible place. The default implementation of <see cref="M:Terminal.Gui.View.PositionCursor"/> will place the
                    cursor at either the hotkey (if defined) or <c>0,0</c>.
                </para>
                <para>
                    The View defines the base functionality for user interface elements in Terminal.Gui. Views can contain one or
                    more subviews, can respond to user input and render themselves on the screen.
                </para>
                <para>
                    View supports two layout styles: <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> or <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
                    The style is determined by the values of <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and
                    <see cref="P:Terminal.Gui.View.Height"/>. If any of these is set to non-absolute <see cref="T:Terminal.Gui.Pos"/> or <see cref="T:Terminal.Gui.Dim"/> object,
                    then the layout style is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. Otherwise it is <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>
                    .
                </para>
                <para>
                    To create a View using Absolute layout, call a constructor that takes a Rect parameter to specify the
                    absolute position and size or simply set <see cref="P:Terminal.Gui.View.Frame"/>). To create a View using Computed layout use
                    a constructor that does not take a Rect parameter and set the X, Y, Width and Height properties on the view to
                    non-absolute values. Both approaches use coordinates that are relative to the <see cref="P:Terminal.Gui.View.Viewport"/> of the
                    <see cref="P:Terminal.Gui.View.SuperView"/> the View is added to.
                </para>
                <para>
                    Computed layout is more flexible and supports dynamic console apps where controls adjust layout as the
                    terminal resizes or other Views change size or position. The <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>,
                    <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties are <see cref="T:Terminal.Gui.Dim"/> and <see cref="T:Terminal.Gui.Pos"/> objects
                    that dynamically update the position of a view. The X and Y properties are of type <see cref="T:Terminal.Gui.Pos"/> and you
                    can use either absolute positions, percentages, or anchor points. The Width and Height properties are of type
                    <see cref="T:Terminal.Gui.Dim"/> and can use absolute position, percentages, and anchors. These are useful as they will take
                    care of repositioning views when view's adornments are resized or if the terminal size changes.
                </para>
                <para>
                    Absolute layout requires specifying coordinates and sizes of Views explicitly, and the View will typically
                    stay in a fixed position and size. To change the position and size use the <see cref="P:Terminal.Gui.View.Frame"/> property.
                </para>
                <para>
                    Subviews (child views) can be added to a View by calling the <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> method. The container of
                    a View can be accessed with the <see cref="P:Terminal.Gui.View.SuperView"/> property.
                </para>
                <para>
                    To flag a region of the View's <see cref="P:Terminal.Gui.View.Viewport"/> to be redrawn call <see cref="M:Terminal.Gui.View.SetNeedsDisplay(System.Drawing.Rectangle)"/>
                    .
                    To flag the entire view for redraw call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>.
                </para>
                <para>
                    The <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method is invoked when the size or layout of a view has changed. The default
                    processing system will keep the size and dimensions for views that use the <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>,
                    and will recompute the Adornments for the views that use <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
                </para>
                <para>
                    Views have a <see cref="P:Terminal.Gui.View.ColorScheme"/> property that defines the default colors that subviews should use for
                    rendering. This ensures that the views fit in the context where they are being used, and allows for themes to
                    be plugged in. For example, the default colors for windows and Toplevels uses a blue background, while it uses
                    a white background for dialog boxes and a red background for errors.
                </para>
                <para>
                    Subclasses should not rely on <see cref="P:Terminal.Gui.View.ColorScheme"/> being set at construction time. If a
                    <see cref="P:Terminal.Gui.View.ColorScheme"/> is not set on a view, the view will inherit the value from its
                    <see cref="P:Terminal.Gui.View.SuperView"/> and the value might only be valid once a view has been added to a SuperView.
                </para>
                <para>By using  <see cref="P:Terminal.Gui.View.ColorScheme"/> applications will work both in color as well as black and white displays.</para>
                <para>
                    Views can also opt-in to more sophisticated initialization by implementing overrides to
                    <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit"/> and <see cref="M:System.ComponentModel.ISupportInitialize.EndInit"/> which will be called
                    when the view is added to a <see cref="P:Terminal.Gui.View.SuperView"/>.
                </para>
                <para>
                    If first-run-only initialization is preferred, overrides to <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> can
                    be implemented, in which case the <see cref="T:System.ComponentModel.ISupportInitialize"/> methods will only be called if
                    <see cref="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized"/> is <see langword="false"/>. This allows proper
                    <see cref="T:Terminal.Gui.View"/> inheritance hierarchies to override base class layout code optimally by doing so only on
                    first run, instead of on every run.
                </para>
                <para>See <see href="../docs/keyboard.md">for an overview of View keyboard handling.</see></para>
                ///
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Frame">
            <summary>Gets or sets the absolute location and dimension of the view.</summary>
            <value>
                The rectangle describing absolute location and dimension of the view, in coordinates relative to the
                <see cref="P:Terminal.Gui.View.SuperView"/>'s Content, which is bound by <see cref="P:Terminal.Gui.View.ContentSize"/>.
            </value>
            <remarks>
                <para>Frame is relative to the <see cref="P:Terminal.Gui.View.SuperView"/>'s Content, which is bound by <see cref="P:Terminal.Gui.View.ContentSize"/>.</para>
                <para>
                    Setting Frame will set <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> to the
                    values of the corresponding properties of the <paramref name="value"/> parameter.
                    This causes <see cref="P:Terminal.Gui.View.LayoutStyle"/> to be <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>.
                </para>
                <para>
                    Altering the Frame will eventually (when the view hierarchy is next laid out via  see
                    cref="LayoutSubviews"/>) cause <see cref="M:Terminal.Gui.View.LayoutSubview(Terminal.Gui.View,System.Drawing.Size)"/> and
                    <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/>
                    methods to be called.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.FrameToScreen">
            <summary>Gets the <see cref="P:Terminal.Gui.View.Frame"/> with a screen-relative location.</summary>
            <returns>The location and size of the view in screen-relative coordinates.</returns>
        </member>
        <member name="M:Terminal.Gui.View.ScreenToFrame(System.Drawing.Point@)">
            <summary>
                Converts a screen-relative coordinate to a Frame-relative coordinate. Frame-relative means relative to the
                View's <see cref="P:Terminal.Gui.View.SuperView"/>'s <see cref="P:Terminal.Gui.View.Viewport"/>.
            </summary>
            <returns>The coordinate relative to the <see cref="P:Terminal.Gui.View.SuperView"/>'s <see cref="P:Terminal.Gui.View.Viewport"/>.</returns>
            <param name="location">Screen-relative coordinate.</param>
        </member>
        <member name="P:Terminal.Gui.View.X">
            <summary>Gets or sets the X position for the view (the column).</summary>
            <value>The <see cref="T:Terminal.Gui.Pos"/> object representing the X position.</value>
            <remarks>
                <para>
                    The position is relative to the <see cref="P:Terminal.Gui.View.SuperView"/>'s Content, which is bound by <see cref="P:Terminal.Gui.View.ContentSize"/>.
                </para>
                <para>
                    If set to a relative value (e.g. <see cref="M:Terminal.Gui.Pos.Center"/>) the value is indeterminate until the view has been
                    initialized ( <see cref="P:Terminal.Gui.View.IsInitialized"/> is true) and <see cref="M:Terminal.Gui.View.SetRelativeLayout(System.Nullable{System.Drawing.Size})"/> has been
                    called.
                </para>
                <para>
                    Changing this property will eventually (when the view is next drawn) cause the
                    <see cref="M:Terminal.Gui.View.LayoutSubview(Terminal.Gui.View,System.Drawing.Size)"/> and <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/> methods to be called.
                </para>
                <para>
                    Changing this property will cause <see cref="P:Terminal.Gui.View.Frame"/> to be updated. If the new value is not of type
                    <see cref="T:Terminal.Gui.Pos.PosAbsolute"/> the <see cref="P:Terminal.Gui.View.LayoutStyle"/> will change to <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
                </para>
                <para>The default value is <c>Pos.At (0)</c>.</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Y">
            <summary>Gets or sets the Y position for the view (the row).</summary>
            <value>The <see cref="T:Terminal.Gui.Pos"/> object representing the Y position.</value>
            <remarks>
                <para>
                    The position is relative to the <see cref="P:Terminal.Gui.View.SuperView"/>'s Content, which is bound by <see cref="P:Terminal.Gui.View.ContentSize"/>.
                </para>
                <para>
                    If set to a relative value (e.g. <see cref="M:Terminal.Gui.Pos.Center"/>) the value is indeterminate until the view has been
                    initialized ( <see cref="P:Terminal.Gui.View.IsInitialized"/> is true) and <see cref="M:Terminal.Gui.View.SetRelativeLayout(System.Nullable{System.Drawing.Size})"/> has been
                    called.
                </para>
                <para>
                    Changing this property will eventually (when the view is next drawn) cause the
                    <see cref="M:Terminal.Gui.View.LayoutSubview(Terminal.Gui.View,System.Drawing.Size)"/> and <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/> methods to be called.
                </para>
                <para>
                    Changing this property will cause <see cref="P:Terminal.Gui.View.Frame"/> to be updated. If the new value is not of type
                    <see cref="T:Terminal.Gui.Pos.PosAbsolute"/> the <see cref="P:Terminal.Gui.View.LayoutStyle"/> will change to <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
                </para>
                <para>The default value is <c>Pos.At (0)</c>.</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Height">
            <summary>Gets or sets the height dimension of the view.</summary>
            <value>The <see cref="T:Terminal.Gui.Dim"/> object representing the height of the view (the number of rows).</value>
            <remarks>
                <para>
                    The dimension is relative to the <see cref="P:Terminal.Gui.View.SuperView"/>'s Content, which is bound by <see cref="P:Terminal.Gui.View.ContentSize"/>
                    .
                </para>
                <para>
                    If set to a relative value (e.g. <see cref="M:Terminal.Gui.Dim.Fill(System.Int32)"/>) the value is indeterminate until the view has
                    been initialized ( <see cref="P:Terminal.Gui.View.IsInitialized"/> is true) and <see cref="M:Terminal.Gui.View.SetRelativeLayout(System.Nullable{System.Drawing.Size})"/> has been
                    called.
                </para>
                <para>
                    Changing this property will eventually (when the view is next drawn) cause the
                    <see cref="M:Terminal.Gui.View.LayoutSubview(Terminal.Gui.View,System.Drawing.Size)"/> and <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/> methods to be called.
                </para>
                <para>
                    Changing this property will cause <see cref="P:Terminal.Gui.View.Frame"/> to be updated. If the new value is not of type
                    <see cref="T:Terminal.Gui.Dim.DimAbsolute"/> the <see cref="P:Terminal.Gui.View.LayoutStyle"/> will change to <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
                </para>
                <para>The default value is <c>Dim.Sized (0)</c>.</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Width">
            <summary>Gets or sets the width dimension of the view.</summary>
            <value>The <see cref="T:Terminal.Gui.Dim"/> object representing the width of the view (the number of columns).</value>
            <remarks>
                <para>
                    The dimension is relative to the <see cref="P:Terminal.Gui.View.SuperView"/>'s Content, which is bound by <see cref="P:Terminal.Gui.View.ContentSize"/>
                    .
                </para>
                <para>
                    If set to a relative value (e.g. <see cref="M:Terminal.Gui.Dim.Fill(System.Int32)"/>) the value is indeterminate until the view has
                    been initialized ( <see cref="P:Terminal.Gui.View.IsInitialized"/> is true) and <see cref="M:Terminal.Gui.View.SetRelativeLayout(System.Nullable{System.Drawing.Size})"/> has been
                    called.
                </para>
                <para>
                    Changing this property will eventually (when the view is next drawn) cause the
                    <see cref="M:Terminal.Gui.View.LayoutSubview(Terminal.Gui.View,System.Drawing.Size)"/> and <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/> methods to be called.
                </para>
                <para>
                    Changing this property will cause <see cref="P:Terminal.Gui.View.Frame"/> to be updated. If the new value is not of type
                    <see cref="T:Terminal.Gui.Dim.DimAbsolute"/> the <see cref="P:Terminal.Gui.View.LayoutStyle"/> will change to <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
                </para>
                <para>The default value is <c>Dim.Sized (0)</c>.</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.LayoutStyle">
            <summary>
                Controls how the View's <see cref="P:Terminal.Gui.View.Frame"/> is computed during <see cref="M:Terminal.Gui.View.LayoutSubviews"/>. If the style is
                set to <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>, LayoutSubviews does not change the <see cref="P:Terminal.Gui.View.Frame"/>. If the style is
                <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> the <see cref="P:Terminal.Gui.View.Frame"/> is updated using the <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>,
                <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties.
            </summary>
            <remarks>
                <para>
                    Setting this property to <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> will cause <see cref="P:Terminal.Gui.View.Frame"/> to determine the
                    size and position of the view. <see cref="P:Terminal.Gui.View.X"/> and <see cref="P:Terminal.Gui.View.Y"/> will be set to <see cref="T:Terminal.Gui.Dim.DimAbsolute"/>
                    using <see cref="P:Terminal.Gui.View.Frame"/>.
                </para>
                <para>
                    Setting this property to <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> will cause the view to use the
                    <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method to size and position of the view. If either of the <see cref="P:Terminal.Gui.View.X"/> and
                    <see cref="P:Terminal.Gui.View.Y"/> properties are `null` they will be set to <see cref="T:Terminal.Gui.Pos.PosAbsolute"/> using the current value
                    of <see cref="P:Terminal.Gui.View.Frame"/>. If either of the <see cref="P:Terminal.Gui.View.Width"/> and <see cref="P:Terminal.Gui.View.Height"/> properties are `null`
                    they will be set to <see cref="T:Terminal.Gui.Dim.DimAbsolute"/> using <see cref="P:Terminal.Gui.View.Frame"/>.
                </para>
            </remarks>
            <value>The layout style.</value>
        </member>
        <member name="M:Terminal.Gui.View.Contains(System.Drawing.Point@)">
            <summary>
                Indicates whether the specified SuperView-relative coordinates are within the View's <see cref="P:Terminal.Gui.View.Frame"/>.
            </summary>
            <param name="location">SuperView-relative coordinate</param>
            <returns><see langword="true"/> if the specified SuperView-relative coordinates are within the View.</returns>
        </member>
        <member name="M:Terminal.Gui.View.FindDeepestView(Terminal.Gui.View,System.Drawing.Point@)">
            <summary>Finds the first Subview of <paramref name="start"/> that is visible at the provided location.</summary>
            <remarks>
                <para>
                    Used to determine what view the mouse is over.
                </para>
            </remarks>
            <param name="start">The view to scope the search by.</param>
            <param name="location"><paramref name="start"/>.SuperView-relative coordinate.</param>
            <returns>
                The view that was found at the <paramref name="location"/> coordinate.
                <see langword="null"/> if no view was found.
            </returns>
        </member>
        <member name="M:Terminal.Gui.View.GetLocationEnsuringFullVisibility(Terminal.Gui.View,System.Int32,System.Int32,System.Int32@,System.Int32@,Terminal.Gui.StatusBar@)">
            <summary>
                Gets a new location of the <see cref="T:Terminal.Gui.View"/> that is within the Viewport of the <paramref name="viewToMove"/>'s
                <see cref="P:Terminal.Gui.View.SuperView"/> (e.g. for dragging a Window). The `out` parameters are the new X and Y coordinates.
            </summary>
            <remarks>
                If <paramref name="viewToMove"/> does not have a <see cref="P:Terminal.Gui.View.SuperView"/> or it's SuperView is not
                <see cref="P:Terminal.Gui.Application.Top"/> the position will be bound by the <see cref="P:Terminal.Gui.ConsoleDriver.Cols"/> and
                <see cref="P:Terminal.Gui.ConsoleDriver.Rows"/>.
            </remarks>
            <param name="viewToMove">The View that is to be moved.</param>
            <param name="targetX">The target x location.</param>
            <param name="targetY">The target y location.</param>
            <param name="nx">The new x location that will ensure <paramref name="viewToMove"/> will be fully visible.</param>
            <param name="ny">The new y location that will ensure <paramref name="viewToMove"/> will be fully visible.</param>
            <param name="statusBar">The new top most statusBar</param>
            <returns>
                Either <see cref="P:Terminal.Gui.Application.Top"/> (if <paramref name="viewToMove"/> does not have a Super View) or
                <paramref name="viewToMove"/>'s SuperView. This can be used to ensure LayoutSubviews is called on the correct View.
            </returns>
        </member>
        <member name="E:Terminal.Gui.View.LayoutComplete">
            <summary>Fired after the View's <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method has completed.</summary>
            <remarks>
                Subscribe to this event to perform tasks when the <see cref="T:Terminal.Gui.View"/> has been resized or the layout has
                otherwise changed.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.LayoutStarted">
            <summary>Fired after the View's <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method has completed.</summary>
            <remarks>
                Subscribe to this event to perform tasks when the <see cref="T:Terminal.Gui.View"/> has been resized or the layout has
                otherwise changed.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.LayoutSubviews">
            <summary>
                Invoked when a view starts executing or when the dimensions of the view have changed, for example in response to
                the container view or terminal resizing.
            </summary>
            <remarks>
                <para>
                    The position and dimensions of the view are indeterminate until the view has been initialized. Therefore, the
                    behavior of this method is indeterminate if <see cref="P:Terminal.Gui.View.IsInitialized"/> is <see langword="false"/>.
                </para>
                <para>Raises the <see cref="E:Terminal.Gui.View.LayoutComplete"/> event) before it returns.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.ClearLayoutNeeded">
            <summary>Indicates that the view does not need to be laid out.</summary>
        </member>
        <member name="M:Terminal.Gui.View.OnLayoutComplete(Terminal.Gui.LayoutEventArgs)">
            <summary>
                Raises the <see cref="E:Terminal.Gui.View.LayoutComplete"/> event. Called from  <see cref="M:Terminal.Gui.View.LayoutSubviews"/> before all sub-views
                have been laid out.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnLayoutStarted(Terminal.Gui.LayoutEventArgs)">
            <summary>
                Raises the <see cref="E:Terminal.Gui.View.LayoutStarted"/> event. Called from  <see cref="M:Terminal.Gui.View.LayoutSubviews"/> before any subviews
                have been laid out.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnResizeNeeded">
            <summary>
                Called whenever the view needs to be resized. This is called whenever <see cref="P:Terminal.Gui.View.Frame"/>,
                <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, or <see cref="P:Terminal.Gui.View.Height"/> changes.
            </summary>
            <remarks>
                <para>
                    Determines the relative bounds of the <see cref="T:Terminal.Gui.View"/> and its <see cref="P:Terminal.Gui.View.Frame"/>s, and then calls
                    <see cref="M:Terminal.Gui.View.SetRelativeLayout(System.Nullable{System.Drawing.Size})"/> to update the view.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SetNeedsLayout">
            <summary>
                Sets the internal <see cref="P:Terminal.Gui.View.LayoutNeeded"/> flag for this View and all of it's subviews and it's SuperView.
                The main loop will call SetRelativeLayout and LayoutSubviews for any view with <see cref="P:Terminal.Gui.View.LayoutNeeded"/> set.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.SetRelativeLayout(System.Nullable{System.Drawing.Size})">
            <summary>
                Adjusts <see cref="P:Terminal.Gui.View.Frame"/> given the SuperView's ContentSize (nominally the same as
                <c>this.SuperView.ContentSize</c>)
                and the position (<see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>) and dimension (<see cref="P:Terminal.Gui.View.Width"/>, and
                <see cref="P:Terminal.Gui.View.Height"/>).
            </summary>
            <remarks>
                <para>
                    If <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, or <see cref="P:Terminal.Gui.View.Height"/> are
                    absolute, they will be updated to reflect the new size and position of the view. Otherwise, they
                    are left unchanged.
                </para>
            </remarks>
            <param name="superviewContentSize">
                The size of the SuperView's content (nominally the same as <c>this.SuperView.ContentSize</c>).
            </param>
        </member>
        <member name="P:Terminal.Gui.View.ValidatePosDim">
            <summary>Gets or sets whether validation of <see cref="T:Terminal.Gui.Pos"/> and <see cref="T:Terminal.Gui.Dim"/> occurs.</summary>
            <remarks>
                Setting this to <see langword="true"/> will enable validation of <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>,
                <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> during set operations and in <see cref="M:Terminal.Gui.View.LayoutSubviews"/>. If invalid
                settings are discovered exceptions will be thrown indicating the error. This will impose a performance penalty and
                thus should only be used for debugging.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.CheckDimAuto">
            <summary>
                Throws an <see cref="T:System.InvalidOperationException"/> if any SubViews are using Dim objects that depend on this
                Views dimensions.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Terminal.Gui.View.Driver">
            <summary>
                Points to the current driver in use by the view, it is a convenience property for simplifying the development
                of new views.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.View"/>.</summary>
            <remarks>
                <para>
                    Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically
                    control the size and location of the view. The <see cref="T:Terminal.Gui.View"/> will be created using
                    <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> coordinates. The initial size ( <see cref="P:Terminal.Gui.View.Frame"/>) will be adjusted
                    to fit the contents of <see cref="P:Terminal.Gui.View.Text"/>, including newlines ('\n') for multiple lines.
                </para>
                <para>If <see cref="P:Terminal.Gui.View.Height"/> is greater than one, word wrapping is provided.</para>
                <para>
                    This constructor initialize a View with a <see cref="P:Terminal.Gui.View.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>.
                    Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically
                    control the size and location of the view, changing it to <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.Initialized">
            <summary>
                Event called only once when the <see cref="T:Terminal.Gui.View"/> is being initialized for the first time. Allows
                configurations and assignments to be performed before the <see cref="T:Terminal.Gui.View"/> being shown. This derived from
                <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> to allow notify all the views that are being initialized.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.IsInitialized">
            <summary>
                Get or sets if  the <see cref="T:Terminal.Gui.View"/> has been initialized (via <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit"/>
                and <see cref="M:System.ComponentModel.ISupportInitialize.EndInit"/>).
            </summary>
            <para>
                If first-run-only initialization is preferred, overrides to
                <see cref="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized"/> can be implemented, in which case the
                <see cref="T:System.ComponentModel.ISupportInitialize"/> methods will only be called if
                <see cref="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized"/> is <see langword="false"/>. This allows proper
                <see cref="T:Terminal.Gui.View"/> inheritance hierarchies to override base class layout code optimally by doing so only on first
                run, instead of on every run.
            </para>
        </member>
        <member name="M:Terminal.Gui.View.BeginInit">
            <summary>Signals the View that initialization is starting. See <see cref="T:System.ComponentModel.ISupportInitialize"/>.</summary>
            <remarks>
                <para>
                    Views can opt-in to more sophisticated initialization by implementing overrides to
                    <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit"/> and <see cref="M:System.ComponentModel.ISupportInitialize.EndInit"/> which will be called
                    when the <see cref="P:Terminal.Gui.View.SuperView"/> is initialized.
                </para>
                <para>
                    If first-run-only initialization is preferred, overrides to <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> can
                    be implemented too, in which case the <see cref="T:System.ComponentModel.ISupportInitialize"/> methods will only be called if
                    <see cref="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized"/> is <see langword="false"/>. This allows proper
                    <see cref="T:Terminal.Gui.View"/> inheritance hierarchies to override base class layout code optimally by doing so only on
                    first run, instead of on every run.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.EndInit">
            <summary>Signals the View that initialization is ending. See <see cref="T:System.ComponentModel.ISupportInitialize"/>.</summary>
            <remarks>
                <para>Initializes all Subviews and Invokes the <see cref="E:Terminal.Gui.View.Initialized"/> event.</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Id">
            <summary>Gets or sets an identifier for the view;</summary>
            <value>The identifier.</value>
            <remarks>The id should be unique across all Views that share a SuperView.</remarks>
        </member>
        <member name="P:Terminal.Gui.View.Data">
            <summary>Gets or sets arbitrary data for the view.</summary>
            <remarks>This property is not used internally.</remarks>
        </member>
        <member name="E:Terminal.Gui.View.Accept">
            <summary>
                Cancelable event fired when the <see cref="F:Terminal.Gui.Command.Accept"/> command is invoked. Set
                <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
                to cancel the event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnAccept">
            <summary>
                Called when the <see cref="F:Terminal.Gui.Command.Accept"/> command is invoked. Fires the <see cref="E:Terminal.Gui.View.Accept"/>
                event.
            </summary>
            <returns>If <see langword="true"/> the event was canceled.</returns>
        </member>
        <member name="P:Terminal.Gui.View.Enabled">
            <summary>Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Responder"/> can respond to user interaction.</summary>
        </member>
        <member name="E:Terminal.Gui.View.EnabledChanged">
            <summary>Event fired when the <see cref="P:Terminal.Gui.View.Enabled"/> value is being changed.</summary>
        </member>
        <member name="M:Terminal.Gui.View.OnEnabledChanged">
            <summary>Method invoked when the <see cref="P:Terminal.Gui.View.Enabled"/> property from a view is changed.</summary>
        </member>
        <member name="P:Terminal.Gui.View.Visible">
            <summary>Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Responder"/> and all its child controls are displayed.</summary>
        </member>
        <member name="M:Terminal.Gui.View.OnVisibleChanged">
            <summary>Method invoked when the <see cref="P:Terminal.Gui.View.Visible"/> property from a view is changed.</summary>
        </member>
        <member name="P:Terminal.Gui.View.ClearOnVisibleFalse">
            <summary>Gets or sets whether a view is cleared if the <see cref="P:Terminal.Gui.View.Visible"/> property is <see langword="false"/>.</summary>
        </member>
        <member name="E:Terminal.Gui.View.VisibleChanged">
            <summary>Event fired when the <see cref="P:Terminal.Gui.View.Visible"/> value is being changed.</summary>
        </member>
        <member name="P:Terminal.Gui.View.TitleTextFormatter">
            <summary>Gets the <see cref="T:Terminal.Gui.TextFormatter"/> used to format <see cref="P:Terminal.Gui.View.Title"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.View.Title">
            <summary>
                The title to be displayed for this <see cref="T:Terminal.Gui.View"/>. The title will be displayed if <see cref="P:Terminal.Gui.View.Border"/>.
                <see cref="F:Terminal.Gui.Thickness.Top"/> is greater than 0. The title can be used to set the <see cref="P:Terminal.Gui.View.HotKey"/>
                for the view by prefixing character with <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> (e.g. <c>"T_itle"</c>).
            </summary>
            <remarks>
                <para>
                    Set the <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> to enable hotkey support. To disable Title-based hotkey support set
                    <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> to <c>(Rune)0xffff</c>.
                </para>
                <para>
                    Only the first HotKey specifier found in <see cref="P:Terminal.Gui.View.Title"/> is supported.
                </para>
                <para>
                    To cause the hotkey to be rendered with <see cref="P:Terminal.Gui.View.Text"/>,
                    set <c>View.</c><see cref="P:Terminal.Gui.TextFormatter.HotKeySpecifier"/> to the desired character.
                </para>
            </remarks>
            <value>The title.</value>
        </member>
        <member name="M:Terminal.Gui.View.OnTitleChanged(System.String,System.String)">
            <summary>Called when the <see cref="P:Terminal.Gui.View.Title"/> has been changed. Invokes the <see cref="E:Terminal.Gui.View.TitleChanged"/> event.</summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.View.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.View.Title"/> to be replaced.</param>
        </member>
        <member name="M:Terminal.Gui.View.OnTitleChanging(System.String,System.String)">
            <summary>
                Called before the <see cref="P:Terminal.Gui.View.Title"/> changes. Invokes the <see cref="E:Terminal.Gui.View.TitleChanging"/> event, which can
                be cancelled.
            </summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.View.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.View.Title"/> to be replaced.</param>
            <returns>`true` if an event handler canceled the Title change.</returns>
        </member>
        <member name="E:Terminal.Gui.View.TitleChanged">
            <summary>Event fired after the <see cref="P:Terminal.Gui.View.Title"/> has been changed.</summary>
        </member>
        <member name="E:Terminal.Gui.View.TitleChanging">
            <summary>
                Event fired when the <see cref="P:Terminal.Gui.View.Title"/> is changing. Set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to `true`
                to cancel the Title change.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ToString">
            <summary>Pretty prints the View</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.View.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.View.Margin">
            <summary>
                The <see cref="T:Terminal.Gui.Adornment"/> that enables separation of a View from other SubViews of the same
                SuperView. The margin offsets the <see cref="P:Terminal.Gui.View.Viewport"/> from the <see cref="P:Terminal.Gui.View.Frame"/>.
            </summary>
            <remarks>
                <para>
                    The adornments (<see cref="P:Terminal.Gui.View.Margin"/>, <see cref="P:Terminal.Gui.View.Border"/>, and <see cref="P:Terminal.Gui.View.Padding"/>) are not part of the
                    View's content and are not clipped by the View's Clip Area.
                </para>
                <para>
                    Changing the size of an adornment (<see cref="P:Terminal.Gui.View.Margin"/>, <see cref="P:Terminal.Gui.View.Border"/>, or <see cref="P:Terminal.Gui.View.Padding"/>) will
                    change the size of <see cref="P:Terminal.Gui.View.Frame"/> and trigger <see cref="M:Terminal.Gui.View.LayoutSubviews"/> to update the layout of the
                    <see cref="P:Terminal.Gui.View.SuperView"/> and its <see cref="P:Terminal.Gui.View.Subviews"/>.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Border">
            <summary>
                The <see cref="T:Terminal.Gui.Adornment"/> that offsets the <see cref="P:Terminal.Gui.View.Viewport"/> from the <see cref="P:Terminal.Gui.View.Margin"/>.
                The Border provides the space for a visual border (drawn using
                line-drawing glyphs) and the Title. The Border expands inward; in other words if `Border.Thickness.Top == 2` the
                border and title will take up the first row and the second row will be filled with spaces.
            </summary>
            <remarks>
                <para><see cref="P:Terminal.Gui.View.BorderStyle"/> provides a simple helper for turning a simple border frame on or off.</para>
                <para>
                    The adornments (<see cref="P:Terminal.Gui.View.Margin"/>, <see cref="P:Terminal.Gui.View.Border"/>, and <see cref="P:Terminal.Gui.View.Padding"/>) are not part of the
                    View's content and are not clipped by the View's Clip Area.
                </para>
                <para>
                    Changing the size of a frame (<see cref="P:Terminal.Gui.View.Margin"/>, <see cref="P:Terminal.Gui.View.Border"/>, or <see cref="P:Terminal.Gui.View.Padding"/>) will
                    change the size of the <see cref="P:Terminal.Gui.View.Frame"/> and trigger <see cref="M:Terminal.Gui.View.LayoutSubviews"/> to update the layout of the
                    <see cref="P:Terminal.Gui.View.SuperView"/> and its <see cref="P:Terminal.Gui.View.Subviews"/>.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.BorderStyle">
            <summary>Gets or sets whether the view has a one row/col thick border.</summary>
            <remarks>
                <para>
                    This is a helper for manipulating the view's <see cref="P:Terminal.Gui.View.Border"/>. Setting this property to any value other
                    than <see cref="F:Terminal.Gui.LineStyle.None"/> is equivalent to setting <see cref="P:Terminal.Gui.View.Border"/>'s
                    <see cref="P:Terminal.Gui.Adornment.Thickness"/> to `1` and <see cref="P:Terminal.Gui.View.BorderStyle"/> to the value.
                </para>
                <para>
                    Setting this property to <see cref="F:Terminal.Gui.LineStyle.None"/> is equivalent to setting <see cref="P:Terminal.Gui.View.Border"/>'s
                    <see cref="P:Terminal.Gui.Adornment.Thickness"/> to `0` and <see cref="P:Terminal.Gui.View.BorderStyle"/> to <see cref="F:Terminal.Gui.LineStyle.None"/>.
                </para>
                <para>For more advanced customization of the view's border, manipulate see <see cref="P:Terminal.Gui.View.Border"/> directly.</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Padding">
            <summary>
                The <see cref="T:Terminal.Gui.Adornment"/> inside of the view that offsets the <see cref="P:Terminal.Gui.View.Viewport"/>
                from the <see cref="P:Terminal.Gui.View.Border"/>.
            </summary>
            <remarks>
                <para>
                    The adornments (<see cref="P:Terminal.Gui.View.Margin"/>, <see cref="P:Terminal.Gui.View.Border"/>, and <see cref="P:Terminal.Gui.View.Padding"/>) are not part of the
                    View's content and are not clipped by the View's Clip Area.
                </para>
                <para>
                    Changing the size of a frame (<see cref="P:Terminal.Gui.View.Margin"/>, <see cref="P:Terminal.Gui.View.Border"/>, or <see cref="P:Terminal.Gui.View.Padding"/>) will
                    change the size of the <see cref="P:Terminal.Gui.View.Frame"/> and trigger <see cref="M:Terminal.Gui.View.LayoutSubviews"/> to update the layout of the
                    <see cref="P:Terminal.Gui.View.SuperView"/> and its <see cref="P:Terminal.Gui.View.Subviews"/>.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.GetAdornmentsThickness">
            <summary>
                <para>Gets the thickness describing the sum of the Adornments' thicknesses.</para>
            </summary>
            <returns>A thickness that describes the sum of the Adornments' thicknesses.</returns>
        </member>
        <member name="M:Terminal.Gui.View.LayoutAdornments">
            <summary>Lays out the Adornments of the View.</summary>
            <remarks>
                Overriden by <see cref="T:Terminal.Gui.Adornment"/> to do nothing, as <see cref="T:Terminal.Gui.Adornment"/> does not have adornments.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Arrangement">
            <summary>
               Gets or sets the user actions that are enabled for the view within it's <see cref="P:Terminal.Gui.View.SuperView"/>.
            </summary>
            <remarks>
            <para>
                Sizing or moving a view is only possible if the <see cref="T:Terminal.Gui.View"/> is part of a <see cref="P:Terminal.Gui.View.SuperView"/> and
                the relevant position and dimensions of the <see cref="T:Terminal.Gui.View"/> are independent of other SubViews
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.ContentSize">
            <summary>
                Gets or sets the size of the View's content. If <see langword="null"/>, the value will be the same as the size of <see cref="P:Terminal.Gui.View.Viewport"/>,
                and <c>Viewport.Location</c> will always be <c>0, 0</c>.
            </summary>
            <remarks>
                <para>
                    If a size is provided, <see cref="P:Terminal.Gui.View.Viewport"/> describes the portion of the content currently visible
                    to the view. This enables virtual scrolling.
                </para>
                <para>
                    If a size is provided, the behavior of <see cref="F:Terminal.Gui.Dim.DimAutoStyle.Content"/> will be to use the ContentSize
                    to determine the size of the view.
                </para>
                <para>
                    Negative sizes are not supported.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnContentSizeChanged(Terminal.Gui.SizeChangedEventArgs)">
            <summary>
                Called when <see cref="P:Terminal.Gui.View.ContentSize"/> changes. Invokes the <see cref="E:Terminal.Gui.View.ContentSizeChanged"/> event.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="E:Terminal.Gui.View.ContentSizeChanged">
            <summary>
                Event raised when the <see cref="P:Terminal.Gui.View.ContentSize"/> changes.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ContentToScreen(System.Drawing.Point@)">
            <summary>
                Converts a Content-relative location to a Screen-relative location.
            </summary>
            <param name="location">The Content-relative location.</param>
            <returns>The Screen-relative location.</returns>
        </member>
        <member name="M:Terminal.Gui.View.ScreenToContent(System.Drawing.Point@)">
            <summary>Converts a Screen-relative coordinate to a Content-relative coordinate.</summary>
            <remarks>
                Content-relative means relative to the top-left corner of the view's Content, which is
                always at <c>0, 0</c>.
            </remarks>
            <param name="location">The Screen-relative location.</param>
            <returns>The coordinate relative to this view's Content.</returns>
        </member>
        <member name="P:Terminal.Gui.View.ViewportSettings">
            <summary>
                Gets or sets how scrolling the <see cref="P:Terminal.Gui.View.Viewport"/> on the View's Content Area is handled.
            </summary>
        </member>
        <member name="F:Terminal.Gui.View._viewportLocation">
            <summary>
                The location of the viewport into the view's content (0,0) is the top-left corner of the content. The Content
                area's size
                is <see cref="P:Terminal.Gui.View.ContentSize"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Viewport">
            <summary>
                Gets or sets the rectangle describing the portion of the View's content that is visible to the user.
                The viewport Location is relative to the top-left corner of the inner rectangle of <see cref="P:Terminal.Gui.View.Padding"/>.
                If the viewport Size is the same as <see cref="P:Terminal.Gui.View.ContentSize"/>, or <see cref="P:Terminal.Gui.View.ContentSize"/> is
                <see langword="null"/> the Location will be <c>0, 0</c>.
            </summary>
            <value>
                The rectangle describing the location and size of the viewport into the View's virtual content, described by
                <see cref="P:Terminal.Gui.View.ContentSize"/>.
            </value>
            <remarks>
                <para>
                    Positive values for the location indicate the visible area is offset into (down-and-right) the View's virtual
                    <see cref="P:Terminal.Gui.View.ContentSize"/>. This enables scrolling down and to the right (e.g. in a <see cref="T:Terminal.Gui.ListView"/>.
                </para>
                <para>
                    Negative values for the location indicate the visible area is offset above (up-and-left) the View's virtual
                    <see cref="P:Terminal.Gui.View.ContentSize"/>. This enables scrolling up and to the left (e.g. in an image viewer that supports zoom
                    where the image stays centered).
                </para>
                <para>
                    The <see cref="P:Terminal.Gui.View.ViewportSettings"/> property controls how scrolling is handled. 
                </para>
                <para>
                    If <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> the value of Viewport is indeterminate until
                    the view has been initialized ( <see cref="P:Terminal.Gui.View.IsInitialized"/> is true) and <see cref="M:Terminal.Gui.View.LayoutSubviews"/> has been
                    called.
                </para>
                <para>
                    Updates to the Viewport Size updates <see cref="P:Terminal.Gui.View.Frame"/>, and has the same impact as updating the
                    <see cref="P:Terminal.Gui.View.Frame"/>.
                </para>
                <para>
                    Altering the Viewport Size will eventually (when the view is next laid out) cause the
                    <see cref="M:Terminal.Gui.View.LayoutSubview(Terminal.Gui.View,System.Drawing.Size)"/> and <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/> methods to be called.
                </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.ViewportChanged">
            <summary>
                Fired when the <see cref="P:Terminal.Gui.View.Viewport"/> changes. This event is fired after the <see cref="P:Terminal.Gui.View.Viewport"/> has been updated.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnViewportChanged(Terminal.Gui.DrawEventArgs)">
            <summary>
                Called when the <see cref="P:Terminal.Gui.View.Viewport"/> changes. Invokes the <see cref="E:Terminal.Gui.View.ViewportChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.View.ViewportToScreen(System.Drawing.Rectangle@)">
            <summary>
                Converts a <see cref="P:Terminal.Gui.View.Viewport"/>-relative location and size to a screen-relative location and size.
            </summary>
            <remarks>
                Viewport-relative means relative to the top-left corner of the inner rectangle of the <see cref="P:Terminal.Gui.View.Padding"/>.
            </remarks>
            <param name="viewport">Viewport-relative location and size.</param>
            <returns>Screen-relative location and size.</returns>
        </member>
        <member name="M:Terminal.Gui.View.ViewportToScreen(System.Drawing.Point@)">
            <summary>
                Converts a <see cref="P:Terminal.Gui.View.Viewport"/>-relative location to a screen-relative location.
            </summary>
            <remarks>
                Viewport-relative means relative to the top-left corner of the inner rectangle of the <see cref="P:Terminal.Gui.View.Padding"/>.
            </remarks>
            <param name="viewportLocation">Viewport-relative location.</param>
            <returns>Screen-relative location.</returns>
        </member>
        <member name="M:Terminal.Gui.View.ScreenToViewport(System.Drawing.Point@)">
            <summary>Converts a screen-relative coordinate to a Viewport-relative coordinate.</summary>
            <returns>The coordinate relative to this view's <see cref="P:Terminal.Gui.View.Viewport"/>.</returns>
            <remarks>
                Viewport-relative means relative to the top-left corner of the inner rectangle of the <see cref="P:Terminal.Gui.View.Padding"/>.
            </remarks>
            <param name="location">Screen-Relative Coordinate.</param>
            <returns>Viewport-relative location.</returns>
        </member>
        <member name="M:Terminal.Gui.View.GetViewportOffsetFromFrame">
            <summary>
                Helper to get the X and Y offset of the Viewport from the Frame. This is the sum of the Left and Top properties
                of <see cref="P:Terminal.Gui.View.Margin"/>, <see cref="P:Terminal.Gui.View.Border"/> and <see cref="P:Terminal.Gui.View.Padding"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ScrollVertical(System.Int32)">
            <summary>
                Scrolls the view vertically by the specified number of rows.
            </summary>
            <remarks>
                <para>
                </para>
            </remarks>
            <param name="rows"></param>
            <returns><see langword="true"/> if the <see cref="P:Terminal.Gui.View.Viewport"/> was changed.</returns>
        </member>
        <member name="M:Terminal.Gui.View.ScrollHorizontal(System.Int32)">
            <summary>
                Scrolls the view horizontally by the specified number of columns.
            </summary>
            <remarks>
                <para>
                </para>
            </remarks>
            <param name="cols"></param>
            <returns><see langword="true"/> if the <see cref="P:Terminal.Gui.View.Viewport"/> was changed.</returns>
        </member>
        <member name="P:Terminal.Gui.View.Diagnostics">
            <summary>Flags to enable/disable <see cref="T:Terminal.Gui.View"/> diagnostics.</summary>
        </member>
        <member name="P:Terminal.Gui.View.ColorScheme">
            <summary>The color scheme for this view, if it is not defined, it returns the <see cref="P:Terminal.Gui.View.SuperView"/>'s color scheme.</summary>
        </member>
        <member name="P:Terminal.Gui.View.LineCanvas">
            <summary>The canvas that any line drawing that is to be shared by subviews of this view should add lines to.</summary>
            <remarks><see cref="P:Terminal.Gui.View.Border"/> adds border lines to this LineCanvas.</remarks>
        </member>
        <member name="P:Terminal.Gui.View.NeedsDisplay">
            <summary>Gets or sets whether the view needs to be redrawn.</summary>
        </member>
        <member name="P:Terminal.Gui.View.SubViewNeedsDisplay">
            <summary>Gets whether any Subviews need to be redrawn.</summary>
        </member>
        <member name="P:Terminal.Gui.View.SuperViewRendersLineCanvas">
            <summary>
                Gets or sets whether this View will use it's SuperView's <see cref="P:Terminal.Gui.View.LineCanvas"/> for rendering any 
                lines. If <see langword="true"/> the rendering of any borders drawn by this Frame will be done by its parent's
                SuperView. If <see langword="false"/> (the default) this View's <see cref="M:Terminal.Gui.View.OnDrawAdornments"/> method will be
                called to render the borders.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.AddRune(System.Int32,System.Int32,System.Text.Rune)">
            <summary>Draws the specified character in the specified viewport-relative column and row of the View.</summary>
            <para>
                If the provided coordinates are outside the visible content area, this method does nothing.
            </para>
            <remarks>
                The top-left corner of the visible content area is <c>ViewPort.Location</c>.
            </remarks>
            <param name="col">Column (viewport-relative).</param>
            <param name="row">Row (viewport-relative).</param>
            <param name="rune">The Rune.</param>
        </member>
        <member name="M:Terminal.Gui.View.Clear">
            <summary>Clears <see cref="P:Terminal.Gui.View.Viewport"/> with the normal background.</summary>
            <remarks>
                <para>
                    If <see cref="P:Terminal.Gui.View.ViewportSettings"/> has <see cref="F:Terminal.Gui.ViewportSettings.ClearContentOnly"/> only
                    the portion of the content
                    area that is visible within the <see cref="P:Terminal.Gui.View.Viewport"/> will be cleared. This is useful for views that have a
                    content area larger than the Viewport (e.g. when <see cref="F:Terminal.Gui.ViewportSettings.AllowNegativeLocation"/> is
                    enabled) and want
                    the area outside the content to be visually distinct.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.FillRect(System.Drawing.Rectangle,System.Nullable{Terminal.Gui.Color})">
            <summary>Fills the specified <see cref="P:Terminal.Gui.View.Viewport"/>-relative rectangle with the specified color.</summary>
            <param name="rect">The Viewport-relative rectangle to clear.</param>
            <param name="color">The color to use to fill the rectangle. If not provided, the Normal background color will be used.</param>
        </member>
        <member name="M:Terminal.Gui.View.SetClip">
            <summary>Sets the <see cref="T:Terminal.Gui.ConsoleDriver"/>'s clip region to <see cref="P:Terminal.Gui.View.Viewport"/>.</summary>
            <remarks>
            <para>
                By default, the clip rectangle is set to the intersection of the current clip region and the
                <see cref="P:Terminal.Gui.View.Viewport"/>. This ensures that drawing is constrained to the viewport, but allows
                content to be drawn beyond the viewport.
            </para>
            <para>
                If <see cref="P:Terminal.Gui.View.ViewportSettings"/> has <see cref="F:Terminal.Gui.ViewportSettings.ClipContentOnly"/> set, clipping will be
                applied to just the visible content area.
            </para>
            </remarks>
            <returns>
                The current screen-relative clip region, which can be then re-applied by setting
                <see cref="P:Terminal.Gui.ConsoleDriver.Clip"/>.
            </returns>
        </member>
        <member name="M:Terminal.Gui.View.Draw">
            <summary>
                Draws the view. Causes the following virtual methods to be called (along with their related events):
                <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/>, <see cref="M:Terminal.Gui.View.OnDrawContentComplete(System.Drawing.Rectangle)"/>.
            </summary>
            <remarks>
                <para>
                    Always use <see cref="P:Terminal.Gui.View.Viewport"/> (view-relative) when calling <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/>, NOT
                    <see cref="P:Terminal.Gui.View.Frame"/> (superview-relative).
                </para>
                <para>
                    Views should set the color that they want to use on entry, as otherwise this will inherit the last color that
                    was set globally on the driver.
                </para>
                <para>
                    Overrides of <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/> must ensure they do not set <c>Driver.Clip</c> to a clip
                    region larger than the <ref name="Viewport"/> property, as this will cause the driver to clip the entire
                    region.
                </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.DrawContent">
            <summary>Event invoked when the content area of the View is to be drawn.</summary>
            <remarks>
                <para>Will be invoked before any subviews added with <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> have been drawn.</para>
                <para>
                    Rect provides the view-relative rectangle describing the currently visible viewport into the
                    <see cref="T:Terminal.Gui.View"/> .
                </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.DrawContentComplete">
            <summary>Event invoked when the content area of the View is completed drawing.</summary>
            <remarks>
                <para>Will be invoked after any subviews removed with <see cref="M:Terminal.Gui.View.Remove(Terminal.Gui.View)"/> have been completed drawing.</para>
                <para>
                    Rect provides the view-relative rectangle describing the currently visible viewport into the
                    <see cref="T:Terminal.Gui.View"/> .
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.DrawHotString(System.String,Terminal.Gui.Attribute,Terminal.Gui.Attribute)">
            <summary>Utility function to draw strings that contain a hotkey.</summary>
            <param name="text">String to display, the hotkey specifier before a letter flags the next letter as the hotkey.</param>
            <param name="hotColor">Hot color.</param>
            <param name="normalColor">Normal color.</param>
            <remarks>
                <para>
                    The hotkey is any character following the hotkey specifier, which is the underscore ('_') character by
                    default.
                </para>
                <para>The hotkey specifier can be changed via <see cref="P:Terminal.Gui.View.HotKeySpecifier"/></para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.DrawHotString(System.String,System.Boolean,Terminal.Gui.ColorScheme)">
            <summary>
                Utility function to draw strings that contains a hotkey using a <see cref="P:Terminal.Gui.View.ColorScheme"/> and the "focused"
                state.
            </summary>
            <param name="text">String to display, the underscore before a letter flags the next letter as the hotkey.</param>
            <param name="focused">
                If set to <see langword="true"/> this uses the focused colors from the color scheme, otherwise
                the regular ones.
            </param>
            <param name="scheme">The color scheme to use.</param>
        </member>
        <member name="M:Terminal.Gui.View.GetFocusColor">
            <summary>Determines the current <see cref="P:Terminal.Gui.View.ColorScheme"/> based on the <see cref="P:Terminal.Gui.View.Enabled"/> value.</summary>
            <returns>
                <see cref="P:Terminal.Gui.ColorScheme.Focus"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="true"/> or
                <see cref="P:Terminal.Gui.ColorScheme.Disabled"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="false"/>. If it's
                overridden can return other values.
            </returns>
        </member>
        <member name="M:Terminal.Gui.View.GetHotNormalColor">
            <summary>Determines the current <see cref="P:Terminal.Gui.View.ColorScheme"/> based on the <see cref="P:Terminal.Gui.View.Enabled"/> value.</summary>
            <returns>
                <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="true"/> or
                <see cref="P:Terminal.Gui.ColorScheme.Disabled"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="false"/>. If it's
                overridden can return other values.
            </returns>
        </member>
        <member name="M:Terminal.Gui.View.GetNormalColor">
            <summary>Determines the current <see cref="P:Terminal.Gui.View.ColorScheme"/> based on the <see cref="P:Terminal.Gui.View.Enabled"/> value.</summary>
            <returns>
                <see cref="P:Terminal.Gui.ColorScheme.Normal"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="true"/> or
                <see cref="P:Terminal.Gui.ColorScheme.Disabled"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="false"/>. If it's
                overridden can return other values.
            </returns>
        </member>
        <member name="M:Terminal.Gui.View.Move(System.Int32,System.Int32)">
            <summary>Moves the drawing cursor to the specified <see cref="P:Terminal.Gui.View.Viewport"/>-relative location in the view.</summary>
            <remarks>
                <para>
                    If the provided coordinates are outside the visible content area, this method does nothing.
                </para>
                <para>
                    The top-left corner of the visible content area is <c>ViewPort.Location</c>.
                </para>
            </remarks>
            <param name="col">Column (viewport-relative).</param>
            <param name="row">Row (viewport-relative).</param>
        </member>
        <member name="M:Terminal.Gui.View.OnDrawAdornments">
            <summary>
                Prepares <see cref="P:Terminal.Gui.View.LineCanvas"/>. If <see cref="P:Terminal.Gui.View.SuperViewRendersLineCanvas"/> is true, only the
                <see cref="P:Terminal.Gui.View.LineCanvas"/> of this view's subviews will be rendered. If <see cref="P:Terminal.Gui.View.SuperViewRendersLineCanvas"/> is
                false (the default), this method will cause the <see cref="P:Terminal.Gui.View.LineCanvas"/> be prepared to be rendered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)">
            <summary>
                Draws the view's content, including Subviews.
            </summary>
            <remarks>
                <para>
                    The <paramref name="viewport"/> parameter is provided as a convenience; it has the same values as the
                    <see cref="P:Terminal.Gui.View.Viewport"/> property.
                </para>
                <para>
                    The <see cref="P:Terminal.Gui.View.Viewport"/> Location and Size indicate what part of the View's content, defined
                    by <see cref="P:Terminal.Gui.View.ContentSize"/>, is visible and should be drawn. The coordinates taken by <see cref="M:Terminal.Gui.View.Move(System.Int32,System.Int32)"/> and
                    <see cref="M:Terminal.Gui.View.AddRune(System.Int32,System.Int32,System.Text.Rune)"/> are relative to <see cref="P:Terminal.Gui.View.Viewport"/>, thus if <c>ViewPort.Location.Y</c> is <c>5</c>
                    the 6th row of the content should be drawn using <c>MoveTo (x, 5)</c>.
                </para>
                <para>
                    If <see cref="P:Terminal.Gui.View.ContentSize"/> is larger than <c>ViewPort.Size</c> drawing code should use <see cref="P:Terminal.Gui.View.Viewport"/>
                    to constrain drawing for better performance.
                </para>
                <para>
                    The <see cref="P:Terminal.Gui.ConsoleDriver.Clip"/> may define smaller area than <see cref="P:Terminal.Gui.View.Viewport"/>; complex drawing code
                    can be more
                    efficient by using <see cref="P:Terminal.Gui.ConsoleDriver.Clip"/> to constrain drawing for better performance.
                </para>
                <para>
                    Overrides should loop through the subviews and call <see cref="M:Terminal.Gui.View.Draw"/>.
                </para>
            </remarks>
            <param name="viewport">
                The rectangle describing the currently visible viewport into the <see cref="T:Terminal.Gui.View"/>; has the same value as
                <see cref="P:Terminal.Gui.View.Viewport"/>.
            </param>
        </member>
        <member name="M:Terminal.Gui.View.OnDrawContentComplete(System.Drawing.Rectangle)">
            <summary>
                Called after <see cref="M:Terminal.Gui.View.OnDrawContent(System.Drawing.Rectangle)"/> to enable overrides.
            </summary>
            <param name="viewport">
                The viewport-relative rectangle describing the currently visible viewport into the
                <see cref="T:Terminal.Gui.View"/>
            </param>
        </member>
        <member name="M:Terminal.Gui.View.OnRenderLineCanvas">
            <summary>
                Renders <see cref="P:Terminal.Gui.View.LineCanvas"/>. If <see cref="P:Terminal.Gui.View.SuperViewRendersLineCanvas"/> is true, only the
                <see cref="P:Terminal.Gui.View.LineCanvas"/> of this view's subviews will be rendered. If <see cref="P:Terminal.Gui.View.SuperViewRendersLineCanvas"/> is
                false (the default), this method will cause the <see cref="P:Terminal.Gui.View.LineCanvas"/> to be rendered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.View.SetNeedsDisplay">
            <summary>Sets the area of this view needing to be redrawn to <see cref="P:Terminal.Gui.View.Viewport"/>.</summary>
            <remarks>
                If the view has not been initialized (<see cref="P:Terminal.Gui.View.IsInitialized"/> is <see langword="false"/>), this method
                does nothing.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SetNeedsDisplay(System.Drawing.Rectangle)">
            <summary>Expands the area of this view needing to be redrawn to include <paramref name="region"/>.</summary>
            <remarks>
                <para>
                    The location of <paramref name="region"/> is relative to the View's content, bound by <c>Size.Empty</c> and
                    <see cref="P:Terminal.Gui.View.ContentSize"/>.
                </para>
                <para>
                    If the view has not been initialized (<see cref="P:Terminal.Gui.View.IsInitialized"/> is <see langword="false"/>), the area to be
                    redrawn will be the <paramref name="region"/>.
                </para>
            </remarks>
            <param name="region">The content-relative region that needs to be redrawn.</param>
        </member>
        <member name="M:Terminal.Gui.View.SetSubViewNeedsDisplay">
            <summary>Sets <see cref="P:Terminal.Gui.View.SubViewNeedsDisplay"/> to <see langword="true"/> for this View and all Superviews.</summary>
        </member>
        <member name="M:Terminal.Gui.View.ClearNeedsDisplay">
            <summary>Clears <see cref="P:Terminal.Gui.View.NeedsDisplay"/> and <see cref="P:Terminal.Gui.View.SubViewNeedsDisplay"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.View.OnHotKey">
            <summary>
            Called when the HotKey command (<see cref="F:Terminal.Gui.Command.HotKey"/>) is invoked. Causes this view to be focused.
            </summary>
            <returns>If <see langword="true"/> the command was canceled.</returns>
        </member>
        <member name="E:Terminal.Gui.View.HotKeyChanged">
            <summary>Invoked when the <see cref="P:Terminal.Gui.View.HotKey"/> is changed.</summary>
        </member>
        <member name="P:Terminal.Gui.View.HotKey">
            <summary>
                Gets or sets the hot key defined for this view. Pressing the hot key on the keyboard while this view has focus will
                invoke the <see cref="F:Terminal.Gui.Command.HotKey"/> and <see cref="F:Terminal.Gui.Command.Accept"/> commands. <see cref="F:Terminal.Gui.Command.HotKey"/>
                causes the view to be focused and <see cref="F:Terminal.Gui.Command.Accept"/> does nothing. By default, the HotKey is
                automatically set to the first character of <see cref="P:Terminal.Gui.View.Text"/> that is prefixed with with
                <see cref="P:Terminal.Gui.View.HotKeySpecifier"/>.
                <para>
                    A HotKey is a keypress that selects a visible UI item. For selecting items across <see cref="T:Terminal.Gui.View"/>`s (e.g.a
                    <see cref="T:Terminal.Gui.Button"/> in a <see cref="T:Terminal.Gui.Dialog"/>) the keypress must include the <see cref="P:Terminal.Gui.Key.WithAlt"/>
                    modifier. For selecting items within a View that are not Views themselves, the keypress can be key without the
                    Alt modifier. For example, in a Dialog, a Button with the text of "_Text" can be selected with Alt-T. Or, in a
                    <see cref="T:Terminal.Gui.Menu"/> with "_File _Edit", Alt-F will select (show) the "_File" menu. If the "_File" menu has a
                    sub-menu of "_New" `Alt-N` or `N` will ONLY select the "_New" sub-menu if the "_File" menu is already opened.
                </para>
            </summary>
            <remarks>
                <para>See <see href="../docs/keyboard.md"/> for an overview of Terminal.Gui keyboard APIs.</para>
                <para>
                    This is a helper API for configuring a key binding for the hot key. By default, this property is set whenever
                    <see cref="P:Terminal.Gui.View.Text"/> changes.
                </para>
                <para>
                    By default, when the Hot Key is set, key bindings are added for both the base key (e.g.
                    <see cref="P:Terminal.Gui.Key.D3"/>) and the Alt-shifted key (e.g. <see cref="P:Terminal.Gui.Key.D3"/>.
                    <see cref="P:Terminal.Gui.Key.WithAlt"/>). This behavior can be overriden by overriding
                    <see cref="M:Terminal.Gui.View.AddKeyBindingsForHotKey(Terminal.Gui.Key,Terminal.Gui.Key)"/>.
                </para>
                <para>
                    By default, when the HotKey is set to <see cref="P:Terminal.Gui.Key.A"/> through <see cref="P:Terminal.Gui.Key.Z"/> key bindings will
                    be added for both the un-shifted and shifted versions. This means if the HotKey is <see cref="P:Terminal.Gui.Key.A"/>, key
                    bindings for <c>Key.A</c> and <c>Key.A.WithShift</c> will be added. This behavior can be overriden by
                    overriding <see cref="M:Terminal.Gui.View.AddKeyBindingsForHotKey(Terminal.Gui.Key,Terminal.Gui.Key)"/>.
                </para>
                <para>If the hot key is changed, the <see cref="E:Terminal.Gui.View.HotKeyChanged"/> event is fired.</para>
                <para>Set to <see cref="P:Terminal.Gui.Key.Empty"/> to disable the hot key.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.AddKeyBindingsForHotKey(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>
                Adds key bindings for the specified HotKey. Useful for views that contain multiple items that each have their
                own HotKey such as <see cref="T:Terminal.Gui.RadioGroup"/>.
            </summary>
            <remarks>
                <para>
                    By default, key bindings are added for both the base key (e.g. <see cref="P:Terminal.Gui.Key.D3"/>) and the Alt-shifted key
                    (e.g. <c>Key.D3.WithAlt</c>) This behavior can be overriden by overriding <see cref="M:Terminal.Gui.View.AddKeyBindingsForHotKey(Terminal.Gui.Key,Terminal.Gui.Key)"/>.
                </para>
                <para>
                    By default, when <paramref name="hotKey"/> is <see cref="P:Terminal.Gui.Key.A"/> through <see cref="P:Terminal.Gui.Key.Z"/> key bindings
                    will be added for both the un-shifted and shifted versions. This means if the HotKey is <see cref="P:Terminal.Gui.Key.A"/>,
                    key bindings for <c>Key.A</c> and <c>Key.A.WithShift</c> will be added. This behavior can be overriden by
                    overriding <see cref="M:Terminal.Gui.View.AddKeyBindingsForHotKey(Terminal.Gui.Key,Terminal.Gui.Key)"/>.
                </para>
            </remarks>
            <param name="prevHotKey">The HotKey <paramref name="hotKey"/> is replacing. Key bindings for this key will be removed.</param>
            <param name="hotKey">The new HotKey. If <see cref="P:Terminal.Gui.Key.Empty"/> <paramref name="prevHotKey"/> bindings will be removed.</param>
            <returns><see langword="true"/> if the HotKey bindings were added.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Terminal.Gui.View.HotKeySpecifier">
            <summary>
                Gets or sets the specifier character for the hot key (e.g. '_'). Set to '\xffff' to disable automatic hot key
                setting support for this View instance. The default is '\xffff'.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.TabIndexes">
            <summary>Gets a list of the subviews that are <see cref="P:Terminal.Gui.View.TabStop"/>s.</summary>
            <value>The tabIndexes.</value>
        </member>
        <member name="P:Terminal.Gui.View.TabIndex">
            <summary>
                Indicates the index of the current <see cref="T:Terminal.Gui.View"/> from the <see cref="P:Terminal.Gui.View.TabIndexes"/> list. See also:
                <seealso cref="P:Terminal.Gui.View.TabStop"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.TabStop">
            <summary>
                Gets or sets whether the view is a stop-point for keyboard navigation of focus. Will be <see langword="true"/>
                only if the <see cref="P:Terminal.Gui.View.CanFocus"/> is also <see langword="true"/>. Set to <see langword="false"/> to prevent the
                view from being a stop-point for keyboard navigation.
            </summary>
            <remarks>
                The default keyboard navigation keys are <c>Key.Tab</c> and <c>Key>Tab.WithShift</c>. These can be changed by
                modifying the key bindings (see <see cref="M:Terminal.Gui.KeyBindings.Add(Terminal.Gui.Key,Terminal.Gui.Command[])"/>) of the SuperView.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.NewKeyDownEvent(Terminal.Gui.Key)">
            <summary>
                If the view is enabled, processes a new key down event and returns <see langword="true"/> if the event was
                handled.
            </summary>
            <remarks>
                <para>
                    If the view has a sub view that is focused, <see cref="M:Terminal.Gui.View.NewKeyDownEvent(Terminal.Gui.Key)"/> will be called on the focused view
                    first.
                </para>
                <para>
                    If the focused sub view does not handle the key press, this method calls <see cref="M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.Key)"/> to allow the
                    view to pre-process the key press. If <see cref="M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.Key)"/> returns <see langword="false"/>, this method then
                    calls <see cref="M:Terminal.Gui.View.OnInvokingKeyBindings(Terminal.Gui.Key)"/> to invoke any key bindings. Then, only if no key bindings are
                    handled, <see cref="M:Terminal.Gui.View.OnProcessKeyDown(Terminal.Gui.Key)"/> will be called allowing the view to process the key press.
                </para>
                <para>See <see href="../docs/keyboard.md">for an overview of Terminal.Gui keyboard APIs.</see></para>
            </remarks>
            <param name="keyEvent"></param>
            <returns><see langword="true"/> if the event was handled.</returns>
        </member>
        <member name="M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.Key)">
            <summary>
                Low-level API called when the user presses a key, allowing a view to pre-process the key down event. This is
                called from <see cref="M:Terminal.Gui.View.NewKeyDownEvent(Terminal.Gui.Key)"/> before <see cref="M:Terminal.Gui.View.OnInvokingKeyBindings(Terminal.Gui.Key)"/>.
            </summary>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
            <returns>
                <see langword="false"/> if the key press was not handled. <see langword="true"/> if the keypress was handled
                and no other view should see it.
            </returns>
            <remarks>
                <para>
                    For processing <see cref="P:Terminal.Gui.View.HotKey"/>s and commands, use <see cref="T:Terminal.Gui.Command"/> and
                    <see cref="M:Terminal.Gui.KeyBindings.Add(Terminal.Gui.Key,Terminal.Gui.Command[])"/>instead.
                </para>
                <para>Fires the <see cref="E:Terminal.Gui.View.KeyDown"/> event.</para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.KeyDown">
            <summary>
                Invoked when the user presses a key, allowing subscribers to pre-process the key down event. This is fired
                from <see cref="M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.Key)"/> before <see cref="M:Terminal.Gui.View.OnInvokingKeyBindings(Terminal.Gui.Key)"/>. Set <see cref="P:Terminal.Gui.Key.Handled"/> to true to
                stop the key from being processed by other views.
            </summary>
            <remarks>
                <para>
                    Not all terminals support key distinct up notifications, Applications should avoid depending on distinct
                    KeyUp events.
                </para>
                <para>See <see href="../docs/keyboard.md">for an overview of Terminal.Gui keyboard APIs.</see></para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnProcessKeyDown(Terminal.Gui.Key)">
            <summary>
                Low-level API called when the user presses a key, allowing views do things during key down events. This is
                called from <see cref="M:Terminal.Gui.View.NewKeyDownEvent(Terminal.Gui.Key)"/> after <see cref="M:Terminal.Gui.View.OnInvokingKeyBindings(Terminal.Gui.Key)"/>.
            </summary>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
            <returns>
                <see langword="false"/> if the key press was not handled. <see langword="true"/> if the keypress was handled
                and no other view should see it.
            </returns>
            <remarks>
                <para>
                    Override <see cref="M:Terminal.Gui.View.OnProcessKeyDown(Terminal.Gui.Key)"/> to override the behavior of how the base class processes key down
                    events.
                </para>
                <para>
                    For processing <see cref="P:Terminal.Gui.View.HotKey"/>s and commands, use <see cref="T:Terminal.Gui.Command"/> and
                    <see cref="M:Terminal.Gui.KeyBindings.Add(Terminal.Gui.Key,Terminal.Gui.Command[])"/>instead.
                </para>
                <para>Fires the <see cref="E:Terminal.Gui.View.ProcessKeyDown"/> event.</para>
                <para>
                    Not all terminals support distinct key up notifications; applications should avoid depending on distinct
                    KeyUp events.
                </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.ProcessKeyDown">
            <summary>
                Invoked when the user presses a key, allowing subscribers to do things during key down events. Set
                <see cref="P:Terminal.Gui.Key.Handled"/> to true to stop the key from being processed by other views. Invoked after
                <see cref="E:Terminal.Gui.View.KeyDown"/> and before <see cref="E:Terminal.Gui.View.InvokingKeyBindings"/>.
            </summary>
            <remarks>
                <para>
                    SubViews can use the <see cref="E:Terminal.Gui.View.ProcessKeyDown"/> of their super view override the default behavior of when
                    key bindings are invoked.
                </para>
                <para>
                    Not all terminals support distinct key up notifications; applications should avoid depending on distinct
                    KeyUp events.
                </para>
                <para>See <see href="../docs/keyboard.md">for an overview of Terminal.Gui keyboard APIs.</see></para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.NewKeyUpEvent(Terminal.Gui.Key)">
            <summary>
                If the view is enabled, processes a new key up event and returns <see langword="true"/> if the event was
                handled. Called before <see cref="M:Terminal.Gui.View.NewKeyDownEvent(Terminal.Gui.Key)"/>.
            </summary>
            <remarks>
                <para>
                    Not all terminals support key distinct down/up notifications, Applications should avoid depending on distinct
                    KeyUp events.
                </para>
                <para>
                    If the view has a sub view that is focused, <see cref="M:Terminal.Gui.View.NewKeyUpEvent(Terminal.Gui.Key)"/> will be called on the focused view
                    first.
                </para>
                <para>
                    If the focused sub view does not handle the key press, this method calls <see cref="M:Terminal.Gui.View.OnKeyUp(Terminal.Gui.Key)"/>, which is
                    cancellable.
                </para>
                <para>See <see href="../docs/keyboard.md">for an overview of Terminal.Gui keyboard APIs.</see></para>
            </remarks>
            <param name="keyEvent"></param>
            <returns><see langword="true"/> if the event was handled.</returns>
        </member>
        <member name="M:Terminal.Gui.View.OnKeyUp(Terminal.Gui.Key)">
            <summary>Method invoked when a key is released. This method is called from <see cref="M:Terminal.Gui.View.NewKeyUpEvent(Terminal.Gui.Key)"/>.</summary>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
            <returns>
                <see langword="false"/> if the key stroke was not handled. <see langword="true"/> if no other view should see
                it.
            </returns>
            <remarks>
                Not all terminals support key distinct down/up notifications, Applications should avoid depending on distinct KeyUp
                events.
                <para>
                    Overrides must call into the base and return <see langword="true"/> if the base returns
                    <see langword="true"/>.
                </para>
                <para>See <see href="../docs/keyboard.md">for an overview of Terminal.Gui keyboard APIs.</see></para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.KeyUp">
            <summary>
                Invoked when a key is released. Set <see cref="P:Terminal.Gui.Key.Handled"/> to true to stop the key up event from being processed
                by other views.
                <remarks>
                    Not all terminals support key distinct down/up notifications, Applications should avoid depending on
                    distinct KeyDown and KeyUp events and instead should use <see cref="E:Terminal.Gui.View.KeyDown"/>.
                    <para>See <see href="../docs/keyboard.md">for an overview of Terminal.Gui keyboard APIs.</see></para>
                </remarks>
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.KeyBindings">
            <summary>Gets the key bindings for this view.</summary>
        </member>
        <member name="M:Terminal.Gui.View.OnInvokingKeyBindings(Terminal.Gui.Key)">
            <summary>
                Low-level API called when a user presses a key; invokes any key bindings set on the view. This is called
                during <see cref="M:Terminal.Gui.View.NewKeyDownEvent(Terminal.Gui.Key)"/> after <see cref="M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.Key)"/> has returned.
            </summary>
            <remarks>
                <para>Fires the <see cref="E:Terminal.Gui.View.InvokingKeyBindings"/> event.</para>
                <para>See <see href="../docs/keyboard.md">for an overview of Terminal.Gui keyboard APIs.</see></para>
            </remarks>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
            <returns>
                <see langword="false"/> if the key press was not handled. <see langword="true"/> if the keypress was handled
                and no other view should see it.
            </returns>
        </member>
        <member name="E:Terminal.Gui.View.InvokingKeyBindings">
            <summary>
                Invoked when a key is pressed that may be mapped to a key binding. Set <see cref="P:Terminal.Gui.Key.Handled"/> to true to
                stop the key from being processed by other views.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.InvokeKeyBindings(Terminal.Gui.Key)">
            <summary>
                Invokes any binding that is registered on this <see cref="T:Terminal.Gui.View"/> and matches the <paramref name="key"/>
                <para>See <see href="../docs/keyboard.md">for an overview of Terminal.Gui keyboard APIs.</see></para>
            </summary>
            <param name="key">The key event passed.</param>
            <returns>
                <see langword="null"/> if no command was bound the <paramref name="key"/>. <see langword="true"/> if
                commands were invoked and at least one handled the command. <see langword="false"/> if commands were invoked and at
                none handled the command.
            </returns>
        </member>
        <member name="M:Terminal.Gui.View.InvokeCommands(Terminal.Gui.Command[])">
            <summary>
                Invokes the specified commands.
            </summary>
            <param name="commands"></param>
            <returns>
                <see langword="null"/> if no command was found.
                <see langword="true"/> if the command was invoked and it handled the command.
                <see langword="false"/> if the command was invoked and it did not handle the command.
            </returns>
        </member>
        <member name="M:Terminal.Gui.View.InvokeCommand(Terminal.Gui.Command)">
            <summary>Invokes the specified command.</summary>
            <param name="command"></param>
            <returns>
                <see langword="null"/> if no command was found. <see langword="true"/> if the command was invoked and it
                handled the command. <see langword="false"/> if the command was invoked and it did not handle the command.
            </returns>
        </member>
        <member name="M:Terminal.Gui.View.AddCommand(Terminal.Gui.Command,System.Func{System.Nullable{System.Boolean}})">
            <summary>
                <para>
                    Sets the function that will be invoked for a <see cref="T:Terminal.Gui.Command"/>. Views should call
                    <see cref="M:Terminal.Gui.View.AddCommand(Terminal.Gui.Command,System.Func{System.Nullable{System.Boolean}})"/> for each command they support.
                </para>
                <para>
                    If <see cref="M:Terminal.Gui.View.AddCommand(Terminal.Gui.Command,System.Func{System.Nullable{System.Boolean}})"/> has already been called for <paramref name="command"/> <paramref name="f"/> will
                    replace the old one.
                </para>
            </summary>
            <param name="command">The command.</param>
            <param name="f">The function.</param>
        </member>
        <member name="M:Terminal.Gui.View.GetSupportedCommands">
            <summary>Returns all commands that are supported by this <see cref="T:Terminal.Gui.View"/>.</summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.View.HighlightStyle">
            <summary>
                Gets or sets whether the <see cref="T:Terminal.Gui.View"/> will be highlighted visually while the mouse button is
                pressed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.WantContinuousButtonPressed">
            <summary>Gets or sets whether the <see cref="T:Terminal.Gui.View"/> wants continuous button pressed events.</summary>
        </member>
        <member name="P:Terminal.Gui.View.WantMousePositionReports">
            <summary>Gets or sets whether the <see cref="T:Terminal.Gui.View"/> wants mouse position reports.</summary>
            <value><see langword="true"/> if mouse position reports are wanted; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Terminal.Gui.View.NewMouseEnterEvent(Terminal.Gui.MouseEvent)">
            <summary>
                Called by <see cref="M:Terminal.Gui.Application.OnMouseEvent(Terminal.Gui.MouseEvent)"/> when the mouse enters <see cref="P:Terminal.Gui.View.Viewport"/>. The view will
                then receive mouse events until <see cref="M:Terminal.Gui.View.NewMouseLeaveEvent(Terminal.Gui.MouseEvent)"/> is called indicating the mouse has left
                the view.
            </summary>
            <remarks>
                <para>
                    A view must be both enabled and visible to receive mouse events.
                </para>
                <para>
                    This method calls <see cref="M:Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)"/> to fire the event.
                </para>
                <para>
                    See <see cref="M:Terminal.Gui.View.SetHighlight(Terminal.Gui.HighlightStyle)"/> for more information.
                </para>
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/> if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)">
            <summary>
                Called by <see cref="M:Terminal.Gui.View.NewMouseEvent(Terminal.Gui.MouseEvent)"/> when the mouse enters <see cref="P:Terminal.Gui.View.Viewport"/>. The view will
                then receive mouse events until <see cref="M:Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)"/> is called indicating the mouse has left
                the view.
            </summary>
            <remarks>
            <para>
            Override this method or subscribe to <see cref="E:Terminal.Gui.View.MouseEnter"/> to change the default enter behavior.
            </para>
            <para>
                The coordinates are relative to <see cref="P:Terminal.Gui.View.Viewport"/>.
            </para>
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="E:Terminal.Gui.View.MouseEnter">
            <summary>Event fired when the mouse moves into the View's <see cref="P:Terminal.Gui.View.Viewport"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.View.NewMouseLeaveEvent(Terminal.Gui.MouseEvent)">
            <summary>
                Called by <see cref="M:Terminal.Gui.Application.OnMouseEvent(Terminal.Gui.MouseEvent)"/> when the mouse leaves <see cref="P:Terminal.Gui.View.Viewport"/>. The view will
                then no longer receive mouse events.
            </summary>
            <remarks>
                <para>
                    A view must be both enabled and visible to receive mouse events.
                </para>
                <para>
                    This method calls <see cref="M:Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)"/> to fire the event.
                </para>
                <para>
                    See <see cref="M:Terminal.Gui.View.SetHighlight(Terminal.Gui.HighlightStyle)"/> for more information.
                </para>
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/> if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)">
            <summary>
                Called by <see cref="M:Terminal.Gui.View.NewMouseEvent(Terminal.Gui.MouseEvent)"/> when a mouse leaves <see cref="P:Terminal.Gui.View.Viewport"/>. The view will
                no longer receive mouse events.
            </summary>
            <remarks>
            <para>
                Override this method or subscribe to <see cref="E:Terminal.Gui.View.MouseEnter"/> to change the default leave behavior.
            </para>
            <para>
                The coordinates are relative to <see cref="P:Terminal.Gui.View.Viewport"/>.
            </para>
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="E:Terminal.Gui.View.MouseLeave">
            <summary>Event fired when the mouse leaves the View's <see cref="P:Terminal.Gui.View.Viewport"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.View.NewMouseEvent(Terminal.Gui.MouseEvent)">
            <summary>
                Processes a <see cref="E:Terminal.Gui.View.MouseEvent"/>. This method is called by <see cref="M:Terminal.Gui.Application.OnMouseEvent(Terminal.Gui.MouseEvent)"/> when a mouse
                event occurs.
            </summary>
            <remarks>
                <para>
                    A view must be both enabled and visible to receive mouse events.
                </para>
                <para>
                    This method calls <see cref="M:Terminal.Gui.View.OnMouseEvent(Terminal.Gui.MouseEvent)"/> to process the event. If the event is not handled, and one of the
                    mouse buttons was clicked, it calls <see cref="M:Terminal.Gui.View.OnMouseClick(Terminal.Gui.MouseEventEventArgs)"/> to process the click.
                </para>
                <para>
                    See <see cref="M:Terminal.Gui.View.SetHighlight(Terminal.Gui.HighlightStyle)"/> for more information.
                </para>
                <para>
                    If <see cref="P:Terminal.Gui.View.WantContinuousButtonPressed"/> is <see langword="true"/>, the <see cref="M:Terminal.Gui.View.OnMouseClick(Terminal.Gui.MouseEventEventArgs)"/> event
                    will be invoked repeatedly while the button is pressed.
                </para>
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/> if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.HandlePressed(Terminal.Gui.MouseEvent)">
            <summary>
                For cases where the view is grabbed and the mouse is clicked, this method handles the released event (typically
                when <see cref="P:Terminal.Gui.View.WantContinuousButtonPressed"/> or <see cref="P:Terminal.Gui.View.HighlightStyle"/> are set).
            </summary>
            <remarks>
                <para>
                    Marked internal just to support unit tests
                </para>
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>    
        </member>
        <member name="M:Terminal.Gui.View.HandleReleased(Terminal.Gui.MouseEvent)">
            <summary>
                For cases where the view is grabbed and the mouse is clicked, this method handles the released event (typically
                when <see cref="P:Terminal.Gui.View.WantContinuousButtonPressed"/> or <see cref="P:Terminal.Gui.View.HighlightStyle"/> are set).
            </summary>
            <remarks>
                Marked internal just to support unit tests
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.HandleClicked(Terminal.Gui.MouseEvent)">
            <summary>
                For cases where the view is grabbed and the mouse is clicked, this method handles the click event (typically
                when <see cref="P:Terminal.Gui.View.WantContinuousButtonPressed"/> or <see cref="P:Terminal.Gui.View.HighlightStyle"/> are set).
            </summary>
            <remarks>
                Marked internal just to support unit tests
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.SetHighlight(Terminal.Gui.HighlightStyle)">
            <summary>
                Enables the highlight for the view when the mouse is pressed. Called from OnMouseEvent.
            </summary>
            <remarks>
                <para>
                    Set <see cref="P:Terminal.Gui.View.HighlightStyle"/> to have the view highlighted based on the mouse.
                </para>
                <para>
                    Calls <see cref="M:Terminal.Gui.View.OnHighlight(Terminal.Gui.HighlightStyle)"/> which fires the <see cref="E:Terminal.Gui.View.Highlight"/> event.
                </para>
                <para>
                    Marked internal just to support unit tests
                </para>
            </remarks>
            <returns><see langword="true"/>, if the Highlight event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="E:Terminal.Gui.View.Highlight">
            <summary>
                Fired when the view is highlighted. Set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <see langword="true"/>
                to implement a custom highlight scheme or prevent the view from being highlighted.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnHighlight(Terminal.Gui.HighlightStyle)">
            <summary>
                Called when the view is to be highlighted.
            </summary>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <summary>Called when a mouse event occurs within the view's <see cref="P:Terminal.Gui.View.Viewport"/>.</summary>
            <remarks>
                <para>
                    The coordinates are relative to <see cref="P:Terminal.Gui.View.Viewport"/>.
                </para>
            </remarks>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="E:Terminal.Gui.View.MouseEvent">
            <summary>Event fired when a mouse event occurs.</summary>
            <remarks>
                <para>
                    The coordinates are relative to <see cref="P:Terminal.Gui.View.Viewport"/>.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseClick(Terminal.Gui.MouseEventEventArgs)">
            <summary>Invokes the MouseClick event.</summary>
            <remarks>
                <para>
                    Called when the mouse is either clicked or double-clicked. Check
                    <see cref="P:Terminal.Gui.MouseEvent.Flags"/> to see which button was clicked.
                </para>
            </remarks>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="E:Terminal.Gui.View.MouseClick">
            <summary>Event fired when a mouse click occurs.</summary>
            <remarks>
                <para>
                    Fired when the mouse is either clicked or double-clicked. Check
                    <see cref="P:Terminal.Gui.MouseEvent.Flags"/> to see which button was clicked.
                </para>
                <para>
                    The coordinates are relative to <see cref="P:Terminal.Gui.View.Viewport"/>.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.IsAdded">
            <summary>Indicates whether the view was added to <see cref="P:Terminal.Gui.View.SuperView"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.View.IsCurrentTop">
            <summary>Returns a value indicating if this View is currently on Top (Active)</summary>
        </member>
        <member name="P:Terminal.Gui.View.Subviews">
            <summary>This returns a list of the subviews contained by this view.</summary>
            <value>The subviews.</value>
        </member>
        <member name="P:Terminal.Gui.View.SuperView">
            <summary>Returns the container for this view, or null if this view has not been added to a container.</summary>
            <value>The super view.</value>
        </member>
        <member name="M:Terminal.Gui.View.Add(Terminal.Gui.View)">
            <summary>Adds a subview (child) to this view.</summary>
            <remarks>
                <para>
                    The Views that have been added to this view can be retrieved via the <see cref="P:Terminal.Gui.View.Subviews"/> property. See also
                    <seealso cref="M:Terminal.Gui.View.Remove(Terminal.Gui.View)"/> <seealso cref="M:Terminal.Gui.View.RemoveAll"/>
                </para>
                <para>
                    Subviews will be disposed when this View is disposed. In other-words, calling this method causes
                    the lifecycle of the subviews to be transferred to this View.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.Add(Terminal.Gui.View[])">
            <summary>Adds the specified views (children) to the view.</summary>
            <param name="views">Array of one or more views (can be optional parameter).</param>
            <remarks>
                <para>
                    The Views that have been added to this view can be retrieved via the <see cref="P:Terminal.Gui.View.Subviews"/> property. See also
                    <seealso cref="M:Terminal.Gui.View.Remove(Terminal.Gui.View)"/> and <seealso cref="M:Terminal.Gui.View.RemoveAll"/>.
                </para>
                <para>
                    Subviews will be disposed when this View is disposed. In other-words, calling this method causes
                    the lifecycle of the subviews to be transferred to this View.
                </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.Added">
            <summary>Event fired when this view is added to another.</summary>
        </member>
        <member name="M:Terminal.Gui.View.BringSubviewForward(Terminal.Gui.View)">
            <summary>Moves the subview backwards in the hierarchy, only one step</summary>
            <param name="subview">The subview to send backwards</param>
            <remarks>If you want to send the view all the way to the back use SendSubviewToBack.</remarks>
        </member>
        <member name="M:Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)">
            <summary>Brings the specified subview to the front so it is drawn on top of any other views.</summary>
            <param name="subview">The subview to send to the front</param>
            <remarks><seealso cref="M:Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)"/>.</remarks>
        </member>
        <member name="M:Terminal.Gui.View.GetTopSuperView(Terminal.Gui.View,Terminal.Gui.View)">
            <summary>Get the top superview of a given <see cref="T:Terminal.Gui.View"/>.</summary>
            <returns>The superview view.</returns>
        </member>
        <member name="M:Terminal.Gui.View.OnAdded(Terminal.Gui.SuperViewChangedEventArgs)">
            <summary>Method invoked when a subview is being added to this view.</summary>
            <param name="e">Event where <see cref="P:Terminal.Gui.ViewEventArgs.View"/> is the subview being added.</param>
        </member>
        <member name="M:Terminal.Gui.View.OnRemoved(Terminal.Gui.SuperViewChangedEventArgs)">
            <summary>Method invoked when a subview is being removed from this view.</summary>
            <param name="e">Event args describing the subview being removed.</param>
        </member>
        <member name="M:Terminal.Gui.View.Remove(Terminal.Gui.View)">
            <summary>Removes a subview added via <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> or <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View[])"/> from this View.</summary>
            <remarks>
                <para>
                    Normally Subviews will be disposed when this View is disposed. Removing a Subview causes ownership of the
                    Subview's
                    lifecycle to be transferred to the caller; the caller muse call <see cref="M:Terminal.Gui.View.Dispose(System.Boolean)"/>.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.RemoveAll">
            <summary>
                Removes all subviews (children) added via <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> or <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View[])"/> from this View.
            </summary>
            <remarks>
                <para>
                    Normally Subviews will be disposed when this View is disposed. Removing a Subview causes ownership of the
                    Subview's
                    lifecycle to be transferred to the caller; the caller must call <see cref="M:Terminal.Gui.View.Dispose(System.Boolean)"/> on any Views that were
                    added.
                </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.Removed">
            <summary>Event fired when this view is removed from another.</summary>
        </member>
        <member name="M:Terminal.Gui.View.SendSubviewBackwards(Terminal.Gui.View)">
            <summary>Moves the subview backwards in the hierarchy, only one step</summary>
            <param name="subview">The subview to send backwards</param>
            <remarks>If you want to send the view all the way to the back use SendSubviewToBack.</remarks>
        </member>
        <member name="M:Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)">
            <summary>Sends the specified subview to the front so it is the first view drawn</summary>
            <param name="subview">The subview to send to the front</param>
            <remarks><seealso cref="M:Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)"/>.</remarks>
        </member>
        <member name="T:Terminal.Gui.View.NavigationDirection">
            <summary>Exposed as `internal` for unit tests. Indicates focus navigation direction.</summary>
        </member>
        <member name="F:Terminal.Gui.View.NavigationDirection.Forward">
            <summary>Navigate forward.</summary>
        </member>
        <member name="F:Terminal.Gui.View.NavigationDirection.Backward">
            <summary>Navigate backwards.</summary>
        </member>
        <member name="E:Terminal.Gui.View.Enter">
            <summary>Event fired when the view gets focus.</summary>
        </member>
        <member name="E:Terminal.Gui.View.Leave">
            <summary>Event fired when the view looses focus.</summary>
        </member>
        <member name="P:Terminal.Gui.View.HasFocus">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.View.CanFocusChanged">
            <summary>Event fired when the <see cref="P:Terminal.Gui.View.CanFocus"/> value is being changed.</summary>
        </member>
        <member name="M:Terminal.Gui.View.OnCanFocusChanged">
            <summary>Method invoked when the <see cref="P:Terminal.Gui.View.CanFocus"/> property from a view is changed.</summary>
        </member>
        <member name="P:Terminal.Gui.View.CanFocus">
            <summary>Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.View"/> can focus.</summary>
        </member>
        <member name="M:Terminal.Gui.View.OnEnter(Terminal.Gui.View)">
            <summary>
            Called when a view gets focus.
            </summary>
            <param name="view">The view that is losing focus.</param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.OnLeave(Terminal.Gui.View)">
            <summary>Method invoked when a view loses focus.</summary>
            <param name="view">The view that is getting focus.</param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Terminal.Gui.View.Focused">
            <summary>Returns the currently focused Subview inside this view, or null if nothing is focused.</summary>
            <value>The focused.</value>
        </member>
        <member name="P:Terminal.Gui.View.MostFocused">
            <summary>Returns the most focused Subview in the chain of subviews (the leaf view that has the focus).</summary>
            <value>The most focused View.</value>
        </member>
        <member name="M:Terminal.Gui.View.SetFocus(Terminal.Gui.View)">
            <summary>Causes the specified subview to have focus.</summary>
            <param name="view">View.</param>
        </member>
        <member name="M:Terminal.Gui.View.SetFocus">
            <summary>Causes the specified view and the entire parent hierarchy to have the focused order updated.</summary>
        </member>
        <member name="M:Terminal.Gui.View.EnsureFocus">
            <summary>
                Finds the first view in the hierarchy that wants to get the focus if nothing is currently focused, otherwise,
                does nothing.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusFirst">
            <summary>Focuses the first focusable subview if one exists.</summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusLast">
            <summary>Focuses the last focusable subview if one exists.</summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusPrev">
            <summary>Focuses the previous view.</summary>
            <returns><see langword="true"/> if previous was focused, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.FocusNext">
            <summary>Focuses the next view.</summary>
            <returns><see langword="true"/> if next was focused, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Terminal.Gui.View.CursorVisibility">
            <summary>
            Gets or sets the cursor style to be used when the view is focused. The default is <see cref="F:Terminal.Gui.CursorVisibility.Invisible"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.PositionCursor">
            <summary>
                Positions the cursor in the right position based on the currently focused view in the chain.
            </summary>
            <remarks>
                <para>
                    Views that are focusable should override <see cref="M:Terminal.Gui.View.PositionCursor"/> to make sure that the cursor is
                    placed in a location that makes sense. Some terminals do not have a way of hiding the cursor, so it can be
                    distracting to have the cursor left at the last focused view. So views should make sure that they place the
                    cursor in a visually sensible place. The default implementation of <see cref="M:Terminal.Gui.View.PositionCursor"/> will place the
                    cursor at either the hotkey (if defined) or <c>0,0</c>.
                </para>
            </remarks>
            <returns>Viewport-relative cursor position. Return <see langword="null"/> to ensure the cursor is not visible.</returns>
        </member>
        <member name="P:Terminal.Gui.View.PreserveTrailingSpaces">
            <summary>
                Gets or sets whether trailing spaces at the end of word-wrapped lines are preserved
                or not when <see cref="P:Terminal.Gui.TextFormatter.WordWrap"/> is enabled.
                If <see langword="true"/> trailing spaces at the end of wrapped lines will be removed when
                <see cref="P:Terminal.Gui.View.Text"/> is formatted for display. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Text">
            <summary>
                The text displayed by the <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <remarks>
                <para>
                    The text will be drawn before any subviews are drawn.
                </para>
                <para>
                    The text will be drawn starting at the view origin (0, 0) and will be formatted according
                    to <see cref="P:Terminal.Gui.View.TextAlignment"/> and <see cref="P:Terminal.Gui.View.TextDirection"/>.
                </para>
                <para>
                    The text will word-wrap to additional lines if it does not fit horizontally. If <see cref="P:Terminal.Gui.View.ContentSize"/>'s height
                    is 1, the text will be clipped.
                </para>
                <para>If <see cref="P:Terminal.Gui.View.Width"/> or <see cref="P:Terminal.Gui.View.Height"/> are using <see cref="F:Terminal.Gui.Dim.DimAutoStyle.Text"/>,
                the <see cref="P:Terminal.Gui.View.ContentSize"/> will be adjusted to fit the text.</para>
                <para>When the text changes, the <see cref="E:Terminal.Gui.View.TextChanged"/> is fired.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnTextChanged(System.String,System.String)">
            <summary>
            Called when the <see cref="P:Terminal.Gui.View.Text"/> has changed. Fires the <see cref="E:Terminal.Gui.View.TextChanged"/> event.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="E:Terminal.Gui.View.TextChanged">
            <summary>
                Text changed event, raised when the text has changed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.TextAlignment">
            <summary>
                Gets or sets how the View's <see cref="P:Terminal.Gui.View.Text"/> is aligned horizontally when drawn. Changing this property will
                redisplay the <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <remarks>
                <para> <see cref="P:Terminal.Gui.View.Width"/> or <see cref="P:Terminal.Gui.View.Height"/> are using <see cref="F:Terminal.Gui.Dim.DimAutoStyle.Text"/>, the <see cref="P:Terminal.Gui.View.ContentSize"/> will be adjusted to fit the text.</para>
            </remarks>
            <value>The text alignment.</value>
        </member>
        <member name="P:Terminal.Gui.View.TextDirection">
            <summary>
                Gets or sets the direction of the View's <see cref="P:Terminal.Gui.View.Text"/>. Changing this property will redisplay the
                <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <remarks>
                <para> <see cref="P:Terminal.Gui.View.Width"/> or <see cref="P:Terminal.Gui.View.Height"/> are using <see cref="F:Terminal.Gui.Dim.DimAutoStyle.Text"/>, the <see cref="P:Terminal.Gui.View.ContentSize"/> will be adjusted to fit the text.</para>
            </remarks>
            <value>The text alignment.</value>
        </member>
        <member name="P:Terminal.Gui.View.TextFormatter">
            <summary>
                Gets or sets the <see cref="T:Terminal.Gui.TextFormatter"/> used to format <see cref="P:Terminal.Gui.View.Text"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.VerticalTextAlignment">
            <summary>
                Gets or sets how the View's <see cref="P:Terminal.Gui.View.Text"/> is aligned vertically when drawn. Changing this property will
                redisplay
                the <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <remarks>
                <para> <see cref="P:Terminal.Gui.View.Width"/> or <see cref="P:Terminal.Gui.View.Height"/> are using <see cref="F:Terminal.Gui.Dim.DimAutoStyle.Text"/>, the <see cref="P:Terminal.Gui.View.ContentSize"/> will be adjusted to fit the text.</para>
            </remarks>
            <value>The text alignment.</value>
        </member>
        <member name="M:Terminal.Gui.View.UpdateTextFormatterText">
            <summary>
                Can be overridden if the <see cref="P:Terminal.Gui.TextFormatter.Text"/> has
                different format than the default.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.GetSizeNeededForTextWithoutHotKey">
            <summary>
                Gets the dimensions required for <see cref="P:Terminal.Gui.View.Text"/> ignoring a <see cref="P:Terminal.Gui.TextFormatter.HotKeySpecifier"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.View.SetTextFormatterSize">
            <summary>
                Internal API. Sets <see cref="P:Terminal.Gui.View.TextFormatter"/>.Size to the current <see cref="P:Terminal.Gui.View.Viewport"/> size, adjusted for
                <see cref="P:Terminal.Gui.TextFormatter.HotKeySpecifier"/>.
            </summary>
            <remarks>
                Use this API to set <see cref="P:Terminal.Gui.TextFormatter.Size"/> when the view has changed such that the
                size required to fit the text has changed.
                changes.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.StateEventArgs`1">
            <summary><see cref="T:System.EventArgs"/> for events that convey state changes to a <see cref="T:Terminal.Gui.View"/> class.</summary>
            <remarks>
            Events that use this class can be cancellable. The <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property should be set to
            <see langword="true"/> to prevent the state change from occurring.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.StateEventArgs`1.#ctor(`0,`0)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.StateEventArgs`1"/> class.</summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Terminal.Gui.StateEventArgs`1.NewValue">
            <summary>The new state</summary>
        </member>
        <member name="P:Terminal.Gui.StateEventArgs`1.OldValue">
            <summary>The previous state</summary>
        </member>
        <member name="T:Terminal.Gui.SuperViewChangedEventArgs">
            <summary>
                Args for events where the <see cref="P:Terminal.Gui.View.SuperView"/> of a <see cref="T:Terminal.Gui.View"/> is changed (e.g.
                <see cref="E:Terminal.Gui.View.Removed"/> / <see cref="E:Terminal.Gui.View.Added"/> events).
            </summary>
        </member>
        <member name="M:Terminal.Gui.SuperViewChangedEventArgs.#ctor(Terminal.Gui.View,Terminal.Gui.View)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.SuperViewChangedEventArgs"/> class.</summary>
            <param name="parent"></param>
            <param name="child"></param>
        </member>
        <member name="P:Terminal.Gui.SuperViewChangedEventArgs.Child">
            <summary>The view that is having it's <see cref="P:Terminal.Gui.View.SuperView"/> changed</summary>
        </member>
        <member name="P:Terminal.Gui.SuperViewChangedEventArgs.Parent">
            <summary>
                The parent.  For <see cref="E:Terminal.Gui.View.Removed"/> this is the old parent (new parent now being null).  For
                <see cref="E:Terminal.Gui.View.Added"/> it is the new parent to whom view now belongs.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ViewArrangement">
            <summary>
                Describes what user actions are enabled for arranging a <see cref="T:Terminal.Gui.View"/> within it's <see cref="P:Terminal.Gui.View.SuperView"/>.
                See <see cref="P:Terminal.Gui.View.Arrangement"/>.
            </summary>
            <remarks>
            <para>
                Sizing or moving a view is only possible if the <see cref="T:Terminal.Gui.View"/> is part of a <see cref="P:Terminal.Gui.View.SuperView"/> and
                the relevant position and dimensions of the <see cref="T:Terminal.Gui.View"/> are independent of other SubViews
            </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ViewArrangement.Fixed">
            <summary>
                The view can neither be moved nor resized.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewArrangement.Movable">
            <summary>
                The view can be moved.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewArrangement.LeftResizable">
            <summary>
                The left edge of the view can be resized.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewArrangement.RightResizable">
            <summary>
                The right edge of the view can be resized.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewArrangement.TopResizable">
            <summary>
                The top edge of the view can be resized.
            </summary>
            <remarks>
                This flag is mutually exclusive with <see cref="F:Terminal.Gui.ViewArrangement.Movable"/>. If both are set, <see cref="F:Terminal.Gui.ViewArrangement.Movable"/> takes
                precedence.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ViewArrangement.BottomResizable">
            <summary>
                The bottom edge of the view can be resized.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewArrangement.Resizable">
            <summary>
                The view can be resized in any direction.
            </summary>
            <remarks>
                If <see cref="F:Terminal.Gui.ViewArrangement.Movable"/> is also set, the top will not be resizable.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.ViewportSettings">
            <summary>
                Settings for how the <see cref="P:Terminal.Gui.View.Viewport"/> behaves relative to the View's Content area.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewportSettings.None">
            <summary>
                No settings.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewportSettings.AllowNegativeX">
            <summary>
                If set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.X</c> can be set to negative values enabling scrolling beyond the left of
                the
                content area.
            </summary>
            <remarks>
                <para>
                    When not set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.X</c> is constrained to positive values.
                </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ViewportSettings.AllowNegativeY">
            <summary>
                If set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.Y</c> can be set to negative values enabling scrolling beyond the top of the
                content area.
            </summary>
            <remarks>
                <para>
                    When not set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.Y</c> is constrained to positive values.
                </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ViewportSettings.AllowNegativeLocation">
            <summary>
                If set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.Size</c> can be set to negative coordinates enabling scrolling beyond the
                top-left of the
                content area.
            </summary>
            <remarks>
                <para>
                    When not set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.Size</c> is constrained to positive coordinates.
                </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ViewportSettings.AllowXGreaterThanContentWidth">
            <summary>
                If set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.X</c> can be set values greater than <see cref="P:Terminal.Gui.View.ContentSize"/>
                <c>.Width</c> enabling scrolling beyond the right
                of the content area.
            </summary>
            <remarks>
                <para>
                    When not set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.X</c> is constrained to <see cref="P:Terminal.Gui.View.ContentSize"/>
                    <c>.Width - 1</c>.
                    This means the last column of the content will remain visible even if there is an attempt to scroll the
                    Viewport past the last column.
                </para>
                <para>
                    The practical effect of this is that the last column of the content will always be visible.
                </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ViewportSettings.AllowYGreaterThanContentHeight">
            <summary>
                If set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.Y</c> can be set values greater than <see cref="P:Terminal.Gui.View.ContentSize"/>
                <c>.Height</c> enabling scrolling beyond the right
                of the content area.
            </summary>
            <remarks>
                <para>
                    When not set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.Y</c> is constrained to <see cref="P:Terminal.Gui.View.ContentSize"/>
                    <c>.Height - 1</c>.
                    This means the last row of the content will remain visible even if there is an attempt to scroll the Viewport
                    past the last row.
                </para>
                <para>
                    The practical effect of this is that the last row of the content will always be visible.
                </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ViewportSettings.AllowLocationGreaterThanContentSize">
            <summary>
                If set, <see cref="P:Terminal.Gui.View.Viewport"/><c>.Size</c> can be set values greater than <see cref="P:Terminal.Gui.View.ContentSize"/>
                enabling scrolling beyond the bottom-right
                of the content area.
            </summary>
            <remarks>
                <para>
                    When not set, <see cref="P:Terminal.Gui.View.Viewport"/> is constrained to <see cref="P:Terminal.Gui.View.ContentSize"/><c> -1</c>.
                    This means the last column and row of the content will remain visible even if there is an attempt to
                    scroll the Viewport past the last column or row.
                </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ViewportSettings.ClipContentOnly">
            <summary>
                By default, clipping is applied to the <see cref="P:Terminal.Gui.View.Viewport"/>. Setting this flag will cause clipping to be
                applied to the visible content area.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewportSettings.ClearContentOnly">
            <summary>
                If set <see cref="M:Terminal.Gui.View.Clear"/> will clear only the portion of the content
                area that is visible within the <see cref="P:Terminal.Gui.View.Viewport"/>. This is useful for views that have a
                content area larger than the Viewport and want the area outside the content to be visually distinct.
            </summary>
            <remarks>
                <see cref="F:Terminal.Gui.ViewportSettings.ClipContentOnly"/> must be set for this setting to work (clipping beyond the visible area must be
                disabled).
            </remarks>
        </member>
        <member name="T:Terminal.Gui.ViewDiagnosticFlags">
            <summary>Enables diagnostic functions for <see cref="T:Terminal.Gui.View"/>.</summary>
        </member>
        <member name="F:Terminal.Gui.ViewDiagnosticFlags.Off">
            <summary>All diagnostics off</summary>
        </member>
        <member name="F:Terminal.Gui.ViewDiagnosticFlags.Ruler">
            <summary>
                When enabled, <see cref="M:Terminal.Gui.View.OnDrawAdornments"/> will draw a ruler in the Thickness.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewDiagnosticFlags.Padding">
            <summary>
                When enabled, <see cref="M:Terminal.Gui.View.OnDrawAdornments"/> will draw the first letter of the Adornment name ('M', 'B', or 'P')
                in the Thickness.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ViewDiagnosticFlags.MouseEnter">
            <summary>
                When enabled, <see cref="M:Terminal.Gui.Adornment.OnMouseEnter(Terminal.Gui.MouseEvent)"/> and <see cref="M:Terminal.Gui.Adornment.OnMouseLeave(Terminal.Gui.MouseEvent)"/>
                will invert the foreground and background colors.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ViewEventArgs">
            <summary>Args for events that relate to specific <see cref="P:Terminal.Gui.ViewEventArgs.View"/></summary>
        </member>
        <member name="M:Terminal.Gui.ViewEventArgs.#ctor(Terminal.Gui.View)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.ViewEventArgs"/> class.</summary>
            <param name="view">The view that the event is about.</param>
        </member>
        <member name="P:Terminal.Gui.ViewEventArgs.View">
            <summary>The view that the event is about.</summary>
            <remarks>
                Can be different from the sender of the <see cref="T:System.EventHandler"/> for example if event describes the adding a
                child then sender may be the parent while <see cref="P:Terminal.Gui.ViewEventArgs.View"/> is the child being added.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.LayoutEventArgs">
            <summary>Event arguments for the <see cref="E:Terminal.Gui.View.LayoutComplete"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.LayoutEventArgs.#ctor(System.Drawing.Size)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.LayoutEventArgs"/> class.</summary>
            <param name="oldContentSize">The view that the event is about.</param>
        </member>
        <member name="P:Terminal.Gui.LayoutEventArgs.OldContentSize">
            <summary>The viewport of the <see cref="T:Terminal.Gui.View"/> before it was laid out.</summary>
        </member>
        <member name="T:Terminal.Gui.DrawEventArgs">
            <summary>Event args for draw events</summary>
        </member>
        <member name="M:Terminal.Gui.DrawEventArgs.#ctor(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.DrawEventArgs"/> class.</summary>
            <param name="newViewport">
                The Content-relative rectangle describing the new visible viewport into the
                <see cref="T:Terminal.Gui.View"/>.
            </param>
            <param name="oldViewport">
                The Content-relative rectangle describing the old visible viewport into the
                <see cref="T:Terminal.Gui.View"/>.
            </param>
        </member>
        <member name="P:Terminal.Gui.DrawEventArgs.Cancel">
            <summary>If set to true, the draw operation will be canceled, if applicable.</summary>
        </member>
        <member name="P:Terminal.Gui.DrawEventArgs.OldViewport">
            <summary>Gets the Content-relative rectangle describing the old visible viewport into the <see cref="T:Terminal.Gui.View"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.DrawEventArgs.NewViewport">
            <summary>Gets the Content-relative rectangle describing the currently visible viewport into the <see cref="T:Terminal.Gui.View"/>.</summary>
        </member>
        <member name="T:Terminal.Gui.FocusEventArgs">
            <summary>Defines the event arguments for <see cref="M:Terminal.Gui.View.SetFocus"/></summary>
        </member>
        <member name="M:Terminal.Gui.FocusEventArgs.#ctor(Terminal.Gui.View)">
            <summary>Constructs.</summary>
            <param name="view">The view that gets or loses focus.</param>
        </member>
        <member name="P:Terminal.Gui.FocusEventArgs.Handled">
            <summary>
                Indicates if the current focus event has already been processed and the driver should stop notifying any other
                event subscriber. Its important to set this value to true specially when updating any View's layout from inside the
                subscriber method.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FocusEventArgs.View">
            <summary>Indicates the current view that gets or loses focus.</summary>
        </member>
        <member name="T:Terminal.Gui.HighlightStyle">
            <summary>
            Describes the highlight style of a view.
            </summary>
        </member>
        <member name="F:Terminal.Gui.HighlightStyle.None">
            <summary>
            No highlight.
            </summary>
        </member>
        <member name="F:Terminal.Gui.HighlightStyle.Pressed">
            <summary>
            The mouse is pressed within the <see cref="P:Terminal.Gui.View.Viewport"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.HighlightStyle.PressedOutside">
            <summary>
            The mouse is pressed but moved outside the <see cref="P:Terminal.Gui.View.Viewport"/>.
            </summary>
        </member>
        <member name="T:Terminal.Gui.HighlightEventArgs">
            <summary>
            Event arguments for the <see cref="E:Terminal.Gui.View.Highlight"/> event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.HighlightEventArgs.#ctor(Terminal.Gui.HighlightStyle)">
            <summary>
            Constructs a new instance of <see cref="T:Terminal.Gui.HighlightEventArgs"/>.
            </summary>
            <param name="style"></param>
        </member>
        <member name="P:Terminal.Gui.HighlightEventArgs.HighlightStyle">
            <summary>
            The highlight style.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Button">
            <summary>Button is a <see cref="T:Terminal.Gui.View"/> that provides an item that invokes raises the <see cref="E:Terminal.Gui.View.Accept"/> event.</summary>
            <remarks>
                <para>
                    Provides a button showing text that raises the <see cref="E:Terminal.Gui.View.Accept"/> event when clicked on with a mouse or
                    when the user presses SPACE, ENTER, or the <see cref="P:Terminal.Gui.View.HotKey"/>. The hot key is the first letter or digit
                    following the first underscore ('_') in the button text.
                </para>
                <para>Use <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> to change the hot key specifier from the default of ('_').</para>
                <para>
                    When the button is configured as the default (<see cref="P:Terminal.Gui.Button.IsDefault"/>) and the user presses the ENTER key, if
                    no other <see cref="T:Terminal.Gui.View"/> processes the key, the <see cref="T:Terminal.Gui.Button"/>'s <see cref="E:Terminal.Gui.View.Accept"/> event will
                    be fired.
                </para>
                <para>
                    Set <see cref="P:Terminal.Gui.View.WantContinuousButtonPressed"/> to <see langword="true"/> to have the <see cref="E:Terminal.Gui.View.Accept"/> event
                    invoked repeatedly while the button is pressed.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Button.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.Button"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.</summary>
            <remarks>The width of the <see cref="T:Terminal.Gui.Button"/> is computed based on the text length. The height will always be 1.</remarks>
        </member>
        <member name="P:Terminal.Gui.Button.WantContinuousButtonPressed">
            <inheritdoc />
        </member>
        <member name="P:Terminal.Gui.Button.Text">
            <inheritdoc />
        </member>
        <member name="P:Terminal.Gui.Button.HotKeySpecifier">
            <inheritdoc />
        </member>
        <member name="P:Terminal.Gui.Button.IsDefault">
            <summary>Gets or sets whether the <see cref="T:Terminal.Gui.Button"/> is the default action to activate in a dialog.</summary>
            <value><c>true</c> if is default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.Button.NoDecorations">
            <summary></summary>
        </member>
        <member name="P:Terminal.Gui.Button.NoPadding">
            <summary></summary>
        </member>
        <member name="M:Terminal.Gui.Button.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.UpdateTextFormatterText">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.CheckBox">
            <summary>The <see cref="T:Terminal.Gui.CheckBox"/> <see cref="T:Terminal.Gui.View"/> shows an on/off toggle that the user can set</summary>
        </member>
        <member name="M:Terminal.Gui.CheckBox.#ctor">
            <summary>
                Initializes a new instance of <see cref="T:Terminal.Gui.CheckBox"/> based on the given text, using
                <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="P:Terminal.Gui.CheckBox.Text">
            <inheritdoc />
        </member>
        <member name="P:Terminal.Gui.CheckBox.HotKeySpecifier">
            <inheritdoc />
        </member>
        <member name="P:Terminal.Gui.CheckBox.AllowNullChecked">
            <summary>
                If <see langword="true"/> allows <see cref="P:Terminal.Gui.CheckBox.Checked"/> to be null, true or false. If <see langword="false"/>
                only allows <see cref="P:Terminal.Gui.CheckBox.Checked"/> to be true or false.
            </summary>
        </member>
        <member name="P:Terminal.Gui.CheckBox.Checked">
            <summary>The state of the <see cref="T:Terminal.Gui.CheckBox"/></summary>
        </member>
        <member name="M:Terminal.Gui.CheckBox.OnToggled">
            <summary>Called when the <see cref="P:Terminal.Gui.CheckBox.Checked"/> property changes. Invokes the <see cref="E:Terminal.Gui.CheckBox.Toggled"/> event.</summary>
            <remarks>
            </remarks>
            <returns>If <see langword="true"/> the <see cref="E:Terminal.Gui.CheckBox.Toggled"/> event was canceled.</returns>
        </member>
        <member name="E:Terminal.Gui.CheckBox.Toggled">
            <summary>Toggled event, raised when the <see cref="T:Terminal.Gui.CheckBox"/> is toggled.</summary>
            <remarks>
            <para>
               This event can be cancelled. If cancelled, the <see cref="T:Terminal.Gui.CheckBox"/> will not change its state.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.CheckBox.UpdateTextFormatterText">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ColorEventArgs">
            <summary>Event arguments for the <see cref="P:Terminal.Gui.ColorEventArgs.Color"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.ColorEventArgs.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.ColorEventArgs"/></summary>
        </member>
        <member name="P:Terminal.Gui.ColorEventArgs.Color">
            <summary>The new Thickness.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorEventArgs.PreviousColor">
            <summary>The previous Thickness.</summary>
        </member>
        <member name="T:Terminal.Gui.ColorPicker">
            <summary>The <see cref="T:Terminal.Gui.ColorPicker"/> <see cref="T:Terminal.Gui.View"/> Color picker.</summary>
        </member>
        <member name="F:Terminal.Gui.ColorPicker._cols">
            <summary>Columns of color boxes</summary>
        </member>
        <member name="F:Terminal.Gui.ColorPicker._rows">
            <summary>Rows of color boxes</summary>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.ColorPicker"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorPicker.BoxHeight">
            <summary>Height of a color box</summary>
        </member>
        <member name="P:Terminal.Gui.ColorPicker.BoxWidth">
            <summary>Width of a color box</summary>
        </member>
        <member name="P:Terminal.Gui.ColorPicker.Cursor">
            <summary>Cursor for the selected color.</summary>
        </member>
        <member name="P:Terminal.Gui.ColorPicker.SelectedColor">
            <summary>Selected color.</summary>
        </member>
        <member name="E:Terminal.Gui.ColorPicker.ColorChanged">
            <summary>Fired when a color is picked.</summary>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.MoveLeft">
            <summary>Moves the selected item index to the previous column.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.MoveRight">
            <summary>Moves the selected item index to the next column.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.MoveUp">
            <summary>Moves the selected item index to the previous row.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.MoveDown">
            <summary>Moves the selected item index to the next row.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.AddCommands">
            <summary>Add the commands.</summary>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.AddKeyBindings">
            <summary>Add the KeyBindinds.</summary>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.DrawColorBox(System.Int32,System.Int32,System.Boolean)">
            <summary>Draw a box for one color.</summary>
            <param name="x">X location.</param>
            <param name="y">Y location</param>
            <param name="selected"></param>
        </member>
        <member name="T:Terminal.Gui.ComboBox">
            <summary>Provides a drop-down list of items the user can select from.</summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.#ctor">
            <summary>Public constructor</summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ComboBox.HideDropdownListOnClick">
            <summary>Gets or sets if the drop-down list can be hide with a button click event.</summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.IsShow">
            <summary>Gets the drop down list state, expanded or collapsed.</summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.ReadOnly">
            <summary>If set to true its not allow any changes in the text.</summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.SearchText">
            <summary>Current search text</summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.SelectedItem">
            <summary>Gets the index of the currently selected item in the <see cref="P:Terminal.Gui.ComboBox.Source"/></summary>
            <value>The selected item or -1 none selected.</value>
        </member>
        <member name="P:Terminal.Gui.ComboBox.Source">
            <summary>Gets or sets the <see cref="T:Terminal.Gui.IListDataSource"/> backing this <see cref="T:Terminal.Gui.ComboBox"/>, enabling custom rendering.</summary>
            <value>The source.</value>
            <remarks>Use <see cref="M:Terminal.Gui.ComboBox.SetSource(System.Collections.IList)"/> to set a new <see cref="T:System.Collections.IList"/> source.</remarks>
        </member>
        <member name="P:Terminal.Gui.ComboBox.Text">
            <summary>The currently selected list item</summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.Collapse">
            <summary>
                Collapses the drop down list.  Returns true if the state chagned or false if it was already collapsed and no
                action was taken
            </summary>
        </member>
        <member name="E:Terminal.Gui.ComboBox.Collapsed">
            <summary>This event is raised when the drop-down list is collapsed.</summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.Expand">
            <summary>
                Expands the drop down list.  Returns true if the state chagned or false if it was already expanded and no
                action was taken
            </summary>
        </member>
        <member name="E:Terminal.Gui.ComboBox.Expanded">
            <summary>This event is raised when the drop-down list is expanded.</summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnCollapsed">
            <summary>Virtual method which invokes the <see cref="E:Terminal.Gui.ComboBox.Collapsed"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnExpanded">
            <summary>Virtual method which invokes the <see cref="E:Terminal.Gui.ComboBox.Expanded"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnOpenSelectedItem">
            <summary>Invokes the OnOpenSelectedItem event if it is defined.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnSelectedChanged">
            <summary>Invokes the SelectedChanged event if it is defined.</summary>
            <returns></returns>
        </member>
        <member name="E:Terminal.Gui.ComboBox.OpenSelectedItem">
            <summary>This event is raised when the user Double Clicks on an item or presses ENTER to open the selected item.</summary>
        </member>
        <member name="E:Terminal.Gui.ComboBox.SelectedItemChanged">
            <summary>This event is raised when the selected item in the <see cref="T:Terminal.Gui.ComboBox"/> has changed.</summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.SetSource(System.Collections.IList)">
            <summary>Sets the source of the <see cref="T:Terminal.Gui.ComboBox"/> to an <see cref="T:System.Collections.IList"/>.</summary>
            <value>An object implementing the IList interface.</value>
            <remarks>
                Use the <see cref="P:Terminal.Gui.ComboBox.Source"/> property to set a new <see cref="T:Terminal.Gui.IListDataSource"/> source and use custome
                rendering.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ComboBox.CalculatetHeight">
            <summary>Internal height of dynamic search list</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ComboBox.ExpandCollapse">
            <summary>Toggles the expand/collapse state of the sublist in the combo box</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ComboBox.HideList">
            <summary>Hide the search list</summary>
            Consider making public
        </member>
        <member name="M:Terminal.Gui.ComboBox.Reset(System.Boolean)">
            <summary>Reset to full original list</summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.ShowList">
            <summary>Show the search list</summary>
            Consider making public
        </member>
        <member name="T:Terminal.Gui.ContentsChangedEventArgs">
            <summary>
                Event arguments for events for when the contents of the TextView change. E.g. the
                <see cref="E:Terminal.Gui.TextView.ContentsChanged"/> event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ContentsChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new <see cref="E:Terminal.Gui.TextView.ContentsChanged"/> instance.</summary>
            <param name="currentRow">Contains the row where the change occurred.</param>
            <param name="currentColumn">Contains the column where the change occured.</param>
        </member>
        <member name="P:Terminal.Gui.ContentsChangedEventArgs.Col">
            <summary>Contains the column where the change occurred.</summary>
        </member>
        <member name="P:Terminal.Gui.ContentsChangedEventArgs.Row">
            <summary>Contains the row where the change occurred.</summary>
        </member>
        <member name="T:Terminal.Gui.DateField">
            <summary>Simple Date editing <see cref="T:Terminal.Gui.View"/></summary>
            <remarks>The <see cref="T:Terminal.Gui.DateField"/> <see cref="T:Terminal.Gui.View"/> provides date editing functionality with mouse support.</remarks>
        </member>
        <member name="M:Terminal.Gui.DateField.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.DateField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.</summary>
        </member>
        <member name="M:Terminal.Gui.DateField.#ctor(System.DateTime)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.DateField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.</summary>
            <param name="date"></param>
        </member>
        <member name="P:Terminal.Gui.DateField.Culture">
            <summary>CultureInfo for date. The default is CultureInfo.CurrentCulture.</summary>
        </member>
        <member name="P:Terminal.Gui.DateField.CursorPosition">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.DateField.Date">
            <summary>Gets or sets the date of the <see cref="T:Terminal.Gui.DateField"/>.</summary>
            <remarks></remarks>
        </member>
        <member name="E:Terminal.Gui.DateField.DateChanged">
            <summary>DateChanged event, raised when the <see cref="P:Terminal.Gui.DateField.Date"/> property has changed.</summary>
            <remarks>This event is raised when the <see cref="P:Terminal.Gui.DateField.Date"/> property changes.</remarks>
            <remarks>The passed event arguments containing the old value, new value, and format string.</remarks>
        </member>
        <member name="M:Terminal.Gui.DateField.DeleteCharLeft(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.DeleteCharRight">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.OnDateChanged(Terminal.Gui.DateTimeEventArgs{System.DateTime})">
            <summary>Event firing method for the <see cref="E:Terminal.Gui.DateField.DateChanged"/> event.</summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Terminal.Gui.DateField.OnProcessKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.DatePicker">
            <summary>The <see cref="T:Terminal.Gui.DatePicker"/> <see cref="T:Terminal.Gui.View"/> Date Picker.</summary>
        </member>
        <member name="M:Terminal.Gui.DatePicker.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.DatePicker"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.DatePicker.#ctor(System.DateTime)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.DatePicker"/> with the specified date.</summary>
        </member>
        <member name="P:Terminal.Gui.DatePicker.Culture">
            <summary>CultureInfo for date. The default is CultureInfo.CurrentCulture.</summary>
        </member>
        <member name="P:Terminal.Gui.DatePicker.Date">
            <summary>Get or set the date.</summary>
        </member>
        <member name="M:Terminal.Gui.DatePicker.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.DateTimeEventArgs`1">
            <summary>
                Defines the event arguments for <see cref="E:Terminal.Gui.DateField.DateChanged"/> and <see cref="E:Terminal.Gui.TimeField.TimeChanged"/>
                events.
            </summary>
        </member>
        <member name="M:Terminal.Gui.DateTimeEventArgs`1.#ctor(`0,`0,System.String)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.DateTimeEventArgs`1"/></summary>
            <param name="oldValue">The old <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.</param>
            <param name="newValue">The new <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.</param>
            <param name="format">The <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> format string.</param>
        </member>
        <member name="P:Terminal.Gui.DateTimeEventArgs`1.Format">
            <summary>The <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> format.</summary>
        </member>
        <member name="P:Terminal.Gui.DateTimeEventArgs`1.NewValue">
            <summary>The new <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.</summary>
        </member>
        <member name="P:Terminal.Gui.DateTimeEventArgs`1.OldValue">
            <summary>The old <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.</summary>
        </member>
        <member name="T:Terminal.Gui.Dialog">
            <summary>
                The <see cref="T:Terminal.Gui.Dialog"/> <see cref="T:Terminal.Gui.View"/> is a <see cref="T:Terminal.Gui.Window"/> that by default is centered and contains
                one or more <see cref="T:Terminal.Gui.Button"/>s. It defaults to the <c>Colors.ColorSchemes ["Dialog"]</c> color scheme and has a
                1 cell padding around the edges.
            </summary>
            <remarks>
                To run the <see cref="T:Terminal.Gui.Dialog"/> modally, create the <see cref="T:Terminal.Gui.Dialog"/>, and pass it to
                <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/>. This will execute the dialog until it terminates via the
                [ESC] or [CTRL-Q] key, or when one of the views or buttons added to the dialog calls
                <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/>.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.Dialog.ButtonAlignments">
            <summary>Determines the horizontal alignment of the Dialog buttons.</summary>
        </member>
        <member name="F:Terminal.Gui.Dialog.ButtonAlignments.Center">
            <summary>Center-aligns the buttons (the default).</summary>
        </member>
        <member name="F:Terminal.Gui.Dialog.ButtonAlignments.Justify">
            <summary>Justifies the buttons</summary>
        </member>
        <member name="F:Terminal.Gui.Dialog.ButtonAlignments.Left">
            <summary>Left-aligns the buttons</summary>
        </member>
        <member name="F:Terminal.Gui.Dialog.ButtonAlignments.Right">
            <summary>Right-aligns the buttons</summary>
        </member>
        <member name="F:Terminal.Gui.Dialog._buttons">
            <summary>
                Defines the default border styling for <see cref="T:Terminal.Gui.Dialog"/>. Can be configured via
                <see cref="T:Terminal.Gui.ConfigurationManager"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Dialog.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Dialog"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
                positioning with no <see cref="T:Terminal.Gui.Button"/>s.
            </summary>
            <remarks>
                By default, <see cref="P:Terminal.Gui.View.X"/> and <see cref="P:Terminal.Gui.View.Y"/> are set to <c>Pos.Center ()</c> and
                <see cref="P:Terminal.Gui.View.Width"/> and <see cref="P:Terminal.Gui.View.Height"/> are set to <c>Width = Dim.Percent (85)</c>, centering the
                Dialog vertically and horizontally.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Dialog.Canceled">
            <summary>Gets a value indicating whether the <see cref="T:Terminal.Gui.Dialog"/> was canceled.</summary>
            <remarks>The default value is <see langword="true"/>.</remarks>
        </member>
        <member name="P:Terminal.Gui.Dialog.ButtonAlignment">
            <summary>Determines how the <see cref="T:Terminal.Gui.Dialog"/> <see cref="T:Terminal.Gui.Button"/>s are aligned along the bottom of the dialog.</summary>
        </member>
        <member name="P:Terminal.Gui.Dialog.Buttons">
            <summary>Optional buttons to lay out at the bottom of the dialog.</summary>
        </member>
        <member name="P:Terminal.Gui.Dialog.DefaultButtonAlignment">
            <summary>The default <see cref="T:Terminal.Gui.Dialog.ButtonAlignments"/> for <see cref="T:Terminal.Gui.Dialog"/>.</summary>
            <remarks>This property can be set in a Theme.</remarks>
        </member>
        <member name="M:Terminal.Gui.Dialog.AddButton(Terminal.Gui.Button)">
            <summary>
                Adds a <see cref="T:Terminal.Gui.Button"/> to the <see cref="T:Terminal.Gui.Dialog"/>, its layout will be controlled by the
                <see cref="T:Terminal.Gui.Dialog"/>
            </summary>
            <param name="button">Button to add.</param>
        </member>
        <member name="M:Terminal.Gui.Dialog.LayoutSubviews">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.FileDialog">
            <summary>
                Modal dialog for selecting files/directories. Has auto-complete and expandable navigation pane (Recent, Root
                drives etc).
            </summary>
        </member>
        <member name="F:Terminal.Gui.FileDialog.Separators">
            <summary>Gets the Path separators for the operating system</summary>
        </member>
        <member name="F:Terminal.Gui.FileDialog._badChars">
            <summary>
                Characters to prevent entry into <see cref="F:Terminal.Gui.FileDialog._tbPath"/>. Note that this is not using
                <see cref="M:System.IO.Path.GetInvalidFileNameChars"/> because we do want to allow directory separators, arrow keys
                etc.
            </summary>
        </member>
        <member name="F:Terminal.Gui.FileDialog._onlyOneSearchLock">
            <summary>Locking object for ensuring only a single <see cref="T:Terminal.Gui.FileDialog.SearchState"/> executes at once.</summary>
        </member>
        <member name="M:Terminal.Gui.FileDialog.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.FileDialog"/> class.</summary>
        </member>
        <member name="M:Terminal.Gui.FileDialog.#ctor(System.IO.Abstractions.IFileSystem)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.FileDialog"/> class with a custom <see cref="T:System.IO.Abstractions.IFileSystem"/>.</summary>
            <remarks>This overload is mainly useful for testing.</remarks>
        </member>
        <member name="P:Terminal.Gui.FileDialog.AllowedTypes">
            <summary>
                Gets or Sets a collection of file types that the user can/must select. Only applies when
                <see cref="P:Terminal.Gui.FileDialog.OpenMode"/> is <see cref="F:Terminal.Gui.OpenMode.File"/> or <see cref="F:Terminal.Gui.OpenMode.Mixed"/>.
            </summary>
            <remarks>
                <see cref="T:Terminal.Gui.AllowedTypeAny"/> adds the option to select any type (*.*). If this collection is empty then any
                type is supported and no Types drop-down is shown.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.FileDialog.AllowsMultipleSelection">
            <summary>
                Gets or Sets a value indicating whether to allow selecting multiple existing files/directories. Defaults to
                false.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialog.CurrentFilter">
            <summary>The UI selected <see cref="T:Terminal.Gui.IAllowedType"/> from combo box. May be null.</summary>
        </member>
        <member name="P:Terminal.Gui.FileDialog.FileOperationsHandler">
            <summary>
                Gets or sets behavior of the <see cref="T:Terminal.Gui.FileDialog"/> when the user attempts to delete a selected file(s). Set
                to null to prevent deleting.
            </summary>
            <remarks>
                Ensure you use a try/catch block with appropriate error handling (e.g. showing a <see cref="T:Terminal.Gui.MessageBox"/>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.FileDialog.MaxSearchResults">
            <summary>The maximum number of results that will be collected when searching before stopping.</summary>
            <remarks>This prevents performance issues e.g. when searching root of file system for a common letter (e.g. 'e').</remarks>
        </member>
        <member name="P:Terminal.Gui.FileDialog.MultiSelected">
            <summary>
                Gets all files/directories selected or an empty collection <see cref="P:Terminal.Gui.FileDialog.AllowsMultipleSelection"/> is
                <see langword="false"/> or <see cref="M:Terminal.Gui.FileDialog.CancelSearch"/>.
            </summary>
            <remarks>If selecting only a single file/directory then you should use <see cref="P:Terminal.Gui.FileDialog.Path"/> instead.</remarks>
        </member>
        <member name="P:Terminal.Gui.FileDialog.MustExist">
            <summary>
                True if the file/folder must exist already to be selected. This prevents user from entering the name of
                something that doesn't exist. Defaults to false.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialog.OpenMode">
            <summary>
                Gets or Sets which <see cref="T:System.IO.FileSystemInfo"/> type can be selected. Defaults to
                <see cref="F:Terminal.Gui.OpenMode.Mixed"/> (i.e. <see cref="T:System.IO.DirectoryInfo"/> or <see cref="T:System.IO.FileInfo"/>).
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialog.Path">
            <summary>
                Gets or Sets the selected path in the dialog. This is the result that should be used if
                <see cref="P:Terminal.Gui.FileDialog.AllowsMultipleSelection"/> is off and <see cref="M:Terminal.Gui.FileDialog.CancelSearch"/> is true.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialog.SearchMatcher">
            <summary>
                Defines how the dialog matches files/folders when using the search box. Provide a custom implementation if you
                want to tailor how matching is performed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialog.Style">
            <summary>
                Gets settings for controlling how visual elements behave.  Style changes should be made before the
                <see cref="T:Terminal.Gui.Dialog"/> is loaded and shown to the user for the first time.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileDialog.State">
            <summary>Gets the currently open directory and known children presented in the dialog.</summary>
        </member>
        <member name="E:Terminal.Gui.FileDialog.FilesSelected">
            <summary>
                Event fired when user attempts to confirm a selection (or multi selection). Allows you to cancel the selection
                or undertake alternative behavior e.g. open a dialog "File already exists, Overwrite? yes/no".
            </summary>
        </member>
        <member name="M:Terminal.Gui.FileDialog.IsCompatibleWithAllowedExtensions(System.IO.Abstractions.IFileInfo)">
            <summary>
                Returns true if there are no <see cref="P:Terminal.Gui.FileDialog.AllowedTypes"/> or one of them agrees that <paramref name="file"/>
                <see cref="M:Terminal.Gui.IAllowedType.IsAllowed(System.String)"/>.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.FileDialog.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FileDialog.OnLoaded">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FileDialog.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FileDialog.GetDefaultTitle">
            <summary>
                Gets a default dialog title, when <see cref="P:Terminal.Gui.View.Title"/> is not set or empty, result of the function will be
                shown.
            </summary>
        </member>
        <member name="M:Terminal.Gui.FileDialog.PushState(System.IO.Abstractions.IDirectoryInfo,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>Changes the dialog such that <paramref name="d"/> is being explored.</summary>
            <param name="d"></param>
            <param name="addCurrentStateToHistory"></param>
            <param name="setPathText"></param>
            <param name="clearForward"></param>
            <param name="pathText">Optional alternate string to set path to.</param>
        </member>
        <member name="M:Terminal.Gui.FileDialog.RestoreSelection(System.IO.Abstractions.IFileSystemInfo)">
            <summary>Select <paramref name="toRestore"/> in the table view (if present)</summary>
            <param name="toRestore"></param>
        </member>
        <member name="M:Terminal.Gui.FileDialog.MatchesAllowedTypes(System.IO.Abstractions.IFileInfo)">
            <summary>Returns true if any <see cref="P:Terminal.Gui.FileDialog.AllowedTypes"/> matches <paramref name="file"/>.</summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.FileDialog.MultiRowToStats">
            <summary>
                If <see cref="P:Terminal.Gui.TableView.MultiSelect"/> is this returns a union of all <see cref="T:Terminal.Gui.FileSystemInfoStats"/> in the
                selection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.FileDialog.SearchState">
            <summary>State representing a recursive search from <see cref="P:Terminal.Gui.FileDialogState.Directory"/> downwards.</summary>
        </member>
        <member name="M:Terminal.Gui.FileDialog.SearchState.Cancel">
            <summary>
                Cancels the current search (if any).  Returns true if a search was running and cancellation was successfully
                set.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.FileSystemColorProvider">
            <summary>Provides a way to get the color of a file or directory.</summary>
        </member>
        <member name="F:Terminal.Gui.FileSystemColorProvider.ExtensionToColor">
            <summary>Mapping of file extension to color.</summary>
        </member>
        <member name="P:Terminal.Gui.FileSystemColorProvider.FilenameToColor">
            <summary>Mapping of file/dir name to color.</summary>
        </member>
        <member name="M:Terminal.Gui.FileSystemColorProvider.GetColor(System.IO.Abstractions.IFileSystemInfo)">
            <summary>Gets the color to use.</summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.FileSystemIconProvider">
            <summary>Determines which symbol to use to represent files and directories.</summary>
        </member>
        <member name="P:Terminal.Gui.FileSystemIconProvider.IsOpenGetter">
            <summary>
                Gets or sets the delegate to be used to determine opened state of directories when resolving
                <see cref="M:Terminal.Gui.FileSystemIconProvider.GetIcon(System.IO.Abstractions.IFileSystemInfo)"/>.  Defaults to always false.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileSystemIconProvider.UseNerdIcons">
            <summary>
                <para>
                    Gets or sets a flag indicating whether to use Nerd Font icons. Defaults to <see cref="P:Terminal.Gui.NerdFonts.Enable"/>
                    which can be configured by end users from their <c>./.tui/config.json</c> via
                    <see cref="T:Terminal.Gui.ConfigurationManager"/>.
                </para>
                <remarks>Enabling <see cref="P:Terminal.Gui.FileSystemIconProvider.UseNerdIcons"/> implicitly disables <see cref="P:Terminal.Gui.FileSystemIconProvider.UseUnicodeCharacters"/>.</remarks>
            </summary>
        </member>
        <member name="P:Terminal.Gui.FileSystemIconProvider.UseUnicodeCharacters">
            <summary>Gets or sets a flag indicating whether to use common unicode characters for file/directory icons.</summary>
        </member>
        <member name="M:Terminal.Gui.FileSystemIconProvider.GetIcon(System.IO.Abstractions.IFileSystemInfo)">
            <summary>
                Returns the character to use to represent <paramref name="fileSystemInfo"/> or an empty space if no icon
                should be used.
            </summary>
            <param name="fileSystemInfo">The file or directory requiring an icon.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.FileSystemIconProvider.GetIconWithOptionalSpace(System.IO.Abstractions.IFileSystemInfo)">
            <summary>
                Returns <see cref="M:Terminal.Gui.FileSystemIconProvider.GetIcon(System.IO.Abstractions.IFileSystemInfo)"/> with an extra space on the end if icon is likely to overlap
                adjacent cells.
            </summary>
        </member>
        <member name="T:Terminal.Gui.FrameView">
            <summary>
                The FrameView is a container frame that draws a frame around the contents. It is similar to a GroupBox in
                Windows.
            </summary>
        </member>
        <member name="M:Terminal.Gui.FrameView.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.FrameView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
                layout.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FrameView.DefaultBorderStyle">
            <summary>
                The default <see cref="T:Terminal.Gui.LineStyle"/> for <see cref="T:Terminal.Gui.FrameView"/>'s border. The default is
                <see cref="F:Terminal.Gui.LineStyle.Single"/>.
            </summary>
            <remarks>
                This property can be set in a Theme to change the default <see cref="T:Terminal.Gui.LineStyle"/> for all
                <see cref="T:Terminal.Gui.FrameView"/>s.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.IAnnotation">
            <summary>
                <para>Describes an overlay element that is rendered either before or after a series.</para>
                <para>
                    Annotations can be positioned either in screen space (e.g. a legend) or in graph space (e.g. a line showing
                    high point)
                </para>
                <para>Unlike <see cref="T:Terminal.Gui.ISeries"/>, annotations are allowed to draw into graph margins</para>
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAnnotation.BeforeSeries">
            <summary>
                True if annotation should be drawn before <see cref="T:Terminal.Gui.ISeries"/>.  This allows Series and later annotations to
                potentially draw over the top of this annotation.
            </summary>
        </member>
        <member name="M:Terminal.Gui.IAnnotation.Render(Terminal.Gui.GraphView)">
            <summary>
                Called once after series have been rendered (or before if <see cref="P:Terminal.Gui.IAnnotation.BeforeSeries"/> is true). Use
                <see cref="P:Terminal.Gui.View.Driver"/> to draw and <see cref="P:Terminal.Gui.View.Viewport"/> to avoid drawing outside of graph
            </summary>
            <param name="graph"></param>
        </member>
        <member name="T:Terminal.Gui.TextAnnotation">
            <summary>Displays text at a given position (in screen space or graph space)</summary>
        </member>
        <member name="P:Terminal.Gui.TextAnnotation.GraphPosition">
            <summary>
                The location in graph space to draw the <see cref="P:Terminal.Gui.TextAnnotation.Text"/>.  This annotation will only show if the point is in
                the current viewable area of the graph presented in the <see cref="T:Terminal.Gui.GraphView"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextAnnotation.ScreenPosition">
            <summary>
                The location on screen to draw the <see cref="P:Terminal.Gui.TextAnnotation.Text"/> regardless of scroll/zoom settings.  This overrides
                <see cref="P:Terminal.Gui.TextAnnotation.GraphPosition"/> if specified.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextAnnotation.Text">
            <summary>Text to display on the graph</summary>
        </member>
        <member name="P:Terminal.Gui.TextAnnotation.BeforeSeries">
            <summary>True to add text before plotting series.  Defaults to false</summary>
        </member>
        <member name="M:Terminal.Gui.TextAnnotation.Render(Terminal.Gui.GraphView)">
            <summary>Draws the annotation</summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.TextAnnotation.DrawText(Terminal.Gui.GraphView,System.Int32,System.Int32)">
            <summary>
                Draws the <see cref="P:Terminal.Gui.TextAnnotation.Text"/> at the given coordinates with truncation to avoid spilling over
                <see name="View.Viewport"/> of the <paramref name="graph"/>
            </summary>
            <param name="graph"></param>
            <param name="x">Screen x position to start drawing string</param>
            <param name="y">Screen y position to start drawing string</param>
        </member>
        <member name="T:Terminal.Gui.LegendAnnotation">
            <summary>A box containing symbol definitions e.g. meanings for colors in a graph. The 'Key' to the graph</summary>
        </member>
        <member name="F:Terminal.Gui.LegendAnnotation._entries">
            <summary>Ordered collection of entries that are rendered in the legend.</summary>
        </member>
        <member name="M:Terminal.Gui.LegendAnnotation.#ctor">
            <summary>Creates a new empty legend at the empty screen coordinates.</summary>
        </member>
        <member name="M:Terminal.Gui.LegendAnnotation.#ctor(System.Drawing.Rectangle)">
            <summary>Creates a new empty legend at the given screen coordinates.</summary>
            <param name="legendBounds">
                Defines the area available for the legend to render in (within the graph).  This is in
                screen units (i.e. not graph space)
            </param>
        </member>
        <member name="P:Terminal.Gui.LegendAnnotation.BeforeSeries">
            <summary>Returns false i.e. Legends render after series</summary>
        </member>
        <member name="M:Terminal.Gui.LegendAnnotation.Render(Terminal.Gui.GraphView)">
            <summary>Draws the Legend and all entries into the area within <see cref="P:Terminal.Gui.View.Viewport"/></summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.LegendAnnotation.AddEntry(Terminal.Gui.GraphCellToRender,System.String)">
            <summary>Adds an entry into the legend.  Duplicate entries are permissible</summary>
            <param name="graphCellToRender">The symbol appearing on the graph that should appear in the legend</param>
            <param name="text">
                Text to render on this line of the legend.  Will be truncated if outside of Legend
                <see cref="P:Terminal.Gui.View.Viewport"/>
            </param>
        </member>
        <member name="T:Terminal.Gui.PathAnnotation">
            <summary>Sequence of lines to connect points e.g. of a <see cref="T:Terminal.Gui.ScatterSeries"/></summary>
        </member>
        <member name="P:Terminal.Gui.PathAnnotation.LineColor">
            <summary>Color for the line that connects points</summary>
        </member>
        <member name="P:Terminal.Gui.PathAnnotation.LineRune">
            <summary>The symbol that gets drawn along the line, defaults to '.'</summary>
        </member>
        <member name="P:Terminal.Gui.PathAnnotation.Points">
            <summary>Points that should be connected.  Lines will be drawn between points in the order they appear in the list</summary>
        </member>
        <member name="P:Terminal.Gui.PathAnnotation.BeforeSeries">
            <summary>True to add line before plotting series.  Defaults to false</summary>
        </member>
        <member name="M:Terminal.Gui.PathAnnotation.Render(Terminal.Gui.GraphView)">
            <summary>Draws lines connecting each of the <see cref="P:Terminal.Gui.PathAnnotation.Points"/></summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.PathAnnotation.PointsToLines">
            <summary>Generates lines joining <see cref="P:Terminal.Gui.PathAnnotation.Points"/></summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Axis">
            <summary>Renders a continuous line with grid line ticks and labels</summary>
        </member>
        <member name="F:Terminal.Gui.Axis.DefaultShowLabelsEvery">
            <summary>Default value for <see cref="P:Terminal.Gui.Axis.ShowLabelsEvery"/></summary>
        </member>
        <member name="F:Terminal.Gui.Axis.LabelGetter">
            <summary>
                Allows you to control what label text is rendered for a given <see cref="P:Terminal.Gui.Axis.Increment"/> when
                <see cref="P:Terminal.Gui.Axis.ShowLabelsEvery"/> is above 0
            </summary>
        </member>
        <member name="M:Terminal.Gui.Axis.#ctor(Terminal.Gui.Orientation)">
            <summary>Populates base properties and sets the read only <see cref="P:Terminal.Gui.Axis.Orientation"/></summary>
            <param name="orientation"></param>
        </member>
        <member name="P:Terminal.Gui.Axis.Increment">
            <summary>Number of units of graph space between ticks on axis. 0 for no ticks</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Axis.Minimum">
            <summary>The minimum axis point to show.  Defaults to null (no minimum)</summary>
        </member>
        <member name="P:Terminal.Gui.Axis.Orientation">
            <summary>Direction of the axis</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Axis.ShowLabelsEvery">
            <summary>The number of <see cref="P:Terminal.Gui.Axis.Increment"/> before an label is added. 0 = never show labels</summary>
        </member>
        <member name="P:Terminal.Gui.Axis.Text">
            <summary>
                Displayed below/to left of labels (see <see cref="P:Terminal.Gui.Axis.Orientation"/>). If text is not visible, check
                <see cref="P:Terminal.Gui.GraphView.MarginBottom"/> / <see cref="P:Terminal.Gui.GraphView.MarginLeft"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Axis.Visible">
            <summary>True to render axis.  Defaults to true</summary>
        </member>
        <member name="M:Terminal.Gui.Axis.DrawAxisLabel(Terminal.Gui.GraphView,System.Int32,System.String)">
            <summary>
                Draws a custom label <paramref name="text"/> at <paramref name="screenPosition"/> units along the axis (X or Y
                depending on <see cref="P:Terminal.Gui.Axis.Orientation"/>)
            </summary>
            <param name="graph"></param>
            <param name="screenPosition"></param>
            <param name="text"></param>
        </member>
        <member name="M:Terminal.Gui.Axis.DrawAxisLabels(Terminal.Gui.GraphView)">
            <summary>Draws labels and axis <see cref="P:Terminal.Gui.Axis.Increment"/> ticks</summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Axis.DrawAxisLine(Terminal.Gui.GraphView)">
            <summary>Draws the solid line of the axis</summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Axis.Reset">
            <summary>Resets all configurable properties of the axis to default values</summary>
        </member>
        <member name="M:Terminal.Gui.Axis.DrawAxisLine(Terminal.Gui.GraphView,System.Int32,System.Int32)">
            <summary>Draws a single cell of the solid line of the axis</summary>
            <param name="graph"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:Terminal.Gui.HorizontalAxis">
            <summary>The horizontal (x axis) of a <see cref="T:Terminal.Gui.GraphView"/></summary>
        </member>
        <member name="M:Terminal.Gui.HorizontalAxis.#ctor">
            <summary>
                Creates a new instance of axis with an <see cref="T:Terminal.Gui.Orientation"/> of <see cref="F:Terminal.Gui.Orientation.Horizontal"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.HorizontalAxis.DrawAxisLabel(Terminal.Gui.GraphView,System.Int32,System.String)">
            <summary>
                Draws the given <paramref name="text"/> on the axis at x <paramref name="screenPosition"/>. For the screen y
                position use <see cref="M:Terminal.Gui.HorizontalAxis.GetAxisYPosition(Terminal.Gui.GraphView)"/>
            </summary>
            <param name="graph">Graph being drawn onto</param>
            <param name="screenPosition">Number of screen columns along the axis to take before rendering</param>
            <param name="text">Text to render under the axis tick</param>
        </member>
        <member name="M:Terminal.Gui.HorizontalAxis.DrawAxisLabels(Terminal.Gui.GraphView)">
            <summary>Draws the horizontal x axis labels and <see cref="P:Terminal.Gui.Axis.Increment"/> ticks</summary>
        </member>
        <member name="M:Terminal.Gui.HorizontalAxis.DrawAxisLine(Terminal.Gui.GraphView)">
            <summary>Draws the horizontal axis line</summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.HorizontalAxis.GetAxisYPosition(Terminal.Gui.GraphView)">
            <summary>
                Returns the Y screen position of the origin (typically 0,0) of graph space. Return value is bounded by the
                screen i.e. the axis is always rendered even if the origin is offscreen.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.HorizontalAxis.DrawAxisLine(Terminal.Gui.GraphView,System.Int32,System.Int32)">
            <summary>Draws a horizontal axis line at the given <paramref name="x"/>, <paramref name="y"/> screen coordinates</summary>
            <param name="graph"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:Terminal.Gui.VerticalAxis">
            <summary>The vertical (i.e. Y axis) of a <see cref="T:Terminal.Gui.GraphView"/></summary>
        </member>
        <member name="M:Terminal.Gui.VerticalAxis.#ctor">
            <summary>Creates a new <see cref="F:Terminal.Gui.Orientation.Vertical"/> axis</summary>
        </member>
        <member name="M:Terminal.Gui.VerticalAxis.DrawAxisLabel(Terminal.Gui.GraphView,System.Int32,System.String)">
            <summary>
                Draws the given <paramref name="text"/> on the axis at y <paramref name="screenPosition"/>. For the screen x
                position use <see cref="M:Terminal.Gui.VerticalAxis.GetAxisXPosition(Terminal.Gui.GraphView)"/>
            </summary>
            <param name="graph">Graph being drawn onto</param>
            <param name="screenPosition">Number of rows from the top of the screen (i.e. down the axis) before rendering</param>
            <param name="text">
                Text to render to the left of the axis tick.  Ensure to set <see cref="P:Terminal.Gui.GraphView.MarginLeft"/> or
                <see cref="P:Terminal.Gui.GraphView.ScrollOffset"/> sufficient that it is visible
            </param>
        </member>
        <member name="M:Terminal.Gui.VerticalAxis.DrawAxisLabels(Terminal.Gui.GraphView)">
            <summary>Draws axis <see cref="P:Terminal.Gui.Axis.Increment"/> markers and labels</summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.VerticalAxis.DrawAxisLine(Terminal.Gui.GraphView)">
            <summary>Draws the vertical axis line</summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.VerticalAxis.GetAxisXPosition(Terminal.Gui.GraphView)">
            <summary>
                Returns the X screen position of the origin (typically 0,0) of graph space. Return value is bounded by the
                screen i.e. the axis is always rendered even if the origin is offscreen.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.VerticalAxis.DrawAxisLine(Terminal.Gui.GraphView,System.Int32,System.Int32)">
            <summary>Draws a vertical axis line at the given <paramref name="x"/>, <paramref name="y"/> screen coordinates</summary>
            <param name="graph"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:Terminal.Gui.AxisIncrementToRender">
            <summary>A location on an axis of a <see cref="T:Terminal.Gui.GraphView"/> that may or may not have a label associated with it</summary>
        </member>
        <member name="M:Terminal.Gui.AxisIncrementToRender.#ctor(Terminal.Gui.Orientation,System.Int32,System.Single)">
            <summary>Describe a new section of an axis that requires an axis increment symbol and/or label</summary>
            <param name="orientation"></param>
            <param name="screen"></param>
            <param name="value"></param>
        </member>
        <member name="P:Terminal.Gui.AxisIncrementToRender.Orientation">
            <summary>Direction of the parent axis</summary>
        </member>
        <member name="P:Terminal.Gui.AxisIncrementToRender.ScreenLocation">
            <summary>The screen location (X or Y depending on <see cref="P:Terminal.Gui.AxisIncrementToRender.Orientation"/>) that the increment will be rendered at</summary>
        </member>
        <member name="P:Terminal.Gui.AxisIncrementToRender.Value">
            <summary>The value at this position on the axis in graph space</summary>
        </member>
        <member name="P:Terminal.Gui.AxisIncrementToRender.Text">
            <summary>The text (if any) that should be displayed at this axis increment</summary>
            <value></value>
        </member>
        <member name="T:Terminal.Gui.LabelGetterDelegate">
            <summary>Delegate for custom formatting of axis labels.  Determines what should be displayed at a given label</summary>
            <param name="toRender">The axis increment to which the label is attached</param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.BarSeriesBar">
            <summary>A single bar in a <see cref="T:Terminal.Gui.BarSeries"/></summary>
        </member>
        <member name="M:Terminal.Gui.BarSeriesBar.#ctor(System.String,Terminal.Gui.GraphCellToRender,System.Single)">
            <summary>
                Creates a new instance of a single bar rendered in the given <paramref name="fill"/> that extends out
                <paramref name="value"/> graph space units in the default <see cref="T:Terminal.Gui.Orientation"/>
            </summary>
            <param name="text"></param>
            <param name="fill"></param>
            <param name="value"></param>
        </member>
        <member name="P:Terminal.Gui.BarSeriesBar.Fill">
            <summary>The color and character that will be rendered in the console when the bar extends over it</summary>
        </member>
        <member name="P:Terminal.Gui.BarSeriesBar.Text">
            <summary>
                Optional text that describes the bar.  This will be rendered on the corresponding <see cref="T:Terminal.Gui.Axis"/> unless
                <see cref="P:Terminal.Gui.BarSeries.DrawLabels"/> is false
            </summary>
        </member>
        <member name="P:Terminal.Gui.BarSeriesBar.Value">
            <summary>The value in graph space X/Y (depending on <see cref="T:Terminal.Gui.Orientation"/>) to which the bar extends.</summary>
        </member>
        <member name="T:Terminal.Gui.GraphCellToRender">
            <summary>
                Describes how to render a single row/column of a <see cref="T:Terminal.Gui.GraphView"/> based on the value(s) in
                <see cref="T:Terminal.Gui.ISeries"/> at that location
            </summary>
        </member>
        <member name="M:Terminal.Gui.GraphCellToRender.#ctor(System.Text.Rune)">
            <summary>Creates instance and sets <see cref="P:Terminal.Gui.GraphCellToRender.Rune"/> with default graph coloring</summary>
            <param name="rune"></param>
        </member>
        <member name="M:Terminal.Gui.GraphCellToRender.#ctor(System.Text.Rune,Terminal.Gui.Attribute)">
            <summary>Creates instance and sets <see cref="P:Terminal.Gui.GraphCellToRender.Rune"/> with custom graph coloring</summary>
            <param name="rune"></param>
            <param name="color"></param>
        </member>
        <member name="M:Terminal.Gui.GraphCellToRender.#ctor(System.Text.Rune,System.Nullable{Terminal.Gui.Attribute})">
            <summary>Creates instance and sets <see cref="P:Terminal.Gui.GraphCellToRender.Rune"/> and <see cref="P:Terminal.Gui.GraphCellToRender.Color"/> (or default if null)</summary>
        </member>
        <member name="P:Terminal.Gui.GraphCellToRender.Color">
            <summary>Optional color to render the <see cref="P:Terminal.Gui.GraphCellToRender.Rune"/> with</summary>
        </member>
        <member name="P:Terminal.Gui.GraphCellToRender.Rune">
            <summary>The character to render in the console</summary>
        </member>
        <member name="T:Terminal.Gui.GraphView">
            <summary>View for rendering graphs (bar, scatter, etc...).</summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.#ctor">
            <summary>Creates a new graph with a 1 to 1 graph space with absolute layout.</summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.Annotations">
            <summary>Elements drawn into graph after series have been drawn e.g. Legends etc.</summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.AxisX">
            <summary>Horizontal axis.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.GraphView.AxisY">
            <summary>Vertical axis.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.GraphView.CellSize">
            <summary>
                Translates console width/height into graph space. Defaults to 1 row/col of console space being 1 unit of graph
                space.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.GraphView.GraphColor">
            <summary>The color of the background of the graph and axis/labels.</summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.MarginBottom">
            <summary>
                Amount of space to leave on bottom of the graph. Graph content (<see cref="P:Terminal.Gui.GraphView.Series"/>) will not be rendered in
                margins but axis labels may be. Use <see cref="T:Terminal.Gui.Padding"/> to add a margin outside of the GraphView.
            </summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.MarginLeft">
            <summary>
                Amount of space to leave on left of the graph. Graph content (<see cref="P:Terminal.Gui.GraphView.Series"/>) will not be rendered in
                margins but axis labels may be. Use <see cref="T:Terminal.Gui.Padding"/> to add a margin outside of the GraphView.
            </summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.ScrollOffset">
            <summary>
                The graph space position of the bottom left of the graph. Changing this scrolls the viewport around in the
                graph.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.GraphView.Series">
            <summary>Collection of data series that are rendered in the graph.</summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.DrawLine(System.Drawing.Point,System.Drawing.Point,System.Text.Rune)">
            <summary>Draws a line between two points in screen space. Can be diagonals.</summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="symbol">The symbol to use for the line</param>
        </member>
        <member name="M:Terminal.Gui.GraphView.GraphSpaceToScreen(System.Drawing.PointF)">
            <summary>Calculates the screen location for a given point in graph space. Bear in mind these may be off screen.</summary>
            <param name="location">
                Point in graph space that may or may not be represented in the visible area of graph currently
                presented.  E.g. 0,0 for origin.
            </param>
            <returns>
                Screen position (Column/Row) which would be used to render the graph <paramref name="location"/>. Note that
                this can be outside the current content area of the view.
            </returns>
        </member>
        <member name="M:Terminal.Gui.GraphView.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.GraphView.PageDown">
            <summary>Scrolls the graph down 1 page.</summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.PageUp">
            <summary>Scrolls the graph up 1 page.</summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.Reset">
            <summary>
                Clears all settings configured on the graph and resets all properties to default values (
                <see cref="P:Terminal.Gui.GraphView.CellSize"/>, <see cref="P:Terminal.Gui.GraphView.ScrollOffset"/> etc) .
            </summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.ScreenToGraphSpace(System.Int32,System.Int32)">
            <summary>Returns the section of the graph that is represented by the given screen position.</summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.GraphView.ScreenToGraphSpace(System.Drawing.Rectangle)">
            <summary>Returns the section of the graph that is represented by the screen area.</summary>
            <param name="screenArea"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.GraphView.Scroll(System.Single,System.Single)">
            <summary>
                Scrolls the view by a given number of units in graph space. See <see cref="P:Terminal.Gui.GraphView.CellSize"/> to translate this into
                rows/cols.
            </summary>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:Terminal.Gui.GraphView.SetDriverColorToGraphColor">
            <summary>
                Sets the color attribute of <see cref="P:Terminal.Gui.Application.Driver"/> to the <see cref="P:Terminal.Gui.GraphView.GraphColor"/> (if defined) or
                <see cref="T:Terminal.Gui.ColorScheme"/> otherwise.
            </summary>
        </member>
        <member name="T:Terminal.Gui.LineF">
            <summary>Describes two points in graph space and a line between them</summary>
        </member>
        <member name="M:Terminal.Gui.LineF.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Creates a new line between the points</summary>
        </member>
        <member name="P:Terminal.Gui.LineF.End">
            <summary>The end point of the line</summary>
        </member>
        <member name="P:Terminal.Gui.LineF.Start">
            <summary>The start of the line</summary>
        </member>
        <member name="T:Terminal.Gui.Orientation">
            <summary>Direction of an element (horizontal or vertical)</summary>
        </member>
        <member name="F:Terminal.Gui.Orientation.Horizontal">
            <summary>Left to right</summary>
        </member>
        <member name="F:Terminal.Gui.Orientation.Vertical">
            <summary>Bottom to top</summary>
        </member>
        <member name="T:Terminal.Gui.ISeries">
            <summary>Describes a series of data that can be rendered into a <see cref="T:Terminal.Gui.GraphView"/>></summary>
        </member>
        <member name="M:Terminal.Gui.ISeries.DrawSeries(Terminal.Gui.GraphView,System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary>
                Draws the <paramref name="graphBounds"/> section of a series into the <paramref name="graph"/> view
                <paramref name="drawBounds"/>
            </summary>
            <param name="graph">Graph series is to be drawn onto</param>
            <param name="drawBounds">Visible area of the graph in Console Screen units (excluding margins)</param>
            <param name="graphBounds">Visible area of the graph in Graph space units</param>
        </member>
        <member name="T:Terminal.Gui.ScatterSeries">
            <summary>Series composed of any number of discrete data points</summary>
        </member>
        <member name="P:Terminal.Gui.ScatterSeries.Fill">
            <summary>
                The color and character that will be rendered in the console when there are point(s) in the corresponding
                graph space. Defaults to uncolored 'dot'
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScatterSeries.Points">
            <summary>Collection of each discrete point in the series</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ScatterSeries.DrawSeries(Terminal.Gui.GraphView,System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary>Draws all points directly onto the graph</summary>
        </member>
        <member name="T:Terminal.Gui.MultiBarSeries">
            <summary>Collection of <see cref="T:Terminal.Gui.BarSeries"/> in which bars are clustered by category</summary>
        </member>
        <member name="M:Terminal.Gui.MultiBarSeries.#ctor(System.Int32,System.Single,System.Single,Terminal.Gui.Attribute[])">
            <summary>Creates a new series of clustered bars.</summary>
            <param name="numberOfBarsPerCategory">Each category has this many bars</param>
            <param name="barsEvery">How far appart to put each category (in graph space)</param>
            <param name="spacing">
                How much spacing between bars in a category (should be less than <paramref name="barsEvery"/>/
                <paramref name="numberOfBarsPerCategory"/>)
            </param>
            <param name="colors">
                Array of colors that define bar color in each category.  Length must match
                <paramref name="numberOfBarsPerCategory"/>
            </param>
        </member>
        <member name="P:Terminal.Gui.MultiBarSeries.Spacing">
            <summary>
                The number of units of graph space between bars.  Should be less than <see cref="P:Terminal.Gui.BarSeries.BarEvery"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.MultiBarSeries.SubSeries">
            <summary>
                Sub collections.  Each series contains the bars for a different category.  Thus SubSeries[0].Bars[0] is the
                first bar on the axis and SubSeries[1].Bars[0] is the second etc
            </summary>
        </member>
        <member name="M:Terminal.Gui.MultiBarSeries.DrawSeries(Terminal.Gui.GraphView,System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary>Draws all <see cref="P:Terminal.Gui.MultiBarSeries.SubSeries"/></summary>
            <param name="graph"></param>
            <param name="drawBounds"></param>
            <param name="graphBounds"></param>
        </member>
        <member name="M:Terminal.Gui.MultiBarSeries.AddBars(System.String,System.Text.Rune,System.Single[])">
            <summary>Adds a new cluster of bars</summary>
            <param name="label"></param>
            <param name="fill"></param>
            <param name="values">Values for each bar in category, must match the number of bars per category</param>
        </member>
        <member name="T:Terminal.Gui.BarSeries">
            <summary>Series of bars positioned at regular intervals</summary>
        </member>
        <member name="P:Terminal.Gui.BarSeries.BarEvery">
            <summary>
                Determines the spacing of bars along the axis. Defaults to 1 i.e. every 1 unit of graph space a bar is
                rendered. Note that you should also consider <see cref="P:Terminal.Gui.GraphView.CellSize"/> when changing this.
            </summary>
        </member>
        <member name="P:Terminal.Gui.BarSeries.Bars">
            <summary>Ordered collection of graph bars to position along axis</summary>
        </member>
        <member name="P:Terminal.Gui.BarSeries.DrawLabels">
            <summary>True to draw <see cref="P:Terminal.Gui.BarSeriesBar.Text"/> along the axis under the bar.  Defaults to true.</summary>
        </member>
        <member name="P:Terminal.Gui.BarSeries.Offset">
            <summary>
                The number of units of graph space along the axis before rendering the first bar (and subsequent bars - see
                <see cref="P:Terminal.Gui.BarSeries.BarEvery"/>).  Defaults to 0
            </summary>
        </member>
        <member name="P:Terminal.Gui.BarSeries.Orientation">
            <summary>Direction bars protrude from the corresponding axis. Defaults to vertical</summary>
        </member>
        <member name="P:Terminal.Gui.BarSeries.OverrideBarColor">
            <summary>Overrides the <see cref="P:Terminal.Gui.BarSeriesBar.Fill"/> with a fixed color</summary>
        </member>
        <member name="M:Terminal.Gui.BarSeries.DrawSeries(Terminal.Gui.GraphView,System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary>Draws bars that are currently in the <paramref name="drawBounds"/></summary>
            <param name="graph"></param>
            <param name="drawBounds">Screen area of the graph excluding margins</param>
            <param name="graphBounds">Graph space area that should be drawn into <paramref name="drawBounds"/></param>
        </member>
        <member name="M:Terminal.Gui.BarSeries.AdjustColor(Terminal.Gui.GraphCellToRender)">
            <summary>Applies any color overriding</summary>
            <param name="graphCellToRender"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.BarSeries.DrawBarLine(Terminal.Gui.GraphView,System.Drawing.Point,System.Drawing.Point,Terminal.Gui.BarSeriesBar)">
            <summary>Override to do custom drawing of the bar e.g. to apply varying color or changing the fill symbol mid bar.</summary>
            <param name="graph"></param>
            <param name="start">Screen position of the start of the bar</param>
            <param name="end">Screen position of the end of the bar</param>
            <param name="beingDrawn">The Bar that occupies this space and is being drawn</param>
        </member>
        <member name="T:Terminal.Gui.HexView">
            <summary>An hex viewer and editor <see cref="T:Terminal.Gui.View"/> over a <see cref="T:System.IO.Stream"/></summary>
            <remarks>
                <para>
                    <see cref="T:Terminal.Gui.HexView"/> provides a hex editor on top of a seekable <see cref="T:System.IO.Stream"/> with the left side
                    showing an hex dump of the values in the <see cref="T:System.IO.Stream"/> and the right side showing the contents (filtered
                    to non-control sequence ASCII characters).
                </para>
                <para>Users can switch from one side to the other by using the tab key.</para>
                <para>
                    To enable editing, set <see cref="P:Terminal.Gui.HexView.AllowEdits"/> to true. When <see cref="P:Terminal.Gui.HexView.AllowEdits"/> is true the user can
                    make changes to the hexadecimal values of the <see cref="T:System.IO.Stream"/>. Any changes are tracked in the
                    <see cref="P:Terminal.Gui.HexView.Edits"/> property (a <see cref="T:System.Collections.Generic.SortedDictionary`2"/>) indicating the position where the
                    changes were made and the new values. A convenience method, <see cref="M:Terminal.Gui.HexView.ApplyEdits(System.IO.Stream)"/> will apply the edits to
                    the <see cref="T:System.IO.Stream"/>.
                </para>
                <para>Control the first byte shown by setting the <see cref="P:Terminal.Gui.HexView.DisplayStart"/> property to an offset in the stream.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.HexView.#ctor(System.IO.Stream)">
            <summary>Initializes a <see cref="T:Terminal.Gui.HexView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.</summary>
            <param name="source">
                The <see cref="T:System.IO.Stream"/> to view and edit as hex, this <see cref="T:System.IO.Stream"/> must support seeking,
                or an exception will be thrown.
            </param>
        </member>
        <member name="M:Terminal.Gui.HexView.#ctor">
            <summary>Initializes a <see cref="T:Terminal.Gui.HexView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.</summary>
        </member>
        <member name="P:Terminal.Gui.HexView.AllowEdits">
            <summary>
                Gets or sets whether this <see cref="T:Terminal.Gui.HexView"/> allow editing of the <see cref="T:System.IO.Stream"/> of the underlying
                <see cref="T:System.IO.Stream"/>.
            </summary>
            <value><c>true</c> if allow edits; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.BytesPerLine">
            <summary>The bytes length per line.</summary>
        </member>
        <member name="P:Terminal.Gui.HexView.CursorPosition">
            <summary>Gets the current cursor position starting at one for both, line and column.</summary>
        </member>
        <member name="P:Terminal.Gui.HexView.DisplayStart">
            <summary>
                Sets or gets the offset into the <see cref="T:System.IO.Stream"/> that will displayed at the top of the
                <see cref="T:Terminal.Gui.HexView"/>
            </summary>
            <value>The display start.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.Edits">
            <summary>
                Gets a <see cref="T:System.Collections.Generic.SortedDictionary`2"/> describing the edits done to the <see cref="T:Terminal.Gui.HexView"/>.
                Each Key indicates an offset where an edit was made and the Value is the changed byte.
            </summary>
            <value>The edits.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.Position">
            <summary>Gets the current character position starting at one, related to the <see cref="T:System.IO.Stream"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.HexView.Source">
            <summary>
                Sets or gets the <see cref="T:System.IO.Stream"/> the <see cref="T:Terminal.Gui.HexView"/> is operating on; the stream must support
                seeking ( <see cref="P:System.IO.Stream.CanSeek"/> == true).
            </summary>
            <value>The source.</value>
        </member>
        <member name="M:Terminal.Gui.HexView.ApplyEdits(System.IO.Stream)">
            <summary>
                This method applies and edits made to the <see cref="T:System.IO.Stream"/> and resets the contents of the
                <see cref="P:Terminal.Gui.HexView.Edits"/> property.
            </summary>
            <param name="stream">If provided also applies the changes to the passed <see cref="T:System.IO.Stream"/></param>
            .
        </member>
        <member name="M:Terminal.Gui.HexView.DiscardEdits">
            <summary>
                This method discards the edits made to the <see cref="T:System.IO.Stream"/> by resetting the contents of the
                <see cref="P:Terminal.Gui.HexView.Edits"/> property.
            </summary>
        </member>
        <member name="E:Terminal.Gui.HexView.Edited">
            <summary>Event to be invoked when an edit is made on the <see cref="T:System.IO.Stream"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.HexView.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.HexView.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.HexView.OnEdited(Terminal.Gui.HexViewEditEventArgs)">
            <summary>Method used to invoke the <see cref="E:Terminal.Gui.HexView.Edited"/> event passing the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</summary>
            <param name="e">The key value pair.</param>
        </member>
        <member name="M:Terminal.Gui.HexView.OnPositionChanged">
            <summary>
                Method used to invoke the <see cref="E:Terminal.Gui.HexView.PositionChanged"/> event passing the <see cref="T:Terminal.Gui.HexViewEventArgs"/>
                arguments.
            </summary>
        </member>
        <member name="M:Terminal.Gui.HexView.OnProcessKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.HexView.PositionChanged">
            <summary>Event to be invoked when the position and cursor position changes.</summary>
        </member>
        <member name="M:Terminal.Gui.HexView.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.HexViewEventArgs">
            <summary>Defines the event arguments for <see cref="E:Terminal.Gui.HexView.PositionChanged"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.HexViewEventArgs.#ctor(System.Int64,System.Drawing.Point,System.Int32)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.HexViewEventArgs"/></summary>
            <param name="pos">The character position.</param>
            <param name="cursor">The cursor position.</param>
            <param name="lineLength">Line bytes length.</param>
        </member>
        <member name="P:Terminal.Gui.HexViewEventArgs.BytesPerLine">
            <summary>The bytes length per line.</summary>
        </member>
        <member name="P:Terminal.Gui.HexViewEventArgs.CursorPosition">
            <summary>Gets the current cursor position starting at one for both, line and column.</summary>
        </member>
        <member name="P:Terminal.Gui.HexViewEventArgs.Position">
            <summary>Gets the current character position starting at one, related to the <see cref="T:System.IO.Stream"/>.</summary>
        </member>
        <member name="T:Terminal.Gui.HexViewEditEventArgs">
            <summary>Defines the event arguments for <see cref="E:Terminal.Gui.HexView.Edited"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.HexViewEditEventArgs.#ctor(System.Int64,System.Byte)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.HexViewEditEventArgs"/> class.</summary>
            <param name="position"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Terminal.Gui.HexViewEditEventArgs.NewValue">
            <summary>Gets the new value for that <see cref="P:Terminal.Gui.HexViewEditEventArgs.Position"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.HexViewEditEventArgs.Position">
            <summary>Gets the location of the edit.</summary>
        </member>
        <member name="T:Terminal.Gui.ITreeViewFilter`1">
            <summary>Provides filtering for a <see cref="T:Terminal.Gui.TreeView"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.ITreeViewFilter`1.IsMatch(`0)">
            <summary>Return <see langword="true"/> if the <paramref name="model"/> should be included in the tree.</summary>
        </member>
        <member name="T:Terminal.Gui.Label">
            <summary>
                The Label <see cref="T:Terminal.Gui.View"/> displays a string at a given position and supports multiple lines separated by
                newline characters. Multi-line Labels support word wrap.
            </summary>
            <remarks>
                The <see cref="T:Terminal.Gui.Label"/> view is functionality identical to <see cref="T:Terminal.Gui.View"/> and is included for API
                backwards compatibility.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Label.Text">
            <inheritdoc />
        </member>
        <member name="P:Terminal.Gui.Label.HotKeySpecifier">
            <inheritdoc />
        </member>
        <member name="T:Terminal.Gui.Line">
            <summary>Draws a single line using the <see cref="T:Terminal.Gui.LineStyle"/> specified by <see cref="P:Terminal.Gui.View.BorderStyle"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.Line.#ctor">
            <summary>Constructs a Line object.</summary>
        </member>
        <member name="P:Terminal.Gui.Line.Orientation">
            <summary>
                The direction of the line.  If you change this you will need to manually update the Width/Height of the
                control to cover a relevant area based on the new direction.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Line.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.LineView">
            <summary>A straight line control either horizontal or vertical</summary>
        </member>
        <member name="M:Terminal.Gui.LineView.#ctor">
            <summary>Creates a horizontal line</summary>
        </member>
        <member name="M:Terminal.Gui.LineView.#ctor(Terminal.Gui.Orientation)">
            <summary>Creates a horizontal or vertical line based on <paramref name="orientation"/></summary>
        </member>
        <member name="P:Terminal.Gui.LineView.EndingAnchor">
            <summary>
                The rune to display at the end of the line (right end of horizontal line or bottom end of vertical). If not
                specified then <see cref="P:Terminal.Gui.LineView.LineRune"/> is used
            </summary>
        </member>
        <member name="P:Terminal.Gui.LineView.LineRune">
            <summary>The symbol to use for drawing the line</summary>
        </member>
        <member name="P:Terminal.Gui.LineView.Orientation">
            <summary>
                The direction of the line.  If you change this you will need to manually update the Width/Height of the
                control to cover a relevant area based on the new direction.
            </summary>
        </member>
        <member name="P:Terminal.Gui.LineView.StartingAnchor">
            <summary>
                The rune to display at the start of the line (left end of horizontal line or top end of vertical) If not
                specified then <see cref="P:Terminal.Gui.LineView.LineRune"/> is used
            </summary>
        </member>
        <member name="M:Terminal.Gui.LineView.OnDrawContent(System.Drawing.Rectangle)">
            <summary>Draws the line including any starting/ending anchors</summary>
        </member>
        <member name="T:Terminal.Gui.IListDataSource">
            <summary>Implement <see cref="T:Terminal.Gui.IListDataSource"/> to provide custom rendering for a <see cref="T:Terminal.Gui.ListView"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.IListDataSource.Count">
            <summary>Returns the number of elements to display</summary>
        </member>
        <member name="P:Terminal.Gui.IListDataSource.Length">
            <summary>Returns the maximum length of elements to display</summary>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.IsMarked(System.Int32)">
            <summary>Should return whether the specified item is currently marked.</summary>
            <returns><see langword="true"/>, if marked, <see langword="false"/> otherwise.</returns>
            <param name="item">Item index.</param>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.Render(Terminal.Gui.ListView,Terminal.Gui.ConsoleDriver,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>This method is invoked to render a specified item, the method should cover the entire provided width.</summary>
            <returns>The render.</returns>
            <param name="container">The list view to render.</param>
            <param name="driver">The console driver to render.</param>
            <param name="selected">Describes whether the item being rendered is currently selected by the user.</param>
            <param name="item">The index of the item to render, zero for the first item and so on.</param>
            <param name="col">The column where the rendering will start</param>
            <param name="line">The line where the rendering will be done.</param>
            <param name="width">The width that must be filled out.</param>
            <param name="start">The index of the string to be displayed.</param>
            <remarks>
                The default color will be set before this method is invoked, and will be based on whether the item is selected
                or not.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.SetMark(System.Int32,System.Boolean)">
            <summary>Flags the item as marked.</summary>
            <param name="item">Item index.</param>
            <param name="value">If set to <see langword="true"/> value.</param>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.ToList">
            <summary>Return the source as IList.</summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ListView">
            <summary>
                ListView <see cref="T:Terminal.Gui.View"/> renders a scrollable list of data where each item can be activated to perform an
                action.
            </summary>
            <remarks>
                <para>
                    The <see cref="T:Terminal.Gui.ListView"/> displays lists of data and allows the user to scroll through the data. Items in
                    the can be activated firing an event (with the ENTER key or a mouse double-click). If the
                    <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> property is true, elements of the list can be marked by the user.
                </para>
                <para>
                    By default <see cref="T:Terminal.Gui.ListView"/> uses <see cref="M:System.Object.ToString"/> to render the items of any
                    <see cref="T:System.Collections.IList"/> object (e.g. arrays, <see cref="T:System.Collections.Generic.List`1"/>, and other collections). Alternatively, an
                    object that implements <see cref="T:Terminal.Gui.IListDataSource"/> can be provided giving full control of what is rendered.
                </para>
                <para>
                    <see cref="T:Terminal.Gui.ListView"/> can display any object that implements the <see cref="T:System.Collections.IList"/> interface.
                    <see cref="T:System.String"/> values are converted into <see cref="T:System.String"/> values before rendering, and other values
                    are converted into <see cref="T:System.String"/> by calling <see cref="M:System.Object.ToString"/> and then converting to
                    <see cref="T:System.String"/> .
                </para>
                <para>
                    To change the contents of the ListView, set the <see cref="P:Terminal.Gui.ListView.Source"/> property (when providing custom
                    rendering via <see cref="T:Terminal.Gui.IListDataSource"/>) or call <see cref="M:Terminal.Gui.ListView.SetSource(System.Collections.IList)"/> an <see cref="T:System.Collections.IList"/> is being
                    used.
                </para>
                <para>
                    When <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> is set to true the rendering will prefix the rendered items with [x] or [ ]
                    and bind the SPACE key to toggle the selection. To implement a different marking style set
                    <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> to false and implement custom rendering.
                </para>
                <para>
                    Searching the ListView with the keyboard is supported. Users type the first characters of an item, and the
                    first item that starts with what the user types will be selected.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor">
            <summary>
                Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/>. Set the <see cref="P:Terminal.Gui.ListView.Source"/> property to display
                something.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListView.AllowsMarking">
            <summary>Gets or sets whether this <see cref="T:Terminal.Gui.ListView"/> allows items to be marked.</summary>
            <value>Set to <see langword="true"/> to allow marking elements of the list.</value>
            <remarks>
                If set to <see langword="true"/>, <see cref="T:Terminal.Gui.ListView"/> will render items marked items with "[x]", and
                unmarked items with "[ ]" spaces. SPACE key will toggle marking. The default is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ListView.AllowsMultipleSelection">
            <summary>
                If set to <see langword="true"/> more than one item can be selected. If <see langword="false"/> selecting an
                item will cause all others to be un-selected. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListView.KeystrokeNavigator">
            <summary>
                Gets the <see cref="T:Terminal.Gui.CollectionNavigator"/> that searches the <see cref="P:Terminal.Gui.ListView.Source"/> collection as the
                user types.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListView.LeftItem">
            <summary>Gets or sets the leftmost column that is currently visible (when scrolling horizontally).</summary>
            <value>The left position.</value>
        </member>
        <member name="P:Terminal.Gui.ListView.MaxLength">
            <summary>Gets the widest item in the list.</summary>
        </member>
        <member name="P:Terminal.Gui.ListView.SelectedItem">
            <summary>Gets or sets the index of the currently selected item.</summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Terminal.Gui.ListView.Source">
            <summary>Gets or sets the <see cref="T:Terminal.Gui.IListDataSource"/> backing this <see cref="T:Terminal.Gui.ListView"/>, enabling custom rendering.</summary>
            <value>The source.</value>
            <remarks>Use <see cref="M:Terminal.Gui.ListView.SetSource(System.Collections.IList)"/> to set a new <see cref="T:System.Collections.IList"/> source.</remarks>
        </member>
        <member name="P:Terminal.Gui.ListView.TopItem">
            <summary>Gets or sets the index of the item that will appear at the top of the <see cref="P:Terminal.Gui.View.Viewport"/>.</summary>
            <remarks>
            This a helper property for accessing <c>listView.Viewport.Y</c>.
            </remarks>
            <value>The top item.</value>
        </member>
        <member name="M:Terminal.Gui.ListView.AllowsAll">
            <summary>
                If <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> and <see cref="P:Terminal.Gui.ListView.AllowsMultipleSelection"/> are both <see langword="true"/>,
                unmarks all marked items other than the currently selected.
            </summary>
            <returns><see langword="true"/> if unmarking was successful.</returns>
        </member>
        <member name="M:Terminal.Gui.ListView.EnsureSelectedItemVisible">
            <summary>Ensures the selected item is always visible on the screen.</summary>
        </member>
        <member name="M:Terminal.Gui.ListView.MarkUnmarkRow">
            <summary>Marks the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> if it is not already marked.</summary>
            <returns><see langword="true"/> if the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> was marked.</returns>
        </member>
        <member name="M:Terminal.Gui.ListView.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveDown">
            <summary>Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the next item in the list, scrolling the list if needed.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveEnd">
            <summary>Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to last item in the list, scrolling the list if needed.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveHome">
            <summary>Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the first item in the list, scrolling the list if needed.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MovePageDown">
            <summary>
                Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the item just below the bottom of the visible list, scrolling if
                needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MovePageUp">
            <summary>Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the item at the top of the visible list.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveUp">
            <summary>Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the previous item in the list, scrolling the list if needed.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.OnOpenSelectedItem">
            <summary>Invokes the <see cref="E:Terminal.Gui.ListView.OpenSelectedItem"/> event if it is defined.</summary>
            <returns><see langword="true"/> if the <see cref="E:Terminal.Gui.ListView.OpenSelectedItem"/> event was fired.</returns>
        </member>
        <member name="M:Terminal.Gui.ListView.OnProcessKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.OnRowRender(Terminal.Gui.ListViewRowEventArgs)">
            <summary>Virtual method that will invoke the <see cref="E:Terminal.Gui.ListView.RowRender"/>.</summary>
            <param name="rowEventArgs"></param>
        </member>
        <member name="M:Terminal.Gui.ListView.OnSelectedChanged">
            <summary>Invokes the <see cref="E:Terminal.Gui.ListView.SelectedItemChanged"/> event if it is defined.</summary>
            <returns></returns>
        </member>
        <member name="E:Terminal.Gui.ListView.OpenSelectedItem">
            <summary>This event is raised when the user Double Clicks on an item or presses ENTER to open the selected item.</summary>
        </member>
        <member name="M:Terminal.Gui.ListView.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.ListView.RowRender">
            <summary>This event is invoked when this <see cref="T:Terminal.Gui.ListView"/> is being drawn before rendering.</summary>
        </member>
        <member name="E:Terminal.Gui.ListView.SelectedItemChanged">
            <summary>This event is raised when the selected item in the <see cref="T:Terminal.Gui.ListView"/> has changed.</summary>
        </member>
        <member name="M:Terminal.Gui.ListView.SetSource(System.Collections.IList)">
            <summary>Sets the source of the <see cref="T:Terminal.Gui.ListView"/> to an <see cref="T:System.Collections.IList"/>.</summary>
            <value>An object implementing the IList interface.</value>
            <remarks>
                Use the <see cref="P:Terminal.Gui.ListView.Source"/> property to set a new <see cref="T:Terminal.Gui.IListDataSource"/> source and use custome
                rendering.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ListView.SetSourceAsync(System.Collections.IList)">
            <summary>Sets the source to an <see cref="T:System.Collections.IList"/> value asynchronously.</summary>
            <value>An item implementing the IList interface.</value>
            <remarks>
                Use the <see cref="P:Terminal.Gui.ListView.Source"/> property to set a new <see cref="T:Terminal.Gui.IListDataSource"/> source and use custom
                rendering.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.ListWrapper">
            <summary>
                Provides a default implementation of <see cref="T:Terminal.Gui.IListDataSource"/> that renders <see cref="T:Terminal.Gui.ListView"/> items
                using <see cref="M:System.Object.ToString"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.#ctor(System.Collections.IList)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ListWrapper.Count">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ListWrapper.Length">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.Render(Terminal.Gui.ListView,Terminal.Gui.ConsoleDriver,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.IsMarked(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.SetMark(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.ToList">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.StartsWith(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ListViewItemEventArgs">
            <summary><see cref="T:System.EventArgs"/> for <see cref="T:Terminal.Gui.ListView"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.ListViewItemEventArgs.#ctor(System.Int32,System.Object)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.ListViewItemEventArgs"/></summary>
            <param name="item">The index of the <see cref="T:Terminal.Gui.ListView"/> item.</param>
            <param name="value">The <see cref="T:Terminal.Gui.ListView"/> item</param>
        </member>
        <member name="P:Terminal.Gui.ListViewItemEventArgs.Item">
            <summary>The index of the <see cref="T:Terminal.Gui.ListView"/> item.</summary>
        </member>
        <member name="P:Terminal.Gui.ListViewItemEventArgs.Value">
            <summary>The <see cref="T:Terminal.Gui.ListView"/> item.</summary>
        </member>
        <member name="T:Terminal.Gui.ListViewRowEventArgs">
            <summary><see cref="T:System.EventArgs"/> used by the <see cref="E:Terminal.Gui.ListView.RowRender"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.ListViewRowEventArgs.#ctor(System.Int32)">
            <summary>Initializes with the current row.</summary>
            <param name="row"></param>
        </member>
        <member name="P:Terminal.Gui.ListViewRowEventArgs.Row">
            <summary>The current row being rendered.</summary>
        </member>
        <member name="P:Terminal.Gui.ListViewRowEventArgs.RowAttribute">
            <summary>The <see cref="T:Terminal.Gui.Attribute"/> used by current row or null to maintain the current attribute.</summary>
        </member>
        <member name="T:Terminal.Gui.ContextMenu">
            <summary>
                ContextMenu provides a pop-up menu that can be positioned anywhere within a <see cref="T:Terminal.Gui.View"/>. ContextMenu is
                analogous to <see cref="P:Terminal.Gui.ContextMenu.MenuBar"/> and, once activated, works like a sub-menu of a <see cref="T:Terminal.Gui.MenuBarItem"/> (but
                can be positioned anywhere).
                <para>
                    By default, a ContextMenu with sub-menus is displayed in a cascading manner, where each sub-menu pops out of
                    the ContextMenu frame (either to the right or left, depending on where the ContextMenu is relative to the edge
                    of the screen). By setting <see cref="P:Terminal.Gui.ContextMenu.UseSubMenusSingleFrame"/> to <see langword="true"/>, this behavior can be
                    changed such that all sub-menus are drawn within the ContextMenu frame.
                </para>
                <para>
                    ContextMenus can be activated using the Shift-F10 key (by default; use the <see cref="P:Terminal.Gui.ContextMenu.Key"/> to change to
                    another key).
                </para>
                <para>
                    Callers can cause the ContextMenu to be activated on a right-mouse click (or other interaction) by calling
                    <see cref="M:Terminal.Gui.ContextMenu.Show"/>.
                </para>
                <para>ContextMenus are located using screen using screen coordinates and appear above all other Views.</para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.#ctor">
            <summary>Initializes a context menu with no menu items.</summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.DefaultKey">
            <summary>The default shortcut key for activating the context menu.</summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.ForceMinimumPosToZero">
            <summary>
                Sets or gets whether the context menu be forced to the right, ensuring it is not clipped, if the x position is
                less than zero. The default is <see langword="true"/> which means the context menu will be forced to the right. If
                set to <see langword="false"/>, the context menu will be clipped on the left if x is less than zero.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.Host">
            <summary>The host <see cref="T:Terminal.Gui.View"/> which position will be used, otherwise if it's null the container will be used.</summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.IsShow">
            <summary>Gets whether the ContextMenu is showing or not.</summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.Key">
            <summary>Specifies the key that will activate the context menu.</summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.MenuBar">
            <summary>Gets the <see cref="P:Terminal.Gui.ContextMenu.MenuBar"/> that is hosting this context menu.</summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.MenuItems">
            <summary>Gets or sets the menu items for this context menu.</summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.MouseFlags">
            <summary><see cref="T:Terminal.Gui.MouseFlags"/> specifies the mouse action used to activate the context menu by mouse.</summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.Position">
            <summary>Gets or sets the menu position.</summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.UseSubMenusSingleFrame">
            <summary>
                Gets or sets if sub-menus will be displayed using a "single frame" menu style. If <see langword="true"/>, the
                ContextMenu and any sub-menus that would normally cascade will be displayed within a single frame. If
                <see langword="false"/> (the default), sub-menus will cascade using separate frames for each level of the menu
                hierarchy.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.Dispose">
            <summary>Disposes the context menu object.</summary>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.Hide">
            <summary>Hides (closes) the ContextMenu.</summary>
        </member>
        <member name="E:Terminal.Gui.ContextMenu.KeyChanged">
            <summary>Event invoked when the <see cref="P:Terminal.Gui.ContextMenu.Key"/> is changed.</summary>
        </member>
        <member name="E:Terminal.Gui.ContextMenu.MouseFlagsChanged">
            <summary>Event invoked when the <see cref="P:Terminal.Gui.ContextMenu.MouseFlags"/> is changed.</summary>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.Show">
            <summary>Shows (opens) the ContextMenu, displaying the <see cref="T:Terminal.Gui.MenuItem"/>s it contains.</summary>
        </member>
        <member name="T:Terminal.Gui.MenuItemCheckStyle">
            <summary>Specifies how a <see cref="T:Terminal.Gui.MenuItem"/> shows selection state.</summary>
        </member>
        <member name="F:Terminal.Gui.MenuItemCheckStyle.NoCheck">
            <summary>The menu item will be shown normally, with no check indicator. The default.</summary>
        </member>
        <member name="F:Terminal.Gui.MenuItemCheckStyle.Checked">
            <summary>The menu item will indicate checked/un-checked state (see <see cref="F:Terminal.Gui.MenuItemCheckStyle.Checked"/>).</summary>
        </member>
        <member name="F:Terminal.Gui.MenuItemCheckStyle.Radio">
            <summary>The menu item is part of a menu radio group (see <see cref="F:Terminal.Gui.MenuItemCheckStyle.Checked"/>) and will indicate selected state.</summary>
        </member>
        <member name="T:Terminal.Gui.MenuItem">
            <summary>
                A <see cref="T:Terminal.Gui.MenuItem"/> has title, an associated help text, and an action to execute on activation. MenuItems
                can also have a checked indicator (see <see cref="P:Terminal.Gui.MenuItem.Checked"/>).
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.#ctor(Terminal.Gui.KeyCode)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.MenuItem"/></summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.#ctor(System.String,System.String,System.Action,System.Func{System.Boolean},Terminal.Gui.MenuItem,Terminal.Gui.KeyCode)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.MenuItem"/>.</summary>
            <param name="title">Title for the menu item.</param>
            <param name="help">Help text to display.</param>
            <param name="action">Action to invoke when the menu item is activated.</param>
            <param name="canExecute">Function to determine if the action can currently be executed.</param>
            <param name="parent">The <see cref="P:Terminal.Gui.MenuItem.Parent"/> of this menu item.</param>
            <param name="shortcut">The <see cref="P:Terminal.Gui.MenuItem.Shortcut"/> keystroke combination.</param>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Action">
            <summary>Gets or sets the action to be invoked when the menu item is triggered.</summary>
            <value>Method to invoke.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.AllowNullChecked">
            <summary>
                Used only if <see cref="P:Terminal.Gui.MenuItem.CheckType"/> is of <see cref="F:Terminal.Gui.MenuItemCheckStyle.Checked"/> type. If
                <see langword="true"/> allows <see cref="P:Terminal.Gui.MenuItem.Checked"/> to be null, true or false. If <see langword="false"/> only
                allows <see cref="P:Terminal.Gui.MenuItem.Checked"/> to be true or false.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.CanExecute">
            <summary>
                Gets or sets the action to be invoked to determine if the menu can be triggered. If <see cref="P:Terminal.Gui.MenuItem.CanExecute"/>
                returns <see langword="true"/> the menu item will be enabled. Otherwise, it will be disabled.
            </summary>
            <value>Function to determine if the action is can be executed or not.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Checked">
            <summary>
                Sets or gets whether the <see cref="T:Terminal.Gui.MenuItem"/> shows a check indicator or not. See
                <see cref="T:Terminal.Gui.MenuItemCheckStyle"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.CheckType">
            <summary>
                Sets or gets the <see cref="T:Terminal.Gui.MenuItemCheckStyle"/> of a menu item where <see cref="P:Terminal.Gui.MenuItem.Checked"/> is set to
                <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Data">
            <summary>Gets or sets arbitrary data for the menu item.</summary>
            <remarks>This property is not used internally.</remarks>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Help">
            <summary>Gets or sets the help text for the menu item. The help text is drawn to the right of the <see cref="P:Terminal.Gui.MenuItem.Title"/>.</summary>
            <value>The help text.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Parent">
            <summary>Gets the parent for this <see cref="T:Terminal.Gui.MenuItem"/>.</summary>
            <value>The parent.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Title">
            <summary>Gets or sets the title of the menu item .</summary>
            <value>The title.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.IsFromSubMenu">
            <summary>Gets if this <see cref="T:Terminal.Gui.MenuItem"/> is from a sub-menu.</summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.GetMenuBarItem">
            <summary>Merely a debugging aid to see the interaction with main.</summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.GetMenuItem">
            <summary>Merely a debugging aid to see the interaction with main.</summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.IsEnabled">
            <summary>
                Returns <see langword="true"/> if the menu item is enabled. This method is a wrapper around
                <see cref="P:Terminal.Gui.MenuItem.CanExecute"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.ToggleChecked">
            <summary>
                Toggle the <see cref="P:Terminal.Gui.MenuItem.Checked"/> between three states if <see cref="P:Terminal.Gui.MenuItem.AllowNullChecked"/> is
                <see langword="true"/> or between two states if <see cref="P:Terminal.Gui.MenuItem.AllowNullChecked"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.HotKey">
            <summary>
                The HotKey is used to activate a <see cref="T:Terminal.Gui.MenuItem"/> with the keyboard. HotKeys are defined by prefixing the
                <see cref="P:Terminal.Gui.MenuItem.Title"/> of a MenuItem with an underscore ('_').
                <para>
                    Pressing Alt-Hotkey for a <see cref="T:Terminal.Gui.MenuBarItem"/> (menu items on the menu bar) works even if the menu is
                    not active). Once a menu has focus and is active, pressing just the HotKey will activate the MenuItem.
                </para>
                <para>
                    For example for a MenuBar with a "_File" MenuBarItem that contains a "_New" MenuItem, Alt-F will open the
                    File menu. Pressing the N key will then activate the New MenuItem.
                </para>
                <para>See also <see cref="P:Terminal.Gui.MenuItem.Shortcut"/> which enable global key-bindings to menu items.</para>
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Shortcut">
            <summary>
                Shortcut defines a key binding to the MenuItem that will invoke the MenuItem's action globally for the
                <see cref="T:Terminal.Gui.View"/> that is the parent of the <see cref="T:Terminal.Gui.MenuBar"/> or <see cref="T:Terminal.Gui.ContextMenu"/> this
                <see cref="T:Terminal.Gui.MenuItem"/>.
                <para>
                    The <see cref="T:Terminal.Gui.KeyCode"/> will be drawn on the MenuItem to the right of the <see cref="P:Terminal.Gui.MenuItem.Title"/> and
                    <see cref="P:Terminal.Gui.MenuItem.Help"/> text. See <see cref="P:Terminal.Gui.MenuItem.ShortcutTag"/>.
                </para>
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.ShortcutTag">
            <summary>Gets the text describing the keystroke combination defined by <see cref="P:Terminal.Gui.MenuItem.Shortcut"/>.</summary>
        </member>
        <member name="T:Terminal.Gui.Menu">
            <summary>
                An internal class used to represent a menu pop-up menu. Created and managed by <see cref="T:Terminal.Gui.MenuBar"/> and
                <see cref="T:Terminal.Gui.ContextMenu"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Menu.SelectOrRun">
            <summary>Called when a key bound to Command.Select is pressed. This means a hot key was pressed.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Menu.OnInvokingKeyBindings(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Menu.OnVisibleChanged">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.MenuBarItem">
            <summary>
                <see cref="T:Terminal.Gui.MenuBarItem"/> is a menu item on  <see cref="T:Terminal.Gui.MenuBar"/>. MenuBarItems do not support
                <see cref="P:Terminal.Gui.MenuItem.Shortcut"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(System.String,System.String,System.Action,System.Func{System.Boolean},Terminal.Gui.MenuItem)">
            <summary>Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/> as a <see cref="T:Terminal.Gui.MenuItem"/>.</summary>
            <param name="title">Title for the menu item.</param>
            <param name="help">Help text to display. Will be displayed next to the Title surrounded by parentheses.</param>
            <param name="action">Action to invoke when the menu item is activated.</param>
            <param name="canExecute">Function to determine if the action can currently be executed.</param>
            <param name="parent">The parent <see cref="T:Terminal.Gui.MenuItem"/> of this if exist, otherwise is null.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(System.String,Terminal.Gui.MenuItem[],Terminal.Gui.MenuItem)">
            <summary>Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/>.</summary>
            <param name="title">Title for the menu item.</param>
            <param name="children">The items in the current menu.</param>
            <param name="parent">The parent <see cref="T:Terminal.Gui.MenuItem"/> of this if exist, otherwise is null.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(System.String,System.Collections.Generic.List{Terminal.Gui.MenuItem[]},Terminal.Gui.MenuItem)">
            <summary>Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/> with separate list of items.</summary>
            <param name="title">Title for the menu item.</param>
            <param name="children">The list of items in the current menu.</param>
            <param name="parent">The parent <see cref="T:Terminal.Gui.MenuItem"/> of this if exist, otherwise is null.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(Terminal.Gui.MenuItem[])">
            <summary>Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/>.</summary>
            <param name="children">The items in the current menu.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor">
            <summary>Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.MenuBarItem.Children">
            <summary>
                Gets or sets an array of <see cref="T:Terminal.Gui.MenuItem"/> objects that are the children of this
                <see cref="T:Terminal.Gui.MenuBarItem"/>
            </summary>
            <value>The children.</value>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.GetChildrenIndex(Terminal.Gui.MenuItem)">
            <summary>Get the index of a child <see cref="T:Terminal.Gui.MenuItem"/>.</summary>
            <param name="children"></param>
            <returns>Returns a greater than -1 if the <see cref="T:Terminal.Gui.MenuItem"/> is a child.</returns>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.IsSubMenuOf(Terminal.Gui.MenuItem)">
            <summary>Check if a <see cref="T:Terminal.Gui.MenuItem"/> is a submenu of this MenuBar.</summary>
            <param name="menuItem"></param>
            <returns>Returns <c>true</c> if it is a submenu. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.SubMenu(Terminal.Gui.MenuItem)">
            <summary>Check if a <see cref="T:Terminal.Gui.MenuItem"/> is a <see cref="T:Terminal.Gui.MenuBarItem"/>.</summary>
            <param name="menuItem"></param>
            <returns>Returns a <see cref="T:Terminal.Gui.MenuBarItem"/> or null otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.MenuBar">
            <summary>
                <para>Provides a menu bar that spans the top of a <see cref="T:Terminal.Gui.Toplevel"/> View with drop-down and cascading menus.</para>
                <para>
                    By default, any sub-sub-menus (sub-menus of the <see cref="T:Terminal.Gui.MenuItem"/>s added to <see cref="T:Terminal.Gui.MenuBarItem"/>s)
                    are displayed in a cascading manner, where each sub-sub-menu pops out of the sub-menu frame (either to the
                    right or left, depending on where the sub-menu is relative to the edge of the screen). By setting
                    <see cref="P:Terminal.Gui.MenuBar.UseSubMenusSingleFrame"/> to <see langword="true"/>, this behavior can be changed such that all
                    sub-sub-menus are drawn within a single frame below the MenuBar.
                </para>
            </summary>
            <remarks>
                <para>
                    The <see cref="T:Terminal.Gui.MenuBar"/> appears on the first row of the <see cref="T:Terminal.Gui.Toplevel"/> SuperView and uses the full
                    width.
                </para>
                <para>See also: <see cref="T:Terminal.Gui.ContextMenu"/></para>
                <para>The <see cref="T:Terminal.Gui.MenuBar"/> provides global hot keys for the application. See <see cref="P:Terminal.Gui.MenuItem.HotKey"/>.</para>
                <para>
                    When the menu is created key bindings for each menu item and its sub-menu items are added for each menu
                    item's hot key (both alone AND with AltMask) and shortcut, if defined.
                </para>
                <para>
                    If a key press matches any of the menu item's hot keys or shortcuts, the menu item's action is invoked or
                    sub-menu opened.
                </para>
                <para>
                    * If the menu bar is not open * Any shortcut defined within the menu will be invoked * Only hot keys defined
                    for the menu bar items will be invoked, and only if Alt is pressed too. * If the menu bar is open * Un-shifted
                    hot keys defined for the menu bar items will be invoked, only if the menu they belong to is open (the menu bar
                    item's text is visible). * Alt-shifted hot keys defined for the menu bar items will be invoked, only if the
                    menu they belong to is open (the menu bar item's text is visible). * If there is a visible hot key that
                    duplicates a shortcut (e.g. _File and Alt-F), the hot key wins.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MenuBar.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.MenuBar"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.IsMenuOpen">
            <summary><see langword="true"/> if the menu is open; otherwise <see langword="true"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.LastFocused">
            <summary>Gets the view that was last focused before opening the menu.</summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.Menus">
            <summary>
                Gets or sets the array of <see cref="T:Terminal.Gui.MenuBarItem"/>s for the menu. Only set this after the
                <see cref="T:Terminal.Gui.MenuBar"/> is visible.
            </summary>
            <value>The menu array.</value>
        </member>
        <member name="P:Terminal.Gui.MenuBar.MenusBorderStyle">
            <summary>
                The default <see cref="T:Terminal.Gui.LineStyle"/> for <see cref="P:Terminal.Gui.MenuBar.Menus"/>'s border. The default is
                <see cref="F:Terminal.Gui.LineStyle.Single"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.UseSubMenusSingleFrame">
            <summary>
                Gets or sets if the sub-menus must be displayed in a single or multiple frames.
                <para>
                    By default any sub-sub-menus (sub-menus of the main <see cref="T:Terminal.Gui.MenuItem"/>s) are displayed in a cascading
                    manner, where each sub-sub-menu pops out of the sub-menu frame (either to the right or left, depending on where
                    the sub-menu is relative to the edge of the screen). By setting <see cref="P:Terminal.Gui.MenuBar.UseSubMenusSingleFrame"/> to
                    <see langword="true"/>, this behavior can be changed such that all sub-sub-menus are drawn within a single
                    frame below the MenuBar.
                </para>
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.Visible">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.CloseMenu(System.Boolean)">
            <summary>Closes the Menu programmatically if open and not canceled (as though F9 were pressed).</summary>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuAllClosed">
            <summary>Raised when all the menu is closed.</summary>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuClosing">
            <summary>Raised when a menu is closing passing <see cref="T:Terminal.Gui.MenuClosingEventArgs"/>.</summary>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuOpened">
            <summary>Raised when a menu is opened.</summary>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuOpening">
            <summary>Raised as a menu is opening.</summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuAllClosed">
            <summary>Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuAllClosed"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuClosing(Terminal.Gui.MenuBarItem,System.Boolean,System.Boolean)">
            <summary>Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuClosing"/>.</summary>
            <param name="currentMenu">The current menu to be closed.</param>
            <param name="reopen">Whether the current menu will be reopen.</param>
            <param name="isSubMenu">Whether is a sub-menu or not.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuOpened">
            <summary>Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuOpened"/> event if it's defined.</summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuOpening(Terminal.Gui.MenuBarItem)">
            <summary>Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuOpening"/> event if it's defined.</summary>
            <param name="currentMenu">The current menu to be replaced.</param>
            <returns>Returns the <see cref="T:Terminal.Gui.MenuOpeningEventArgs"/></returns>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OpenMenu">
            <summary>Opens the Menu programatically, as though the F9 key were pressed.</summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.GetScreenOffset">
            <summary>Gets the superview location offset relative to the <see cref="T:Terminal.Gui.ConsoleDriver"/> location.</summary>
            <returns>The location offset.</returns>
        </member>
        <member name="M:Terminal.Gui.MenuBar.GetScreenOffsetFromCurrent">
            <summary>
                Gets the <see cref="P:Terminal.Gui.Application.Current"/> location offset relative to the <see cref="T:Terminal.Gui.ConsoleDriver"/>
                location.
            </summary>
            <returns>The location offset.</returns>
        </member>
        <member name="M:Terminal.Gui.MenuBar.SelectItem(Terminal.Gui.MenuItem)">
            <summary>Called when an item is selected; Runs the action.</summary>
            <param name="item"></param>
        </member>
        <member name="P:Terminal.Gui.MenuBar.Key">
            <summary>
                The <see cref="P:Terminal.Gui.MenuBar.Key"/> used to activate or close the menu bar by keyboard. The default is <see cref="P:Terminal.Gui.Key.F9"/>
                .
            </summary>
            <remarks>
                <para>
                    If the user presses any <see cref="P:Terminal.Gui.MenuItem.HotKey"/>s defined in the <see cref="T:Terminal.Gui.MenuBarItem"/>s, the menu
                    bar will be activated and the sub-menu will be opened.
                </para>
                <para><see cref="P:Terminal.Gui.Key.Esc"/> will close the menu bar and any open sub-menus.</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.MenuBar.UseKeysUpDownAsKeysLeftRight">
            <summary>Used for change the navigation key style.</summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.ShortcutDelimiter">
            <summary>Sets or gets the shortcut delimiter separator. The default is "+".</summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.HotKeySpecifier">
            <summary>The specifier character for the hot keys.</summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.SelectOrRun">
            <summary>
                Called when a key bound to Command.Select is pressed. Either activates the menu item or runs it, depending on
                whether it has a sub-menu. If the menu is open, it will close the menu bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnInvokingKeyBindings(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.MenuOpeningEventArgs">
            <summary>
                An <see cref="T:System.EventArgs"/> which allows passing a cancelable menu opening event or replacing with a new
                <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuOpeningEventArgs.#ctor(Terminal.Gui.MenuBarItem)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.MenuOpeningEventArgs"/>.</summary>
            <param name="currentMenu">The current <see cref="T:Terminal.Gui.MenuBarItem"/> parent.</param>
        </member>
        <member name="P:Terminal.Gui.MenuOpeningEventArgs.Cancel">
            <summary>
                Flag that allows the cancellation of the event. If set to <see langword="true"/> in the event handler, the
                event will be canceled.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuOpeningEventArgs.CurrentMenu">
            <summary>The current <see cref="T:Terminal.Gui.MenuBarItem"/> parent.</summary>
        </member>
        <member name="P:Terminal.Gui.MenuOpeningEventArgs.NewMenuBarItem">
            <summary>The new <see cref="T:Terminal.Gui.MenuBarItem"/> to be replaced.</summary>
        </member>
        <member name="T:Terminal.Gui.MenuOpenedEventArgs">
            <summary>Defines arguments for the <see cref="E:Terminal.Gui.MenuBar.MenuOpened"/> event</summary>
        </member>
        <member name="M:Terminal.Gui.MenuOpenedEventArgs.#ctor(Terminal.Gui.MenuBarItem,Terminal.Gui.MenuItem)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.MenuOpenedEventArgs"/> class</summary>
            <param name="parent"></param>
            <param name="menuItem"></param>
        </member>
        <member name="P:Terminal.Gui.MenuOpenedEventArgs.MenuItem">
            <summary>Gets the <see cref="P:Terminal.Gui.MenuOpenedEventArgs.MenuItem"/> being opened.</summary>
        </member>
        <member name="P:Terminal.Gui.MenuOpenedEventArgs.Parent">
            <summary>The parent of <see cref="P:Terminal.Gui.MenuOpenedEventArgs.MenuItem"/>. Will be null if menu opening is the root.</summary>
        </member>
        <member name="T:Terminal.Gui.MenuClosingEventArgs">
            <summary>An <see cref="T:System.EventArgs"/> which allows passing a cancelable menu closing event.</summary>
        </member>
        <member name="M:Terminal.Gui.MenuClosingEventArgs.#ctor(Terminal.Gui.MenuBarItem,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.MenuClosingEventArgs"/>.</summary>
            <param name="currentMenu">The current <see cref="T:Terminal.Gui.MenuBarItem"/> parent.</param>
            <param name="reopen">Whether the current menu will reopen.</param>
            <param name="isSubMenu">Indicates whether it is a sub-menu.</param>
        </member>
        <member name="P:Terminal.Gui.MenuClosingEventArgs.Cancel">
            <summary>
                Flag that allows the cancellation of the event. If set to <see langword="true"/> in the event handler, the
                event will be canceled.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuClosingEventArgs.CurrentMenu">
            <summary>The current <see cref="T:Terminal.Gui.MenuBarItem"/> parent.</summary>
        </member>
        <member name="P:Terminal.Gui.MenuClosingEventArgs.IsSubMenu">
            <summary>Indicates whether the current menu is a sub-menu.</summary>
        </member>
        <member name="P:Terminal.Gui.MenuClosingEventArgs.Reopen">
            <summary>Indicates whether the current menu will reopen.</summary>
        </member>
        <member name="T:Terminal.Gui.MessageBox">
            <summary>
                MessageBox displays a modal message to the user, with a title, a message and a series of options that the user
                can choose from.
            </summary>
            <para>
                The difference between the <see cref="M:Terminal.Gui.MessageBox.Query(System.String,System.String,System.String[])"/> and
                <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(System.String,System.String,System.String[])"/> method is the default set of colors used for the message box.
            </para>
            <para>
                The following example pops up a <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and text, plus two
                <see cref="T:Terminal.Gui.Button"/>s. The value -1 is returned when the user cancels the <see cref="T:Terminal.Gui.MessageBox"/> by pressing the
                ESC key.
            </para>
            <example>
                <code lang="c#">
            var n = MessageBox.Query ("Quit Demo", "Are you sure you want to quit this demo?", "Yes", "No");
            if (n == 0)
               quit = true;
            else
               quit = false;
            </code>
            </example>
        </member>
        <member name="P:Terminal.Gui.MessageBox.Clicked">
            <summary>
                The index of the selected button, or -1 if the user pressed ESC to close the dialog. This is useful for web
                based console where by default there is no SynchronizationContext or TaskScheduler.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MessageBox.DefaultBorderStyle">
            <summary>
                Defines the default border styling for <see cref="T:Terminal.Gui.Dialog"/>. Can be configured via
                <see cref="T:Terminal.Gui.ConfigurationManager"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.Int32,System.Int32,System.String,System.String,System.String[])">
            <summary>
                Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                Use <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(System.String,System.String,System.String[])"/> instead; it automatically sizes the MessageBox based on
                the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.String,System.String,System.String[])">
            <summary>
                Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                The message box will be vertically and horizontally centered in the container and the size will be
                automatically determined from the size of the title, message. and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.Int32,System.Int32,System.String,System.String,System.Int32,System.String[])">
            <summary>
                Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                Use <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(System.String,System.String,System.String[])"/> instead; it automatically sizes the MessageBox based on
                the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.String,System.String,System.Int32,System.String[])">
            <summary>
                Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                The message box will be vertically and horizontally centered in the container and the size will be
                automatically determined from the size of the title, message. and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
                Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="wrapMessagge">If wrap the message or not.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                Use <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(System.String,System.String,System.String[])"/> instead; it automatically sizes the MessageBox based on
                the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
                Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="wrapMessagge">If wrap the message or not.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                The message box will be vertically and horizontally centered in the container and the size will be
                automatically determined from the size of the title, message. and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.Int32,System.Int32,System.String,System.String,System.String[])">
            <summary>
                Presents a normal <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                Use <see cref="M:Terminal.Gui.MessageBox.Query(System.String,System.String,System.String[])"/> instead; it automatically sizes the MessageBox based on the
                contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.String,System.String,System.String[])">
            <summary>
                Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                The message box will be vertically and horizontally centered in the container and the size will be
                automatically determined from the size of the message and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.Int32,System.Int32,System.String,System.String,System.Int32,System.String[])">
            <summary>
                Presents a normal <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                Use <see cref="M:Terminal.Gui.MessageBox.Query(System.String,System.String,System.String[])"/> instead; it automatically sizes the MessageBox based on the
                contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.String,System.String,System.Int32,System.String[])">
            <summary>
                Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                The message box will be vertically and horizontally centered in the container and the size will be
                automatically determined from the size of the message and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
                Presents a normal <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="wrapMessagge">If wrap the message or not.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                Use <see cref="M:Terminal.Gui.MessageBox.Query(System.String,System.String,System.String[])"/> instead; it automatically sizes the MessageBox based on the
                contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
                Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show
                to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="wrapMessage">If wrap the message or not.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
                The message box will be vertically and horizontally centered in the container and the size will be
                automatically determined from the size of the message and buttons.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.NerdFonts.Enable">
            <summary>
                If <see langword="true"/>, enables the use of Nerd unicode symbols. This requires specific font(s) to be
                installed on the users machine to work correctly.  Defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.NerdFonts.ExtensionToIcon">
            <summary>Mapping of file extension to <see cref="P:Terminal.Gui.NerdFonts.Glyphs"/> name.</summary>
        </member>
        <member name="P:Terminal.Gui.NerdFonts.FilenameToIcon">
            <summary>Mapping of file name to <see cref="P:Terminal.Gui.NerdFonts.Glyphs"/> name.</summary>
        </member>
        <member name="P:Terminal.Gui.NerdFonts.Glyphs">
            <summary>All nerd glyphs used by Terminal.Gui by name.</summary>
        </member>
        <member name="T:Terminal.Gui.OpenMode">
            <summary>Determine which <see cref="N:System.IO"/> type to open.</summary>
        </member>
        <member name="F:Terminal.Gui.OpenMode.File">
            <summary>Opens only file or files.</summary>
        </member>
        <member name="F:Terminal.Gui.OpenMode.Directory">
            <summary>Opens only directory or directories.</summary>
        </member>
        <member name="F:Terminal.Gui.OpenMode.Mixed">
            <summary>Opens files and directories.</summary>
        </member>
        <member name="T:Terminal.Gui.OpenDialog">
            <summary>The <see cref="T:Terminal.Gui.OpenDialog"/>provides an interactive dialog box for users to select files or directories.</summary>
            <remarks>
                <para>
                    The open dialog can be used to select files for opening, it can be configured to allow multiple items to be
                    selected (based on the AllowsMultipleSelection) variable and you can control whether this should allow files or
                    directories to be selected.
                </para>
                <para>
                    To use, create an instance of <see cref="T:Terminal.Gui.OpenDialog"/>, and pass it to
                    <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/>. This will run the dialog modally, and when this returns,
                    the list of files will be available on the <see cref="P:Terminal.Gui.OpenDialog.FilePaths"/> property.
                </para>
                <para>To select more than one file, users can use the spacebar, or control-t.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.OpenDialog.#ctor">
            <summary>Initializes a new <see cref="T:Terminal.Gui.OpenDialog"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.FilePaths">
            <summary>Returns the selected files, or an empty list if nothing has been selected</summary>
            <value>The file paths.</value>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.OpenMode">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ProgressBarStyle">
            <summary>Specifies the style that a <see cref="T:Terminal.Gui.ProgressBar"/> uses to indicate the progress of an operation.</summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarStyle.Blocks">
            <summary>Indicates progress by increasing the number of segmented blocks in a <see cref="T:Terminal.Gui.ProgressBar"/>.</summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarStyle.Continuous">
            <summary>Indicates progress by increasing the size of a smooth, continuous bar in a <see cref="T:Terminal.Gui.ProgressBar"/>.</summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarStyle.MarqueeBlocks">
            <summary>Indicates progress by continuously scrolling a block across a <see cref="T:Terminal.Gui.ProgressBar"/> in a marquee fashion.</summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarStyle.MarqueeContinuous">
            <summary>Indicates progress by continuously scrolling a block across a <see cref="T:Terminal.Gui.ProgressBar"/> in a marquee fashion.</summary>
        </member>
        <member name="T:Terminal.Gui.ProgressBarFormat">
            <summary>Specifies the format that a <see cref="T:Terminal.Gui.ProgressBar"/> uses to indicate the visual presentation.</summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarFormat.Simple">
            <summary>A simple visual presentation showing only the progress bar.</summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarFormat.SimplePlusPercentage">
            <summary>A simple visual presentation showing the progress bar overlaid with the percentage.</summary>
        </member>
        <member name="T:Terminal.Gui.ProgressBar">
            <summary>A Progress Bar view that can indicate progress of an activity visually.</summary>
            <remarks>
                <para>
                    <see cref="T:Terminal.Gui.ProgressBar"/> can operate in two modes, percentage mode, or activity mode. The progress bar
                    starts in percentage mode and setting the Fraction property will reflect on the UI the progress made so far.
                    Activity mode is used when the application has no way of knowing how much time is left, and is started when the
                    <see cref="M:Terminal.Gui.ProgressBar.Pulse"/> method is called. Call <see cref="M:Terminal.Gui.ProgressBar.Pulse"/> repeatedly as progress is made.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.ProgressBar"/> class, starts in percentage mode and uses relative
                layout.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.BidirectionalMarquee">
            <summary>
                Specifies if the <see cref="F:Terminal.Gui.ProgressBarStyle.MarqueeBlocks"/> or the
                <see cref="F:Terminal.Gui.ProgressBarStyle.MarqueeContinuous"/> styles is unidirectional or bidirectional.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.Fraction">
            <summary>Gets or sets the <see cref="T:Terminal.Gui.ProgressBar"/> fraction to display, must be a value between 0 and 1.</summary>
            <value>The fraction representing the progress.</value>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.ProgressBarFormat">
            <summary>Specifies the format that a <see cref="T:Terminal.Gui.ProgressBar"/> uses to indicate the visual presentation.</summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.ProgressBarStyle">
            <summary>Gets/Sets the progress bar style based on the <see cref="T:Terminal.Gui.ProgressBarStyle"/></summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.SegmentCharacter">
            <summary>Segment indicator for meter views.</summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.Text">
            <summary>
                Gets or sets the text displayed on the progress bar. If set to an empty string and
                <see cref="P:Terminal.Gui.ProgressBar.ProgressBarFormat"/> is <see cref="F:Terminal.Gui.ProgressBarFormat.SimplePlusPercentage"/> the percentage will be
                displayed. If <see cref="P:Terminal.Gui.ProgressBar.ProgressBarStyle"/> is a marquee style, the text will be displayed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.Pulse">
            <summary>Notifies the <see cref="T:Terminal.Gui.ProgressBar"/> that some progress has taken place.</summary>
            <remarks>
                If the <see cref="T:Terminal.Gui.ProgressBar"/> is percentage mode, it switches to activity mode. If is in activity mode, the
                marker is moved.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.RadioGroup">
            <summary>Displays a group of labels each with a selected indicator. Only one of those can be selected at a given time.</summary>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.RadioGroup"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
                layout.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.HorizontalSpace">
            <summary>
                Gets or sets the horizontal space for this <see cref="T:Terminal.Gui.RadioGroup"/> if the <see cref="P:Terminal.Gui.RadioGroup.Orientation"/> is
                <see cref="F:Terminal.Gui.Orientation.Horizontal"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.Orientation">
            <summary>
                Gets or sets the <see cref="P:Terminal.Gui.RadioGroup.Orientation"/> for this <see cref="T:Terminal.Gui.RadioGroup"/>. The default is
                <see cref="F:Terminal.Gui.Orientation.Vertical"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.RadioLabels">
            <summary>
                The radio labels to display. A key binding will be added for each radio radio enabling the user to select
                and/or focus the radio label using the keyboard. See <see cref="P:Terminal.Gui.View.HotKey"/> for details on how HotKeys work.
            </summary>
            <value>The radio labels.</value>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.SelectedItem">
            <summary>The currently selected item from the list of radio labels</summary>
            <value>The selected.</value>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.OnInvokingKeyBindings(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.OnOrientationChanged(Terminal.Gui.Orientation)">
            <summary>Called when the view orientation has changed. Invokes the <see cref="E:Terminal.Gui.RadioGroup.OrientationChanged"/> event.</summary>
            <param name="newOrientation"></param>
            <returns>True of the event was cancelled.</returns>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.OnSelectedItemChanged(System.Int32,System.Int32)">
            <summary>Called whenever the current selected item changes. Invokes the <see cref="E:Terminal.Gui.RadioGroup.SelectedItemChanged"/> event.</summary>
            <param name="selectedItem"></param>
            <param name="previousSelectedItem"></param>
        </member>
        <member name="E:Terminal.Gui.RadioGroup.OrientationChanged">
            <summary>
                Fired when the view orientation has changed. Can be cancelled by setting
                <see cref="P:Terminal.Gui.OrientationEventArgs.Cancel"/> to true.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.Refresh">
            <summary>Allow to invoke the <see cref="E:Terminal.Gui.RadioGroup.SelectedItemChanged"/> after their creation.</summary>
        </member>
        <member name="E:Terminal.Gui.RadioGroup.SelectedItemChanged">
            <summary>Invoked when the selected radio label has changed.</summary>
        </member>
        <member name="T:Terminal.Gui.RuneCellEventArgs">
            <summary>Args for events that relate to a specific <see cref="T:Terminal.Gui.RuneCell"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.RuneCellEventArgs.#ctor(System.Collections.Generic.List{Terminal.Gui.RuneCell},System.Int32,System.ValueTuple{System.Int32,System.Int32})">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.RuneCellEventArgs"/> class.</summary>
            <param name="line">The line.</param>
            <param name="col">The col index.</param>
            <param name="unwrappedPosition">The unwrapped row and col index.</param>
        </member>
        <member name="P:Terminal.Gui.RuneCellEventArgs.Col">
            <summary>The index of the RuneCell in the line.</summary>
        </member>
        <member name="P:Terminal.Gui.RuneCellEventArgs.Line">
            <summary>The list of runes the RuneCell is part of.</summary>
        </member>
        <member name="P:Terminal.Gui.RuneCellEventArgs.UnwrappedPosition">
            <summary>
                The unwrapped row and column index into the text containing the RuneCell. Unwrapped means the text without
                word wrapping or other visual formatting having been applied.
            </summary>
        </member>
        <member name="T:Terminal.Gui.SaveDialog">
            <summary>The <see cref="T:Terminal.Gui.SaveDialog"/> provides an interactive dialog box for users to pick a file to save.</summary>
            <remarks>
                <para>
                    To use, create an instance of <see cref="T:Terminal.Gui.SaveDialog"/>, and pass it to
                    <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/>. This will run the dialog modally, and when this returns,
                    the <see cref="P:Terminal.Gui.SaveDialog.FileName"/>property will contain the selected file name or null if the user canceled.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.SaveDialog.#ctor">
            <summary>Initializes a new <see cref="T:Terminal.Gui.SaveDialog"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.SaveDialog.FileName">
            <summary>
                Gets the name of the file the user selected for saving, or null if the user canceled the
                <see cref="T:Terminal.Gui.SaveDialog"/>.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="M:Terminal.Gui.SaveDialog.GetDefaultTitle">
            <summary>Gets the default title for the <see cref="T:Terminal.Gui.SaveDialog"/>.</summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ScrollBarView">
            <summary>ScrollBarViews are views that display a 1-character scrollbar, either horizontal or vertical</summary>
            <remarks>
                <para>
                    The scrollbar is drawn to be a representation of the Size, assuming that the scroll position is set at
                    Position.
                </para>
                <para>If the region to display the scrollbar is larger than three characters, arrow indicators are drawn.</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using
                <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor(Terminal.Gui.View,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using
                <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="host">The view that will host this scrollbar.</param>
            <param name="isVertical">If set to <c>true</c> this is a vertical scrollbar, otherwise, the scrollbar is horizontal.</param>
            <param name="showBothScrollIndicator">
                If set to <c>true (default)</c> will have the other scrollbar, otherwise will
                have only one.
            </param>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.AutoHideScrollBars">
            <summary>If true the vertical/horizontal scroll bars won't be showed if it's not needed.</summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.Host">
            <summary>Get or sets the view that host this <see cref="T:Terminal.Gui.ScrollBarView"/></summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.IsVertical">
            <summary>If set to <c>true</c> this is a vertical scrollbar, otherwise, the scrollbar is horizontal.</summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.KeepContentAlwaysInViewport">
            <summary>Get or sets if the view-port is kept always visible in the area of this <see cref="T:Terminal.Gui.ScrollBarView"/></summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.OtherScrollBarView">
            <summary>Represent a vertical or horizontal ScrollBarView other than this.</summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.Position">
            <summary>The position, relative to <see cref="P:Terminal.Gui.ScrollBarView.Size"/>, to set the scrollbar at.</summary>
            <value>The position.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.ShowScrollIndicator">
            <summary>Gets or sets the visibility for the vertical or horizontal scroll indicator.</summary>
            <value><c>true</c> if show vertical or horizontal scroll indicator; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.Size">
            <summary>The size of content the scrollbar represents.</summary>
            <value>The size.</value>
            <remarks>
                The <see cref="P:Terminal.Gui.ScrollBarView.Size"/> is typically the size of the virtual content. E.g. when a Scrollbar is part of a
                <see cref="T:Terminal.Gui.View"/> the Size is set to the appropriate dimension of <see cref="P:Terminal.Gui.ScrollBarView.Host"/>.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.ScrollBarView.ChangedPosition">
            <summary>This event is raised when the position on the scrollbar has changed.</summary>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.OnChangedPosition">
            <summary>Virtual method to invoke the <see cref="E:Terminal.Gui.ScrollBarView.ChangedPosition"/> action event.</summary>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.Refresh">
            <summary>Only used for a hosted view that will update and redraw the scrollbars.</summary>
        </member>
        <member name="T:Terminal.Gui.ScrollView">
            <summary>
                Scrollviews are views that present a window into a virtual space where subviews are added.  Similar to the iOS
                UIScrollView.
            </summary>
            <remarks>
                <para>
                    The subviews that are added to this <see cref="T:Terminal.Gui.ScrollView"/> are offset by the
                    <see cref="P:Terminal.Gui.ScrollView.ContentOffset"/> property.  The view itself is a window into the space represented by the
                    <see cref="P:Terminal.Gui.View.ContentSize"/>.
                </para>
                <para>Use the</para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ScrollView.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
                positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollView.AutoHideScrollBars">
            <summary>If true the vertical/horizontal scroll bars won't be showed if it's not needed.</summary>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ContentOffset">
            <summary>Represents the top left corner coordinate that is displayed by the scrollview</summary>
            <value>The content offset.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollView.KeepContentAlwaysInViewport">
            <summary>Get or sets if the view-port is kept always visible in the area of this <see cref="T:Terminal.Gui.ScrollView"/></summary>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ShowHorizontalScrollIndicator">
            <summary>Gets or sets the visibility for the horizontal scroll indicator.</summary>
            <value><c>true</c> if show horizontal scroll indicator; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ShowVerticalScrollIndicator">
            <summary>Gets or sets the visibility for the vertical scroll indicator.</summary>
            <value><c>true</c> if show vertical scroll indicator; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Add(Terminal.Gui.View)">
            <summary>Adds the view to the scrollview.</summary>
            <param name="view">The view to add to the scrollview.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.OnKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Remove(Terminal.Gui.View)">
            <summary>Removes the view from the scrollview.</summary>
            <param name="view">The view to remove from the scrollview.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.RemoveAll">
            <summary>Removes all widgets from this container.</summary>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollDown(System.Int32)">
            <summary>Scrolls the view down.</summary>
            <returns><c>true</c>, if left was scrolled, <c>false</c> otherwise.</returns>
            <param name="lines">Number of lines to scroll.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollLeft(System.Int32)">
            <summary>Scrolls the view to the left</summary>
            <returns><c>true</c>, if left was scrolled, <c>false</c> otherwise.</returns>
            <param name="cols">Number of columns to scroll by.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollRight(System.Int32)">
            <summary>Scrolls the view to the right.</summary>
            <returns><c>true</c>, if right was scrolled, <c>false</c> otherwise.</returns>
            <param name="cols">Number of columns to scroll by.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollUp(System.Int32)">
            <summary>Scrolls the view up.</summary>
            <returns><c>true</c>, if left was scrolled, <c>false</c> otherwise.</returns>
            <param name="lines">Number of lines to scroll.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.SelectedItemChangedArgs">
            <summary>Event arguments for the SelectedItemChagned event.</summary>
        </member>
        <member name="M:Terminal.Gui.SelectedItemChangedArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new <see cref="T:Terminal.Gui.SelectedItemChangedArgs"/> class.</summary>
            <param name="selectedItem"></param>
            <param name="previousSelectedItem"></param>
        </member>
        <member name="P:Terminal.Gui.SelectedItemChangedArgs.PreviousSelectedItem">
            <summary>Gets the index of the item that was previously selected. -1 if there was no previous selection.</summary>
        </member>
        <member name="P:Terminal.Gui.SelectedItemChangedArgs.SelectedItem">
            <summary>Gets the index of the item that is now selected. -1 if there is no selection.</summary>
        </member>
        <member name="T:Terminal.Gui.SliderOptionEventArgs">
            <summary><see cref="T:System.EventArgs"/> for <see cref="T:Terminal.Gui.Slider`1"/> <see cref="T:Terminal.Gui.SliderOption`1"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.SliderOptionEventArgs.#ctor(System.Boolean)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.SliderOptionEventArgs"/></summary>
            <param name="isSet"> indicates whether the option is set</param>
        </member>
        <member name="P:Terminal.Gui.SliderOptionEventArgs.IsSet">
            <summary>Gets whether the option is set or not.</summary>
        </member>
        <member name="T:Terminal.Gui.SliderOption`1">
            <summary>Represents an option in a <see cref="T:Terminal.Gui.Slider`1"/> .</summary>
            <typeparam name="T">Data type of the option.</typeparam>
        </member>
        <member name="M:Terminal.Gui.SliderOption`1.#ctor">
            <summary>Creates a new empty instance of the <see cref="T:Terminal.Gui.SliderOption`1"/> class.</summary>
        </member>
        <member name="M:Terminal.Gui.SliderOption`1.#ctor(System.String,System.Text.Rune,`0)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.SliderOption`1"/> class with values for each property.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderOption`1.Data">
            <summary>Custom data of the option.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderOption`1.Legend">
            <summary>Legend of the option.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderOption`1.LegendAbbr">
            <summary>
                Abbreviation of the Legend. When the <see cref="P:Terminal.Gui.Slider`1.InnerSpacing"/> too small to fit
                <see cref="P:Terminal.Gui.SliderOption`1.Legend"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.SliderOption`1.Changed">
            <summary>Event fired when the an option has changed.</summary>
        </member>
        <member name="E:Terminal.Gui.SliderOption`1.Set">
            <summary>Event Raised when this option is set.</summary>
        </member>
        <member name="M:Terminal.Gui.SliderOption`1.ToString">
            <summary>Creates a human-readable string that represents this <see cref="T:Terminal.Gui.SliderOption`1"/>.</summary>
        </member>
        <member name="E:Terminal.Gui.SliderOption`1.UnSet">
            <summary>Event Raised when this option is unset.</summary>
        </member>
        <member name="M:Terminal.Gui.SliderOption`1.OnChanged(System.Boolean)">
            <summary>To Raise the <see cref="E:Terminal.Gui.SliderOption`1.Changed"/> event from the Slider.</summary>
        </member>
        <member name="M:Terminal.Gui.SliderOption`1.OnSet">
            <summary>To Raise the <see cref="E:Terminal.Gui.SliderOption`1.Set"/> event from the Slider.</summary>
        </member>
        <member name="M:Terminal.Gui.SliderOption`1.OnUnSet">
            <summary>To Raise the <see cref="E:Terminal.Gui.SliderOption`1.UnSet"/> event from the Slider.</summary>
        </member>
        <member name="T:Terminal.Gui.SliderType">
            <summary><see cref="T:Terminal.Gui.Slider`1"/>  Types</summary>
        </member>
        <member name="F:Terminal.Gui.SliderType.Single">
            <summary>
                <code>
            ├─┼─┼─┼─┼─█─┼─┼─┼─┼─┼─┼─┤
            </code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.SliderType.Multiple">
            <summary>
                <code>
            ├─┼─█─┼─┼─█─┼─┼─┼─┼─█─┼─┤
            </code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.SliderType.LeftRange">
            <summary>
                <code>
            ├▒▒▒▒▒▒▒▒▒█─┼─┼─┼─┼─┼─┼─┤
            </code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.SliderType.RightRange">
            <summary>
                <code>
            ├─┼─┼─┼─┼─█▒▒▒▒▒▒▒▒▒▒▒▒▒┤
            </code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.SliderType.Range">
            <summary>
                <code>
            ├─┼─┼─┼─┼─█▒▒▒▒▒▒▒█─┼─┼─┤
            </code>
            </summary>
        </member>
        <member name="T:Terminal.Gui.SliderAttributes">
            <summary><see cref="T:Terminal.Gui.Slider`1"/> Legend Style</summary>
        </member>
        <member name="P:Terminal.Gui.SliderAttributes.EmptyAttribute">
            <summary>Attribute for the Legends Container.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderAttributes.NormalAttribute">
            <summary>Attribute for when the respective Option is NOT Set.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderAttributes.SetAttribute">
            <summary>Attribute for when the respective Option is Set.</summary>
        </member>
        <member name="T:Terminal.Gui.SliderStyle">
            <summary><see cref="T:Terminal.Gui.Slider`1"/> Style</summary>
        </member>
        <member name="M:Terminal.Gui.SliderStyle.#ctor">
            <summary>Constructs a new instance.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderStyle.DragChar">
            <summary>The glyph and the attribute to indicate mouse dragging.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderStyle.EmptyChar">
            <summary>The glyph and the attribute used for empty spaces on the slider.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderStyle.EndRangeChar">
            <summary>The glyph and the attribute used for the end of ranges on the slider.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderStyle.LegendAttributes">
            <summary>Legend attributes</summary>
        </member>
        <member name="P:Terminal.Gui.SliderStyle.OptionChar">
            <summary>The glyph and the attribute used for each option (tick) on the slider.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderStyle.RangeChar">
            <summary>The glyph and the attribute used for filling in ranges on the slider.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderStyle.SetChar">
            <summary>The glyph and the attribute used for options (ticks) that are set on the slider.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderStyle.SpaceChar">
            <summary>The glyph and the attribute used for spaces between options (ticks) on the slider.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderStyle.StartRangeChar">
            <summary>The glyph and the attribute used for the start of ranges on the slider.</summary>
        </member>
        <member name="T:Terminal.Gui.SliderConfiguration">
            <summary>All <see cref="T:Terminal.Gui.Slider`1"/> configuration are grouped in this class.</summary>
        </member>
        <member name="T:Terminal.Gui.SliderEventArgs`1">
            <summary><see cref="T:System.EventArgs"/> for <see cref="T:Terminal.Gui.Slider`1"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.SliderEventArgs`1.#ctor(System.Collections.Generic.Dictionary{System.Int32,Terminal.Gui.SliderOption{`0}},System.Int32)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.SliderEventArgs`1"/></summary>
            <param name="options">The current options.</param>
            <param name="focused">Index of the option that is focused. -1 if no option has the focus.</param>
        </member>
        <member name="P:Terminal.Gui.SliderEventArgs`1.Cancel">
            <summary>If set to true, the focus operation will be canceled, if applicable.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderEventArgs`1.Focused">
            <summary>Gets or sets the index of the option that is focused.</summary>
        </member>
        <member name="P:Terminal.Gui.SliderEventArgs`1.Options">
            <summary>Gets/sets whether the option is set or not.</summary>
        </member>
        <member name="T:Terminal.Gui.OrientationEventArgs">
            <summary><see cref="T:System.EventArgs"/> for <see cref="P:Terminal.Gui.OrientationEventArgs.Orientation"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.OrientationEventArgs.#ctor(Terminal.Gui.Orientation)">
            <summary>Constructs a new instance.</summary>
            <param name="orientation">the new orientation</param>
        </member>
        <member name="P:Terminal.Gui.OrientationEventArgs.Cancel">
            <summary>If set to true, the orientation change operation will be canceled, if applicable.</summary>
        </member>
        <member name="P:Terminal.Gui.OrientationEventArgs.Orientation">
            <summary>The new orientation.</summary>
        </member>
        <member name="T:Terminal.Gui.Slider">
            <summary>Slider control.</summary>
        </member>
        <member name="M:Terminal.Gui.Slider.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Slider"/> class.</summary>
        </member>
        <member name="M:Terminal.Gui.Slider.#ctor(System.Collections.Generic.List{System.Object},Terminal.Gui.Orientation)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Slider"/> class.</summary>
            <param name="options">Initial slider options.</param>
            <param name="orientation">Initial slider options.</param>
        </member>
        <member name="T:Terminal.Gui.Slider`1">
            <summary>
                Provides a slider control letting the user navigate from a set of typed options in a linear manner using the
                keyboard or mouse.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Terminal.Gui.Slider`1.FocusedOption">
            <summary>The focused option (has the cursor).</summary>
        </member>
        <member name="E:Terminal.Gui.Slider`1.OptionsChanged">
            <summary>Event raised when the slider option/s changed. The dictionary contains: key = option index, value = T</summary>
        </member>
        <member name="M:Terminal.Gui.Slider`1.OnOptionsChanged">
            <summary>Overridable method called when the slider options have changed. Raises the <see cref="E:Terminal.Gui.Slider`1.OptionsChanged"/> event.</summary>
        </member>
        <member name="E:Terminal.Gui.Slider`1.OptionFocused">
            <summary>Event raised When the option is hovered with the keys or the mouse.</summary>
        </member>
        <member name="M:Terminal.Gui.Slider`1.OnOptionFocused(System.Int32,Terminal.Gui.SliderEventArgs{`0})">
            <summary>Overridable function that fires the <see cref="E:Terminal.Gui.Slider`1.OptionFocused"/> event.</summary>
            <param name="args"></param>
            <returns><see langword="true"/> if the focus change was cancelled.</returns>
            <param name="newFocusedOption"></param>
        </member>
        <member name="M:Terminal.Gui.Slider`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Slider"/> class.</summary>
        </member>
        <member name="M:Terminal.Gui.Slider`1.#ctor(System.Collections.Generic.List{`0},Terminal.Gui.Orientation)">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.Slider"/> class.</summary>
            <param name="options">Initial slider options.</param>
            <param name="orientation">Initial slider orientation.</param>
        </member>
        <member name="P:Terminal.Gui.Slider`1.AllowEmpty">
            <summary>Allow no selection.</summary>
        </member>
        <member name="P:Terminal.Gui.Slider`1.InnerSpacing">
            <summary>Gets or sets the number of rows/columns between <see cref="P:Terminal.Gui.Slider`1.Options"/></summary>
        </member>
        <member name="P:Terminal.Gui.Slider`1.Type">
            <summary>Slider Type. <see cref="T:Terminal.Gui.SliderType"></see></summary>
        </member>
        <member name="P:Terminal.Gui.Slider`1.Orientation">
            <summary>Slider Orientation. <see cref="T:Terminal.Gui.Orientation"></see></summary>
        </member>
        <member name="E:Terminal.Gui.Slider`1.OrientationChanged">
            <summary>
                Fired when the slider orientation has changed. Can be cancelled by setting
                <see cref="P:Terminal.Gui.OrientationEventArgs.Cancel"/> to true.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Slider`1.OnOrientationChanged(Terminal.Gui.Orientation)">
            <summary>Called when the slider orientation has changed. Invokes the <see cref="E:Terminal.Gui.Slider`1.OrientationChanged"/> event.</summary>
            <param name="newOrientation"></param>
            <returns>True of the event was cancelled.</returns>
        </member>
        <member name="P:Terminal.Gui.Slider`1.LegendsOrientation">
            <summary>Legends Orientation. <see cref="T:Terminal.Gui.Orientation"></see></summary>
        </member>
        <member name="P:Terminal.Gui.Slider`1.Style">
            <summary>Slider styles. <see cref="T:Terminal.Gui.SliderStyle"></see></summary>
        </member>
        <member name="P:Terminal.Gui.Slider`1.Options">
            <summary>Set the slider options.</summary>
        </member>
        <member name="P:Terminal.Gui.Slider`1.RangeAllowSingle">
            <summary>Allow range start and end be in the same option, as a single option.</summary>
        </member>
        <member name="P:Terminal.Gui.Slider`1.ShowEndSpacing">
            <summary>Show/Hide spacing before and after the first and last option.</summary>
        </member>
        <member name="P:Terminal.Gui.Slider`1.ShowLegends">
            <summary>Show/Hide the options legends.</summary>
        </member>
        <member name="M:Terminal.Gui.Slider`1.SetOption(System.Int32)">
            <summary>Causes the specified option to be set and be focused.</summary>
        </member>
        <member name="M:Terminal.Gui.Slider`1.UnSetOption(System.Int32)">
            <summary>Causes the specified option to be un-set and be focused.</summary>
        </member>
        <member name="M:Terminal.Gui.Slider`1.GetSetOptions">
            <summary>Get the indexes of the set options.</summary>
        </member>
        <member name="M:Terminal.Gui.Slider`1.SetContentSizeBestFit">
            <summary>Adjust the dimensions of the Slider to the best value.</summary>
        </member>
        <member name="M:Terminal.Gui.Slider`1.CalcMinLength">
            <summary>Calculates the min dimension required for all options and inner spacing with abbreviated legends</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Slider`1.CalcBestLength">
            <summary>Calculates the ideal dimension required for all options, inner spacing, and legends (non-abbreviated).</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Slider`1.CalcThickness">
            <summary>Calculates the min dimension required for the slider and legends</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Slider`1.TryGetOptionByPosition(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>Tries to get the option index by the position.</summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="threshold"></param>
            <param name="option_idx"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Slider`1.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Slider`1.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Slider`1.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.SpinnerStyle">
            <summary>SpinnerStyles used in a <see cref="T:Terminal.Gui.SpinnerView"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerStyle.HasSpecialCharacters">
            <summary>Gets whether the current spinner style contains emoji or other special characters.</summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerStyle.Sequence">
            <summary>Gets or sets the frames used to animate the spinner.</summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerStyle.SpinBounce">
            <summary>
                Gets or sets whether spinner should go back and forth through the Sequence rather than going to the end and
                starting again at the beginning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerStyle.SpinDelay">
            <summary>
                Gets or sets the number of milliseconds to wait between characters in the spin.  Defaults to the
                SpinnerStyle's Interval value.
            </summary>
            <remarks>
                This is the maximum speed the spinner will rotate at.  You still need to call
                <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/> or <see cref="P:Terminal.Gui.SpinnerView.AutoSpin"/> to advance/start animation.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.SpinnerView">
            <summary>A <see cref="T:Terminal.Gui.View"/> which displays (by default) a spinning line character.</summary>
            <remarks>
                By default animation only occurs when you call <see cref="M:Terminal.Gui.SpinnerView.AdvanceAnimation"/>. Use
                <see cref="P:Terminal.Gui.SpinnerView.AutoSpin"/> to make the automate calls to <see cref="M:Terminal.Gui.SpinnerView.AdvanceAnimation"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.SpinnerView.#ctor">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.SpinnerView"/> class.</summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerView.AutoSpin">
            <summary>
                Gets or sets whether spinning should occur automatically or be manually triggered (e.g. from a background
                task).
            </summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerView.HasSpecialCharacters">
            <summary>
                Gets whether the current spinner style contains emoji or other special characters. Does not check Custom
                sequences.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerView.IsAsciiOnly">
            <summary>Gets whether the current spinner style contains only ASCII characters.  Also checks Custom sequences.</summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerView.Sequence">
            <summary>Gets or sets the animation frames used to animate the spinner.</summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerView.SpinBounce">
            <summary>
                Gets or sets whether spinner should go back and forth through the frames rather than going to the end and
                starting again at the beginning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerView.SpinDelay">
            <summary>Gets or sets the number of milliseconds to wait between characters in the animation.</summary>
            <remarks>
                This is the maximum speed the spinner will rotate at.  You still need to call
                <see cref="M:Terminal.Gui.SpinnerView.AdvanceAnimation"/> or <see cref="P:Terminal.Gui.SpinnerView.AutoSpin"/> to advance/start animation.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.SpinnerView.SpinReverse">
            <summary>
                Gets or sets whether spinner should go through the frames in reverse order. If SpinBounce is true, this sets
                the starting order.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SpinnerView.Style">
            <summary>Gets or sets the Style used to animate the spinner.</summary>
        </member>
        <member name="M:Terminal.Gui.SpinnerView.AdvanceAnimation">
            <summary>
                Advances the animation frame and notifies main loop that repainting needs to happen. Repeated calls are
                ignored based on <see cref="P:Terminal.Gui.SpinnerView.SpinDelay"/>.
            </summary>
            <remarks>Ensure this method is called on the main UI thread e.g. via <see cref="M:Terminal.Gui.Application.Invoke(System.Action)"/></remarks>
        </member>
        <member name="M:Terminal.Gui.SpinnerView.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.SplitterEventArgs">
            <summary>Provides data for <see cref="P:Terminal.Gui.SplitterEventArgs.TileView"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.SplitterEventArgs.#ctor(Terminal.Gui.TileView,System.Int32,Terminal.Gui.Pos)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.SplitterEventArgs"/> class.</summary>
            <param name="tileView"><see cref="P:Terminal.Gui.SplitterEventArgs.TileView"/> in which splitter is being moved.</param>
            <param name="idx">Index of the splitter being moved in <see cref="P:Terminal.Gui.TileView.SplitterDistances"/>.</param>
            <param name="splitterDistance">The new <see cref="T:Terminal.Gui.Pos"/> of the splitter line.</param>
        </member>
        <member name="P:Terminal.Gui.SplitterEventArgs.Idx">
            <summary>
                Gets the index of the splitter that is being moved. This can be used to index
                <see cref="P:Terminal.Gui.TileView.SplitterDistances"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.SplitterEventArgs.SplitterDistance">
            <summary>New position of the splitter line (see <see cref="P:Terminal.Gui.TileView.SplitterDistances"/>).</summary>
        </member>
        <member name="P:Terminal.Gui.SplitterEventArgs.TileView">
            <summary>Container (sender) of the event.</summary>
        </member>
        <member name="T:Terminal.Gui.StatusItem">
            <summary>
                <see cref="T:Terminal.Gui.StatusItem"/> objects are contained by <see cref="T:Terminal.Gui.StatusBar"/> <see cref="T:Terminal.Gui.View"/>s. Each
                <see cref="T:Terminal.Gui.StatusItem"/> has a title, a shortcut (hotkey), and an <see cref="T:Terminal.Gui.Command"/> that will be invoked when
                the <see cref="P:Terminal.Gui.StatusItem.Shortcut"/> is pressed. The <see cref="P:Terminal.Gui.StatusItem.Shortcut"/> will be a global hotkey for
                the application in the current context of the screen. The color of the <see cref="P:Terminal.Gui.StatusItem.Title"/> will be
                changed after each ~. A <see cref="P:Terminal.Gui.StatusItem.Title"/> set to `~F1~ Help` will render as *F1* using
                <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/> and *Help* as <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusItem.#ctor(Terminal.Gui.Key,System.String,System.Action,System.Func{System.Boolean})">
            <summary>Initializes a new <see cref="T:Terminal.Gui.StatusItem"/>.</summary>
            <param name="shortcut">Shortcut to activate the <see cref="T:Terminal.Gui.StatusItem"/>.</param>
            <param name="title">Title for the <see cref="T:Terminal.Gui.StatusItem"/>.</param>
            <param name="action">Action to invoke when the <see cref="T:Terminal.Gui.StatusItem"/> is activated.</param>
            <param name="canExecute">Function to determine if the action can currently be executed.</param>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Action">
            <summary>Gets or sets the action to be invoked when the statusbar item is triggered</summary>
            <value>Action to invoke.</value>
        </member>
        <member name="P:Terminal.Gui.StatusItem.CanExecute">
            <summary>
                Gets or sets the action to be invoked to determine if the <see cref="T:Terminal.Gui.StatusItem"/> can be triggered. If
                <see cref="P:Terminal.Gui.StatusItem.CanExecute"/> returns <see langword="true"/> the status item will be enabled. Otherwise, it will be
                disabled.
            </summary>
            <value>Function to determine if the action is can be executed or not.</value>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Data">
            <summary>Gets or sets arbitrary data for the status item.</summary>
            <remarks>This property is not used internally.</remarks>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Shortcut">
            <summary>Gets the global shortcut to invoke the action on the menu.</summary>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Title">
            <summary>Gets or sets the title.</summary>
            <value>The title.</value>
            <remarks>
                The colour of the <see cref="P:Terminal.Gui.StatusItem.Title"/> will be changed after each ~. A
                <see cref="P:Terminal.Gui.StatusItem.Title"/> set to `~F1~ Help` will render as *F1* using <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/> and
                *Help* as <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.StatusItem.IsEnabled">
            <summary>
                Returns <see langword="true"/> if the status item is enabled. This method is a wrapper around
                <see cref="P:Terminal.Gui.StatusItem.CanExecute"/>.
            </summary>
        </member>
        <member name="T:Terminal.Gui.StatusBar">
            <summary>
                A status bar is a <see cref="T:Terminal.Gui.View"/> that snaps to the bottom of a <see cref="T:Terminal.Gui.Toplevel"/> displaying set of
                <see cref="T:Terminal.Gui.StatusItem"/>s. The <see cref="T:Terminal.Gui.StatusBar"/> should be context sensitive. This means, if the main menu
                and an open text editor are visible, the items probably shown will be ~F1~ Help ~F2~ Save ~F3~ Load. While a dialog
                to ask a file to load is executed, the remaining commands will probably be ~F1~ Help. So for each context must be a
                new instance of a status bar.
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusBar.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Terminal.Gui.StatusBar"/> class.</summary>
        </member>
        <member name="M:Terminal.Gui.StatusBar.#ctor(Terminal.Gui.StatusItem[])">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.StatusBar"/> class with the specified set of
                <see cref="T:Terminal.Gui.StatusItem"/> s. The <see cref="T:Terminal.Gui.StatusBar"/> will be drawn on the lowest line of the terminal or
                <see cref="P:Terminal.Gui.View.SuperView"/> (if not null).
            </summary>
            <param name="items">A list of status bar items.</param>
        </member>
        <member name="P:Terminal.Gui.StatusBar.Items">
            <summary>The items that compose the <see cref="T:Terminal.Gui.StatusBar"/></summary>
        </member>
        <member name="P:Terminal.Gui.StatusBar.ShortcutDelimiter">
            <summary>Gets or sets shortcut delimiter separator. The default is "-".</summary>
        </member>
        <member name="M:Terminal.Gui.StatusBar.AddItemAt(System.Int32,Terminal.Gui.StatusItem)">
            <summary>Inserts a <see cref="T:Terminal.Gui.StatusItem"/> in the specified index of <see cref="P:Terminal.Gui.StatusBar.Items"/>.</summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Terminal.Gui.StatusBar.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.OnInvokingKeyBindings(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.RemoveItem(System.Int32)">
            <summary>Removes a <see cref="T:Terminal.Gui.StatusItem"/> at specified index of <see cref="P:Terminal.Gui.StatusBar.Items"/>.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <returns>The <see cref="T:Terminal.Gui.StatusItem"/> removed.</returns>
        </member>
        <member name="T:Terminal.Gui.Tab">
            <summary>A single tab in a <see cref="T:Terminal.Gui.TabView"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.Tab.#ctor">
            <summary>Creates a new unamed tab with no controls inside.</summary>
        </member>
        <member name="P:Terminal.Gui.Tab.DisplayText">
            <summary>The text to display in a <see cref="T:Terminal.Gui.TabView"/>.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Tab.View">
            <summary>The control to display when the tab is selected.</summary>
            <value></value>
        </member>
        <member name="T:Terminal.Gui.TabChangedEventArgs">
            <summary>Describes a change in <see cref="P:Terminal.Gui.TabView.SelectedTab"/></summary>
        </member>
        <member name="M:Terminal.Gui.TabChangedEventArgs.#ctor(Terminal.Gui.Tab,Terminal.Gui.Tab)">
            <summary>Documents a tab change</summary>
            <param name="oldTab"></param>
            <param name="newTab"></param>
        </member>
        <member name="P:Terminal.Gui.TabChangedEventArgs.NewTab">
            <summary>The currently selected tab. May be null</summary>
        </member>
        <member name="P:Terminal.Gui.TabChangedEventArgs.OldTab">
            <summary>The previously selected tab. May be null</summary>
        </member>
        <member name="T:Terminal.Gui.CellActivatedEventArgs">
            <summary>Defines the event arguments for <see cref="E:Terminal.Gui.TableView.CellActivated"/> event</summary>
        </member>
        <member name="M:Terminal.Gui.CellActivatedEventArgs.#ctor(Terminal.Gui.ITableSource,System.Int32,System.Int32)">
            <summary>Creates a new instance of arguments describing a cell being activated in <see cref="T:Terminal.Gui.TableView"/></summary>
            <param name="t"></param>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="P:Terminal.Gui.CellActivatedEventArgs.Col">
            <summary>The column index of the <see cref="P:Terminal.Gui.CellActivatedEventArgs.Table"/> cell that is being activated</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.CellActivatedEventArgs.Row">
            <summary>The row index of the <see cref="P:Terminal.Gui.CellActivatedEventArgs.Table"/> cell that is being activated</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.CellActivatedEventArgs.Table">
            <summary>
                The current table to which the new indexes refer.  May be null e.g. if selection change is the result of
                clearing the table from the view
            </summary>
            <value></value>
        </member>
        <member name="T:Terminal.Gui.CellColorGetterArgs">
            <summary>
                Arguments for a <see cref="T:Terminal.Gui.CellColorGetterDelegate"/>.  Describes a cell for which a rendering
                <see cref="T:Terminal.Gui.ColorScheme"/> is being sought
            </summary>
        </member>
        <member name="P:Terminal.Gui.CellColorGetterArgs.CellValue">
            <summary>The hard typed value being rendered in the cell for which color is needed</summary>
        </member>
        <member name="P:Terminal.Gui.CellColorGetterArgs.ColIdex">
            <summary>The index of column in <see cref="P:Terminal.Gui.CellColorGetterArgs.Table"/> for which color is needed</summary>
        </member>
        <member name="P:Terminal.Gui.CellColorGetterArgs.Representation">
            <summary>The textual representation of <see cref="P:Terminal.Gui.CellColorGetterArgs.CellValue"/> (what will actually be drawn to the screen)</summary>
        </member>
        <member name="P:Terminal.Gui.CellColorGetterArgs.RowIndex">
            <summary>The index of the row in <see cref="P:Terminal.Gui.CellColorGetterArgs.Table"/> for which color is needed</summary>
        </member>
        <member name="P:Terminal.Gui.CellColorGetterArgs.RowScheme">
            <summary>the color scheme that is going to be used to render the cell if no cell specific color scheme is returned</summary>
        </member>
        <member name="P:Terminal.Gui.CellColorGetterArgs.Table">
            <summary>The data table hosted by the <see cref="T:Terminal.Gui.TableView"/> control.</summary>
        </member>
        <member name="T:Terminal.Gui.CellToggledEventArgs">
            <summary>Event args for the <see cref="E:Terminal.Gui.TableView.CellToggled"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.CellToggledEventArgs.#ctor(Terminal.Gui.ITableSource,System.Int32,System.Int32)">
            <summary>Creates a new instance of arguments describing a cell being toggled in <see cref="T:Terminal.Gui.TableView"/></summary>
            <param name="t"></param>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="P:Terminal.Gui.CellToggledEventArgs.Cancel">
            <summary>Gets or sets whether to cancel the processing of this event</summary>
        </member>
        <member name="P:Terminal.Gui.CellToggledEventArgs.Col">
            <summary>The column index of the <see cref="P:Terminal.Gui.CellToggledEventArgs.Table"/> cell that is being toggled</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.CellToggledEventArgs.Row">
            <summary>The row index of the <see cref="P:Terminal.Gui.CellToggledEventArgs.Table"/> cell that is being toggled</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.CellToggledEventArgs.Table">
            <summary>
                The current table to which the new indexes refer.  May be null e.g. if selection change is the result of
                clearing the table from the view
            </summary>
            <value></value>
        </member>
        <member name="T:Terminal.Gui.CheckBoxTableSourceWrapperBase">
            <summary>
                <see cref="T:Terminal.Gui.ITableSource"/> for a <see cref="T:Terminal.Gui.TableView"/> which adds a checkbox column as an additional column
                in the table.
            </summary>
            <remarks>
                This class wraps another <see cref="T:Terminal.Gui.ITableSource"/> and dynamically serves its rows/cols plus an extra column.
                Data in the wrapped source can be dynamic (change over time).
            </remarks>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperBase.#ctor(Terminal.Gui.TableView,Terminal.Gui.ITableSource)">
            <summary>
                Creates a new instance of the class presenting the data in <paramref name="toWrap"/> plus an additional
                checkbox column.
            </summary>
            <param name="tableView">
                The <see cref="T:Terminal.Gui.TableView"/> this source will be used with. This is required for event
                registration.
            </param>
            <param name="toWrap">The original data source of the <see cref="T:Terminal.Gui.TableView"/> that you want to add checkboxes to.</param>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.CheckedRune">
            <summary>
                Gets or sets the character to use for checked entries. Defaults to <see cref="P:Terminal.Gui.GlyphDefinitions.Checked"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.RadioCheckedRune">
            <summary>
                Gets or sets the character to use for checked entry when <see cref="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.UseRadioButtons"/> is true. Defaults to
                <see cref="P:Terminal.Gui.GlyphDefinitions.Selected"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.RadioUnCheckedRune">
            <summary>
                Gets or sets the character to use for unchecked entries when <see cref="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.UseRadioButtons"/> is true. Defaults
                to <see cref="P:Terminal.Gui.GlyphDefinitions.UnSelected"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.UnCheckedRune">
            <summary>
                Gets or sets the character to use for UnChecked entries. Defaults to <see cref="P:Terminal.Gui.GlyphDefinitions.UnChecked"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.UseRadioButtons">
            <summary>Gets or sets whether to only allow a single row to be toggled at once (Radio button).</summary>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.Wrapping">
            <summary>Gets the <see cref="T:Terminal.Gui.ITableSource"/> that this instance is wrapping.</summary>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.Rows">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.Columns">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.ColumnNames">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperBase.ClearAllToggles">
            <summary>Clears the toggled state of all rows.</summary>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperBase.IsChecked(System.Int32)">
            <summary>Returns true if <paramref name="row"/> is checked.</summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperBase.ToggleAllRows">
            <summary>
                Called when the 'toggled all' action is performed. This should change state from 'some selected' to 'all
                selected' or clear selection if all area already selected.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperBase.ToggleRow(System.Int32)">
            <summary>Flips the checked state of the given <paramref name="row"/>/</summary>
            <param name="row"></param>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperBase.ToggleRows(System.Int32[])">
            <summary>
                Flips the checked state for a collection of rows. If some (but not all) are selected they should flip to all
                selected.
            </summary>
            <param name="range"></param>
        </member>
        <member name="T:Terminal.Gui.CheckBoxTableSourceWrapperByIndex">
            <summary>Implementation of <see cref="T:Terminal.Gui.CheckBoxTableSourceWrapperBase"/> which records toggled rows by their row number.</summary>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByIndex.#ctor(Terminal.Gui.TableView,Terminal.Gui.ITableSource)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.CheckBoxTableSourceWrapperByIndex.CheckedRows">
            <summary>
                Gets the collection of all the checked rows in the <see cref="P:Terminal.Gui.CheckBoxTableSourceWrapperBase.Wrapping"/>
                <see cref="T:Terminal.Gui.ITableSource"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByIndex.ClearAllToggles">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByIndex.IsChecked(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByIndex.ToggleAllRows">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByIndex.ToggleRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByIndex.ToggleRows(System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.CheckBoxTableSourceWrapperByObject`1">
            <summary>
                Implementation of <see cref="T:Terminal.Gui.CheckBoxTableSourceWrapperBase"/> which records toggled rows by a property on row
                objects.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByObject`1.#ctor(Terminal.Gui.TableView,Terminal.Gui.IEnumerableTableSource{`0},System.Func{`0,System.Boolean},System.Action{`0,System.Boolean})">
            <summary>Creates a new instance of the class wrapping the collection <paramref name="toWrap"/>.</summary>
            <param name="tableView">The table you will use the source with.</param>
            <param name="toWrap">The collection of objects you will record checked state for</param>
            <param name="getter">Delegate method for retrieving checked state from your objects of type <typeparamref name="T"/>.</param>
            <param name="setter">Delegate method for setting new checked states on your objects of type <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByObject`1.ClearAllToggles">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByObject`1.IsChecked(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByObject`1.ToggleAllRows">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByObject`1.ToggleRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBoxTableSourceWrapperByObject`1.ToggleRows(System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ColumnStyle">
            <summary>
                Describes how to render a given column in  a <see cref="T:Terminal.Gui.TableView"/> including <see cref="P:Terminal.Gui.ColumnStyle.Alignment"/> and
                textual representation of cells (e.g. date formats)
                <a href="../docs/tableview.md">See TableView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ColumnStyle.AlignmentGetter">
            <summary>
                Defines a delegate for returning custom alignment per cell based on cell values.  When specified this will
                override <see cref="P:Terminal.Gui.ColumnStyle.Alignment"/>
            </summary>
        </member>
        <member name="F:Terminal.Gui.ColumnStyle.ColorGetter">
            <summary>
                Defines a delegate for returning a custom color scheme per cell based on cell values. Return null for the
                default
            </summary>
        </member>
        <member name="F:Terminal.Gui.ColumnStyle.RepresentationGetter">
            <summary>
                Defines a delegate for returning custom representations of cell values.  If not set then
                <see cref="M:System.Object.ToString"/> is used.  Return values from your delegate may be truncated e.g. based on
                <see cref="P:Terminal.Gui.ColumnStyle.MaxWidth"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColumnStyle.Alignment">
            <summary>
                Defines the default alignment for all values rendered in this column.  For custom alignment based on cell
                contents use <see cref="F:Terminal.Gui.ColumnStyle.AlignmentGetter"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColumnStyle.Format">
            <summary>Defines the format for values e.g. "yyyy-MM-dd" for dates</summary>
        </member>
        <member name="P:Terminal.Gui.ColumnStyle.MaxWidth">
            <summary>
                Set the maximum width of the column in characters.  This value will be ignored if more than the tables
                <see cref="P:Terminal.Gui.TableView.MaxCellWidth"/>.  Defaults to <see cref="F:Terminal.Gui.TableView.DefaultMaxCellWidth"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColumnStyle.MinAcceptableWidth">
            <summary>Enables flexible sizing of this column based on available screen space to render into.</summary>
        </member>
        <member name="P:Terminal.Gui.ColumnStyle.MinWidth">
            <summary>
                Set the minimum width of the column in characters.  Setting this will ensure that even when a column has short
                content/header it still fills a given width of the control.
                <para>
                    This value will be ignored if more than the tables <see cref="P:Terminal.Gui.TableView.MaxCellWidth"/> or the
                    <see cref="P:Terminal.Gui.ColumnStyle.MaxWidth"/>
                </para>
                <remarks>For setting a flexible column width (down to a lower limit) use <see cref="P:Terminal.Gui.ColumnStyle.MinAcceptableWidth"/> instead</remarks>
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColumnStyle.Visible">
            <summary>
                Gets or Sets a value indicating whether the column should be visible to the user. This affects both whether it
                is rendered and whether it can be selected. Defaults to true.
            </summary>
            <remarks>If <see cref="P:Terminal.Gui.ColumnStyle.MaxWidth"/> is 0 then <see cref="P:Terminal.Gui.ColumnStyle.Visible"/> will always return false.</remarks>
        </member>
        <member name="M:Terminal.Gui.ColumnStyle.GetAlignment(System.Object)">
            <summary>
                Returns the alignment for the cell based on <paramref name="cellValue"/> and <see cref="F:Terminal.Gui.ColumnStyle.AlignmentGetter"/>/
                <see cref="P:Terminal.Gui.ColumnStyle.Alignment"/>
            </summary>
            <param name="cellValue"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ColumnStyle.GetRepresentation(System.Object)">
            <summary>
                Returns the full string to render (which may be truncated if too long) that the current style says best
                represents the given <paramref name="value"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.DataTableSource">
            <summary>
                <see cref="T:Terminal.Gui.ITableSource"/> implementation that wraps a <see cref="T:System.Data.DataTable"/>.  This class is
                mutable: changes are permitted to the wrapped <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.DataTableSource.#ctor(System.Data.DataTable)">
            <summary>Creates a new instance based on the data in <paramref name="table"/>.</summary>
            <param name="table"></param>
        </member>
        <member name="P:Terminal.Gui.DataTableSource.DataTable">
            <summary>The data table this source wraps.</summary>
        </member>
        <member name="P:Terminal.Gui.DataTableSource.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.DataTableSource.Rows">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.DataTableSource.Columns">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.DataTableSource.ColumnNames">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.EnumerableTableSource`1">
            <summary><see cref="T:Terminal.Gui.ITableSource"/> implementation that wraps arbitrary data.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Terminal.Gui.EnumerableTableSource`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.Dictionary{System.String,System.Func{`0,System.Object}})">
            <summary>Creates a new instance of the class that presents <paramref name="data"/> collection as a table.</summary>
            <remarks>
                The elements of the <paramref name="data"/> collection are recorded during construction (immutable) but the
                properties of those objects are permitted to change.
            </remarks>
            <param name="data">
                The data that you want to present.  The members of this collection will be frozen after
                construction.
            </param>
            <param name="columnDefinitions">
                Getter methods for each property you want to present in the table. For example:
                <code>
             new () {
                { "Colname1", (t)=>t.SomeField},
                { "Colname2", (t)=>t.SomeOtherField}
            }
             </code>
            </param>
        </member>
        <member name="P:Terminal.Gui.EnumerableTableSource`1.Data">
            <summary>Gets the object collection hosted by this wrapper.</summary>
        </member>
        <member name="P:Terminal.Gui.EnumerableTableSource`1.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.EnumerableTableSource`1.Rows">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.EnumerableTableSource`1.Columns">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.EnumerableTableSource`1.ColumnNames">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.EnumerableTableSource`1.GetAllObjects">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.EnumerableTableSource`1.GetObjectOnRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.IEnumerableTableSource`1">
            <summary>
                Interface for all <see cref="T:Terminal.Gui.ITableSource"/> which present an object per row (of type <typeparamref name="T"/>
                ).
            </summary>
        </member>
        <member name="M:Terminal.Gui.IEnumerableTableSource`1.GetAllObjects">
            <summary>Return all objects in the table.</summary>
        </member>
        <member name="M:Terminal.Gui.IEnumerableTableSource`1.GetObjectOnRow(System.Int32)">
            <summary>Return the object on the given row.</summary>
        </member>
        <member name="T:Terminal.Gui.ITableSource">
            <summary>Tabular matrix of data to be displayed in a <see cref="T:Terminal.Gui.TableView"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.ITableSource.ColumnNames">
            <summary>Gets the label for each column.</summary>
        </member>
        <member name="P:Terminal.Gui.ITableSource.Columns">
            <summary>Gets the number of columns in the table.</summary>
        </member>
        <member name="P:Terminal.Gui.ITableSource.Item(System.Int32,System.Int32)">
            <summary>Returns the data at the given indexes of the table (row, column).</summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.ITableSource.Rows">
            <summary>Gets the number of rows in the table.</summary>
        </member>
        <member name="T:Terminal.Gui.ListColumnStyle">
            <summary>Defines rendering options that affect how the view is displayed.</summary>
        </member>
        <member name="P:Terminal.Gui.ListColumnStyle.Orientation">
            <summary>
                Gets or sets an Orientation enum indicating whether to populate data down each column rather than across each
                row. Defaults to <see cref="F:Terminal.Gui.Orientation.Horizontal"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListColumnStyle.ScrollParallel">
            <summary>
                Gets or sets a flag indicating whether to scroll in the same direction as
                <see cref="P:Terminal.Gui.ListColumnStyle.Orientation"/> . Defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ListTableSource">
            <summary>
                <see cref="T:Terminal.Gui.ITableSource"/> implementation that wraps a <see cref="T:System.Collections.IList"/>.  This class is
                mutable: changes are permitted to the wrapped <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ListTableSource.List">
            <summary>The list this source wraps.</summary>
        </member>
        <member name="F:Terminal.Gui.ListTableSource.Style">
            <summary>The style this source uses.</summary>
        </member>
        <member name="M:Terminal.Gui.ListTableSource.#ctor(System.Collections.IList,Terminal.Gui.TableView,Terminal.Gui.ListColumnStyle)">
            <summary>
                Creates a new columned list table instance based on the data in <paramref name="list"/> and dimensions from
                <paramref name="tableView"/>.
            </summary>
            <param name="list"></param>
            <param name="tableView"></param>
            <param name="style"></param>
        </member>
        <member name="M:Terminal.Gui.ListTableSource.#ctor(System.Collections.IList,Terminal.Gui.TableView)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ListTableSource.Count">
            <summary>The number of items in the IList source</summary>
        </member>
        <member name="P:Terminal.Gui.ListTableSource.DataTable">
            <summary>The data table this source wraps.</summary>
        </member>
        <member name="P:Terminal.Gui.ListTableSource.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ListTableSource.Rows">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ListTableSource.Columns">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ListTableSource.ColumnNames">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListTableSource.CalculateMaxLength">
            <summary>Returns the size in characters of the longest value read from <see cref="F:Terminal.Gui.ListTableSource.List"/></summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListTableSource.CreateTable(System.Int32)">
            <summary>Creates a DataTable from an IList to display in a <see cref="T:Terminal.Gui.TableView"/></summary>
        </member>
        <member name="T:Terminal.Gui.RowColorGetterArgs">
            <summary>
                Arguments for <see cref="T:Terminal.Gui.RowColorGetterDelegate"/>. Describes a row of data in a <see cref="T:Terminal.Gui.ITableSource"/>
                for which <see cref="T:Terminal.Gui.ColorScheme"/> is sought.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RowColorGetterArgs.RowIndex">
            <summary>The index of the row in <see cref="P:Terminal.Gui.RowColorGetterArgs.Table"/> for which color is needed</summary>
        </member>
        <member name="P:Terminal.Gui.RowColorGetterArgs.Table">
            <summary>The data table hosted by the <see cref="T:Terminal.Gui.TableView"/> control.</summary>
        </member>
        <member name="T:Terminal.Gui.SelectedCellChangedEventArgs">
            <summary>Defines the event arguments for <see cref="E:Terminal.Gui.TableView.SelectedCellChanged"/></summary>
        </member>
        <member name="M:Terminal.Gui.SelectedCellChangedEventArgs.#ctor(Terminal.Gui.ITableSource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new instance of arguments describing a change in selected cell in a <see cref="T:Terminal.Gui.TableView"/>
            </summary>
            <param name="t"></param>
            <param name="oldCol"></param>
            <param name="newCol"></param>
            <param name="oldRow"></param>
            <param name="newRow"></param>
        </member>
        <member name="P:Terminal.Gui.SelectedCellChangedEventArgs.NewCol">
            <summary>The newly selected column index.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.SelectedCellChangedEventArgs.NewRow">
            <summary>The newly selected row index.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.SelectedCellChangedEventArgs.OldCol">
            <summary>
                The previous selected column index.  May be invalid e.g. when the selection has been changed as a result of
                replacing the existing Table with a smaller one
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.SelectedCellChangedEventArgs.OldRow">
            <summary>
                The previous selected row index.  May be invalid e.g. when the selection has been changed as a result of
                deleting rows from the table
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.SelectedCellChangedEventArgs.Table">
            <summary>
                The current table to which the new indexes refer.  May be null e.g. if selection change is the result of
                clearing the table from the view
            </summary>
            <value></value>
        </member>
        <member name="T:Terminal.Gui.TableSelection">
            <summary>Describes a selected region of the table</summary>
        </member>
        <member name="M:Terminal.Gui.TableSelection.#ctor(System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>Creates a new selected area starting at the origin corner and covering the provided rectangular area</summary>
            <param name="origin"></param>
            <param name="rect"></param>
        </member>
        <member name="P:Terminal.Gui.TableSelection.IsToggled">
            <summary>
                True if the selection was made through <see cref="F:Terminal.Gui.Command.Select"/> and therefore should persist even
                through keyboard navigation.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableSelection.Origin">
            <summary>Corner of the <see cref="P:Terminal.Gui.TableSelection.Rectangle"/> where selection began</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableSelection.Rectangle">
            <summary>Area selected</summary>
            <value></value>
        </member>
        <member name="T:Terminal.Gui.TableStyle">
            <summary>
                Defines rendering options that affect how the table is displayed.
                <a href="../docs/tableview.md">See TableView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.AlwaysShowHeaders">
            <summary>When scrolling down always lock the column headers in place as the first row of the table</summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.AlwaysUseNormalColorForVerticalCellLines">
            <summary>
                Gets or sets a flag indicating whether to force <see cref="P:Terminal.Gui.ColorScheme.Normal"/> use when rendering vertical
                cell lines (even when <see cref="P:Terminal.Gui.TableView.FullRowSelect"/> is on).
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.ColumnStyles">
            <summary>Collection of columns for which you want special rendering (e.g. custom column lengths, text alignment etc)</summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.ExpandLastColumn">
            <summary>
                Determines rendering when the last column in the table is visible but it's content or
                <see cref="P:Terminal.Gui.ColumnStyle.MaxWidth"/> is less than the remaining space in the control.  True (the default) will expand
                the column to fill the remaining bounds of the control.  False will draw a column ending line and leave a blank
                column that cannot be selected in the remaining space.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableStyle.InvertSelectedCellFirstCharacter">
            <summary>
                True to invert the colors of the first symbol of the selected cell in the <see cref="T:Terminal.Gui.TableView"/>. This gives
                the appearance of a cursor for when the <see cref="T:Terminal.Gui.ConsoleDriver"/> doesn't otherwise show this
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.RowColorGetter">
            <summary>
                Delegate for coloring specific rows in a different color.  For cell color
                <see cref="F:Terminal.Gui.ColumnStyle.ColorGetter"/>
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableStyle.ShowHeaders">
            <summary>
                Gets or sets a flag indicating whether to render headers of a <see cref="T:Terminal.Gui.TableView"/>. Defaults to
                <see langword="true"/>.
            </summary>
            <remarks>
                <see cref="P:Terminal.Gui.TableStyle.ShowHorizontalHeaderOverline"/>, <see cref="P:Terminal.Gui.TableStyle.ShowHorizontalHeaderUnderline"/> etc may still be used
                even if <see cref="P:Terminal.Gui.TableStyle.ShowHeaders"/> is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TableStyle.ShowHorizontalBottomline">
            <summary>
                Gets or sets a flag indicating whether there should be a horizontal line after all the data in the table.
                Defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.ShowHorizontalHeaderOverline">
            <summary>True to render a solid line above the headers</summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.ShowHorizontalHeaderUnderline">
            <summary>True to render a solid line under the headers</summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.ShowHorizontalScrollIndicators">
            <summary>
                True to render a arrows on the right/left of the table when there are more column(s) that can be scrolled to.
                Requires <see cref="P:Terminal.Gui.TableStyle.ShowHorizontalHeaderUnderline"/> to be true. Defaults to true
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.ShowVerticalCellLines">
            <summary>True to render a solid line vertical line between cells</summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.ShowVerticalHeaderLines">
            <summary>True to render a solid line vertical line between headers</summary>
        </member>
        <member name="P:Terminal.Gui.TableStyle.SmoothHorizontalScrolling">
            <summary>
                <para>
                    Determines how <see cref="P:Terminal.Gui.TableView.ColumnOffset"/> is updated when scrolling right off the end of the
                    currently visible area.
                </para>
                <para>
                    If true then when scrolling right the scroll offset is increased the minimum required to show the new column.
                    This may be slow if you have an incredibly large number of columns in your table and/or slow
                    <see cref="F:Terminal.Gui.ColumnStyle.RepresentationGetter"/> implementations
                </para>
                <para>If false then scroll offset is set to the currently selected column (i.e. PageRight).</para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.TableStyle.GetColumnStyleIfAny(System.Int32)">
            <summary>
                Returns the entry from <see cref="P:Terminal.Gui.TableStyle.ColumnStyles"/> for the given <paramref name="col"/> or null if no custom
                styling is defined for it
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableStyle.GetOrCreateColumnStyle(System.Int32)">
            <summary>
                Returns an existing <see cref="T:Terminal.Gui.ColumnStyle"/> for the given <paramref name="col"/> or creates a new one with
                default options
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.CellColorGetterDelegate">
            <summary>Delegate for providing color to <see cref="T:Terminal.Gui.TableView"/> cells based on the value being rendered</summary>
            <param name="args">Contains information about the cell for which color is needed</param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.RowColorGetterDelegate">
            <summary>Delegate for providing color for a whole row of a <see cref="T:Terminal.Gui.TableView"/></summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TableView">
            <summary>
                View for tabular data based on a <see cref="T:Terminal.Gui.ITableSource"/>.
                <a href="../docs/tableview.md">See TableView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TableView.DefaultMaxCellWidth">
            <summary>
                The default maximum cell width for <see cref="P:Terminal.Gui.TableView.MaxCellWidth"/> and <see cref="P:Terminal.Gui.ColumnStyle.MaxWidth"/>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TableView.DefaultMinAcceptableWidth">
            <summary>The default minimum cell width for <see cref="P:Terminal.Gui.ColumnStyle.MinAcceptableWidth"/></summary>
        </member>
        <member name="M:Terminal.Gui.TableView.#ctor(Terminal.Gui.ITableSource)">
            <summary>Initializes a <see cref="T:Terminal.Gui.TableView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.</summary>
            <param name="table">The table to display in the control</param>
        </member>
        <member name="M:Terminal.Gui.TableView.#ctor">
            <summary>
                Initializes a <see cref="T:Terminal.Gui.TableView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout. Set the
                <see cref="P:Terminal.Gui.TableView.Table"/> property to begin editing
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CellActivationKey">
            <summary>The key which when pressed should trigger <see cref="E:Terminal.Gui.TableView.CellActivated"/> event.  Defaults to Enter.</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CollectionNavigator">
            <summary>Navigator for cycling the selected item in the table by typing. Set to null to disable this feature.</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnOffset">
            <summary>
                Horizontal scroll offset.  The index of the first column in <see cref="P:Terminal.Gui.TableView.Table"/> to display when when rendering
                the view.
            </summary>
            <remarks>This property allows very wide tables to be rendered with horizontal scrolling</remarks>
        </member>
        <member name="P:Terminal.Gui.TableView.FullRowSelect">
            <summary>True to select the entire row at once.  False to select individual cells.  Defaults to false</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.MaxCellWidth">
            <summary>
                The maximum number of characters to render in any given column.  This prevents one long column from pushing
                out all the others
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.MinCellWidth">
            <summary>The minimum number of characters to render in any given column.</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.MultiSelect">
            <summary>True to allow regions to be selected</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.MultiSelectedRegions">
            <summary>
                When <see cref="P:Terminal.Gui.TableView.MultiSelect"/> is enabled this property contain all rectangles of selected cells.  Rectangles
                describe column/rows selected in <see cref="P:Terminal.Gui.TableView.Table"/> (not screen coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.TableView.NullSymbol">
            <summary>The text representation that should be rendered for cells with the value <see cref="F:System.DBNull.Value"/></summary>
        </member>
        <member name="P:Terminal.Gui.TableView.RowOffset">
            <summary>
                Vertical scroll offset.  The index of the first row in <see cref="P:Terminal.Gui.TableView.Table"/> to display in the first non header
                line of the control when rendering the view.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.SelectedColumn">
            <summary>The index of <see cref="P:System.Data.DataTable.Columns"/> in <see cref="P:Terminal.Gui.TableView.Table"/> that the user has currently selected</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.SelectedRow">
            <summary>The index of <see cref="P:System.Data.DataTable.Rows"/> in <see cref="P:Terminal.Gui.TableView.Table"/> that the user has currently selected</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.SeparatorSymbol">
            <summary>
                The symbol to add after each cell value and header value to visually separate values (if not using vertical
                gridlines)
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.Style">
            <summary>Contains options for changing how the table is rendered</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.Table">
            <summary>The data table to render in the view.  Setting this property automatically updates and redraws the control.</summary>
        </member>
        <member name="E:Terminal.Gui.TableView.CellActivated">
            <summary>
                This event is raised when a cell is activated e.g. by double-clicking or pressing
                <see cref="P:Terminal.Gui.TableView.CellActivationKey"/>
            </summary>
        </member>
        <member name="E:Terminal.Gui.TableView.CellToggled">
            <summary>This event is raised when a cell is toggled (see <see cref="F:Terminal.Gui.Command.Select"/></summary>
        </member>
        <member name="M:Terminal.Gui.TableView.CellToScreen(System.Int32,System.Int32)">
            <summary>
                Returns the screen position (relative to the control client area) that the given cell is rendered or null if
                it is outside the current scroll area or no table is loaded
            </summary>
            <param name="tableColumn">The index of the <see cref="P:Terminal.Gui.TableView.Table"/> column you are looking for</param>
            <param name="tableRow">The index of the row in <see cref="P:Terminal.Gui.TableView.Table"/> that you are looking for</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionByOffset(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Moves the <see cref="P:Terminal.Gui.TableView.SelectedRow"/> and <see cref="P:Terminal.Gui.TableView.SelectedColumn"/> by the provided offsets. Optionally
                starting a box selection (see <see cref="P:Terminal.Gui.TableView.MultiSelect"/>)
            </summary>
            <param name="offsetX">Offset in number of columns</param>
            <param name="offsetY">Offset in number of rows</param>
            <param name="extendExistingSelection">True to create a multi cell selection or adjust an existing one</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionToEndOfRow(System.Boolean)">
            <summary>Moves or extends the selection to the last cell in the current row</summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionToEndOfTable(System.Boolean)">
            <summary>
                Moves or extends the selection to the final cell in the table (nX,nY). If <see cref="P:Terminal.Gui.TableView.FullRowSelect"/> is
                enabled then selection instead moves to ( <see cref="P:Terminal.Gui.TableView.SelectedColumn"/>,nY) i.e. no horizontal scrolling.
            </summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionToStartOfRow(System.Boolean)">
            <summary>Moves or extends the selection to the first cell in the current row</summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionToStartOfTable(System.Boolean)">
            <summary>
                Moves or extends the selection to the first cell in the table (0,0). If <see cref="P:Terminal.Gui.TableView.FullRowSelect"/> is enabled
                then selection instead moves to ( <see cref="P:Terminal.Gui.TableView.SelectedColumn"/>,0) i.e. no horizontal scrolling.
            </summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.EnsureSelectedCellIsVisible">
            <summary>
                Updates scroll offsets to ensure that the selected cell is visible.  Has no effect if <see cref="P:Terminal.Gui.TableView.Table"/> has
                not been set.
            </summary>
            <remarks>
                Changes will not be immediately visible in the display until you call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TableView.EnsureValidScrollOffsets">
            <summary>
                Updates <see cref="P:Terminal.Gui.TableView.ColumnOffset"/> and <see cref="P:Terminal.Gui.TableView.RowOffset"/> where they are outside the bounds of the table
                (by adjusting them to the nearest existing cell).  Has no effect if <see cref="P:Terminal.Gui.TableView.Table"/> has not been set.
            </summary>
            <remarks>
                Changes will not be immediately visible in the display until you call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TableView.EnsureValidSelection">
            <summary>
                Updates <see cref="P:Terminal.Gui.TableView.SelectedColumn"/>, <see cref="P:Terminal.Gui.TableView.SelectedRow"/> and <see cref="P:Terminal.Gui.TableView.MultiSelectedRegions"/> where
                they are outside the bounds of the table (by adjusting them to the nearest existing cell).  Has no effect if
                <see cref="P:Terminal.Gui.TableView.Table"/> has not been set.
            </summary>
            <remarks>
                Changes will not be immediately visible in the display until you call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TableView.GetAllSelectedCells">
            <summary>
                Returns all cells in any <see cref="P:Terminal.Gui.TableView.MultiSelectedRegions"/> (if <see cref="P:Terminal.Gui.TableView.MultiSelect"/> is enabled) and the
                selected cell
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.IsSelected(System.Int32,System.Int32)">
            <summary>
                <para>
                    Returns true if the given cell is selected either because it is the active cell or part of a multi cell
                    selection (e.g. <see cref="P:Terminal.Gui.TableView.FullRowSelect"/>).
                </para>
                <remarks>Returns <see langword="false"/> if <see cref="P:Terminal.Gui.ColumnStyle.Visible"/> is <see langword="false"/>.</remarks>
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TableView.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TableView.OnProcessKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TableView.PageDown(System.Boolean)">
            <summary>Moves the selection down by one page</summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.PageUp(System.Boolean)">
            <summary>Moves the selection up by one page</summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.PositionCursor">
            <summary>
                Positions the cursor in the area of the screen in which the start of the active cell is rendered.  Calls base
                implementation if active cell is not visible due to scrolling or table is loaded etc
            </summary>
        </member>
        <member name="M:Terminal.Gui.TableView.ScreenToCell(System.Int32,System.Int32)">
            <summary>
                Returns the column and row of <see cref="P:Terminal.Gui.TableView.Table"/> that corresponds to a given point on the screen (relative
                to the control client area).  Returns null if the point is in the header, no table is loaded or outside the control
                bounds.
            </summary>
            <param name="clientX">X offset from the top left of the control.</param>
            <param name="clientY">Y offset from the top left of the control.</param>
            <returns>Cell clicked or null.</returns>
        </member>
        <member name="M:Terminal.Gui.TableView.ScreenToCell(System.Drawing.Point)">
            <summary>
                Returns the column and row of <see cref="P:Terminal.Gui.TableView.Table"/> that corresponds to a given point on the screen (relative
                to the control client area).  Returns null if the point is in the header, no table is loaded or outside the control
                bounds.
            </summary>
            <param name="client">offset from the top left of the control.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:Terminal.Gui.TableView.ScreenToCell(System.Int32,System.Int32,System.Nullable{System.Int32}@)">
            <summary>
                . Returns the column and row of <see cref="P:Terminal.Gui.TableView.Table"/> that corresponds to a given point on the screen (relative
                to the control client area).  Returns null if the point is in the header, no table is loaded or outside the control
                bounds.
            </summary>
            <param name="clientX">X offset from the top left of the control.</param>
            <param name="clientY">Y offset from the top left of the control.</param>
            <param name="headerIfAny">If the click is in a header this is the column clicked.</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ScreenToCell(System.Drawing.Point,System.Nullable{System.Int32}@)">
            <summary>
                Returns the column and row of <see cref="P:Terminal.Gui.TableView.Table"/> that corresponds to a given point on the screen (relative
                to the control client area).  Returns null if the point is in the header, no table is loaded or outside the control
                bounds.
            </summary>
            <param name="client">offset from the top left of the control.</param>
            <param name="headerIfAny">If the click is in a header this is the column clicked.</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ScreenToCell(System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
                Returns the column and row of <see cref="P:Terminal.Gui.TableView.Table"/> that corresponds to a given point on the screen (relative
                to the control client area).  Returns null if the point is in the header, no table is loaded or outside the control
                bounds.
            </summary>
            <param name="clientX">X offset from the top left of the control.</param>
            <param name="clientY">Y offset from the top left of the control.</param>
            <param name="headerIfAny">If the click is in a header this is the column clicked.</param>
            <param name="offsetX">The horizontal offset of the click within the returned cell.</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ScreenToCell(System.Drawing.Point,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
                Returns the column and row of <see cref="P:Terminal.Gui.TableView.Table"/> that corresponds to a given point on the screen (relative
                to the control client area).  Returns null if the point is in the header, no table is loaded or outside the control
                bounds.
            </summary>
            <param name="client">offset from the top left of the control.</param>
            <param name="headerIfAny">If the click is in a header this is the column clicked.</param>
            <param name="offsetX">The horizontal offset of the click within the returned cell.</param>
        </member>
        <member name="M:Terminal.Gui.TableView.SelectAll">
            <summary>
                When <see cref="P:Terminal.Gui.TableView.MultiSelect"/> is on, creates selection over all cells in the table (replacing any old
                selection regions)
            </summary>
        </member>
        <member name="E:Terminal.Gui.TableView.SelectedCellChanged">
            <summary>This event is raised when the selected cell in the table changes.</summary>
        </member>
        <member name="M:Terminal.Gui.TableView.SetSelection(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Moves the <see cref="P:Terminal.Gui.TableView.SelectedRow"/> and <see cref="P:Terminal.Gui.TableView.SelectedColumn"/> to the given col/row in
                <see cref="P:Terminal.Gui.TableView.Table"/>. Optionally starting a box selection (see <see cref="P:Terminal.Gui.TableView.MultiSelect"/>)
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="extendExistingSelection">True to create a multi cell selection or adjust an existing one</param>
        </member>
        <member name="M:Terminal.Gui.TableView.Update">
            <summary>
                Updates the view to reflect changes to <see cref="P:Terminal.Gui.TableView.Table"/> and to (<see cref="P:Terminal.Gui.TableView.ColumnOffset"/> /
                <see cref="P:Terminal.Gui.TableView.RowOffset"/>) etc
            </summary>
            <remarks>This always calls <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/></remarks>
        </member>
        <member name="M:Terminal.Gui.TableView.OnCellActivated(Terminal.Gui.CellActivatedEventArgs)">
            <summary>Invokes the <see cref="E:Terminal.Gui.TableView.CellActivated"/> event</summary>
            <param name="args"></param>
        </member>
        <member name="M:Terminal.Gui.TableView.OnCellToggled(Terminal.Gui.CellToggledEventArgs)">
            <summary>Invokes the <see cref="E:Terminal.Gui.TableView.CellToggled"/> event</summary>
            <param name="args"></param>
        </member>
        <member name="M:Terminal.Gui.TableView.OnSelectedCellChanged(Terminal.Gui.SelectedCellChangedEventArgs)">
            <summary>Invokes the <see cref="E:Terminal.Gui.TableView.SelectedCellChanged"/> event</summary>
        </member>
        <member name="M:Terminal.Gui.TableView.RenderCell(Terminal.Gui.Attribute,System.String,System.Boolean)">
            <summary>
                Override to provide custom multi colouring to cells.  Use <see cref="P:Terminal.Gui.View.Driver"/> to with
                <see cref="M:Terminal.Gui.ConsoleDriver.AddStr(System.String)"/>.  The driver will already be in the correct place when rendering and you
                must render the full <paramref name="render"/> or the view will not look right.  For simpler provision of color use
                <see cref="F:Terminal.Gui.ColumnStyle.ColorGetter"/> For changing the content that is rendered use
                <see cref="F:Terminal.Gui.ColumnStyle.RepresentationGetter"/>
            </summary>
            <param name="cellColor"></param>
            <param name="render"></param>
            <param name="isPrimaryCell"></param>
        </member>
        <member name="M:Terminal.Gui.TableView.GetHeaderHeight">
            <summary>Returns the amount of vertical space required to display the header</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.GetHeaderHeightIfAny">
            <summary>Returns the amount of vertical space currently occupied by the header or 0 if it is not visible.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.CalculateMaxCellWidth(System.Int32,System.Int32,Terminal.Gui.ColumnStyle)">
            <summary>
                Returns the maximum of the <paramref name="col"/> name and the maximum length of data that will be rendered
                starting at <see cref="P:Terminal.Gui.TableView.RowOffset"/> and rendering <paramref name="rowsToRender"/>
            </summary>
            <param name="col"></param>
            <param name="rowsToRender"></param>
            <param name="colStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.CalculateViewport(System.Drawing.Rectangle,System.Int32)">
            <summary>
                Calculates which columns should be rendered given the <paramref name="bounds"/> in which to display and the
                <see cref="P:Terminal.Gui.TableView.ColumnOffset"/>
            </summary>
            <param name="bounds"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.ClearLine(System.Int32,System.Int32)">
            <summary>Clears a line of the console by filling it with spaces</summary>
            <param name="row"></param>
            <param name="width"></param>
        </member>
        <member name="M:Terminal.Gui.TableView.CreateTableSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Returns a new rectangle between the two points with positive width/height regardless of relative positioning
                of the points.  pt1 is always considered the <see cref="P:Terminal.Gui.TableSelection.Origin"/> point
            </summary>
            <param name="pt1X">Origin point for the selection in X</param>
            <param name="pt1Y">Origin point for the selection in Y</param>
            <param name="pt2X">End point for the selection in X</param>
            <param name="pt2Y">End point for the selection in Y</param>
            <param name="toggle">True if selection is result of <see cref="F:Terminal.Gui.Command.Select"/></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.CreateTableSelection(System.Int32,System.Int32)">
            <summary>Returns a single point as a <see cref="T:Terminal.Gui.TableSelection"/></summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.GetNearestVisibleColumn(System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Returns <paramref name="columnIndex"/> unless the <see cref="P:Terminal.Gui.ColumnStyle.Visible"/> is false for the indexed
                column.  If so then the index returned is nudged to the nearest visible column.
            </summary>
            <remarks>Returns <paramref name="columnIndex"/> unchanged if it is invalid (e.g. out of bounds).</remarks>
            <param name="columnIndex">The input column index.</param>
            <param name="lookRight">
                When nudging invisible selections look right first. <see langword="true"/> to look right,
                <see langword="false"/> to look left.
            </param>
            <param name="allowBumpingInOppositeDirection">
                If we cannot find anything visible when looking in direction of
                <paramref name="lookRight"/> then should we look in the opposite direction instead? Use true if you want to push a
                selection to a valid index no matter what. Use false if you are primarily interested in learning about directional
                column visibility.
            </param>
        </member>
        <member name="M:Terminal.Gui.TableView.GetRepresentation(System.Object,Terminal.Gui.ColumnStyle)">
            <summary>
                Returns the value that should be rendered to best represent a strongly typed <paramref name="value"/> read
                from <see cref="P:Terminal.Gui.TableView.Table"/>
            </summary>
            <param name="value"></param>
            <param name="colStyle">Optional style defining how to represent cell values</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.IsColumnVisible(System.Int32)">
            <summary>
                Returns true if the given <paramref name="columnIndex"/> indexes a visible column otherwise false.  Returns
                false for indexes that are out of bounds.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.TableIsNullOrInvisible">
            <summary>
                Returns true if the <see cref="P:Terminal.Gui.TableView.Table"/> is not set or all the columns in the <see cref="P:Terminal.Gui.TableView.Table"/> have an
                explicit <see cref="T:Terminal.Gui.ColumnStyle"/> that marks them <see cref="F:Terminal.Gui.ColumnStyle.visible"/> <see langword="false"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.TruncateOrPad(System.Object,System.String,System.Int32,Terminal.Gui.ColumnStyle)">
            <summary>
                Truncates or pads <paramref name="representation"/> so that it occupies a exactly
                <paramref name="availableHorizontalSpace"/> using the alignment specified in <paramref name="colStyle"/> (or left
                if no style is defined)
            </summary>
            <param name="originalCellValue">The object in this cell of the <see cref="P:Terminal.Gui.TableView.Table"/></param>
            <param name="representation">The string representation of <paramref name="originalCellValue"/></param>
            <param name="availableHorizontalSpace"></param>
            <param name="colStyle">Optional style indicating custom alignment for the cell</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.UnionSelection(System.Int32,System.Int32)">
            <summary>Unions the current selected cell (and/or regions) with the provided cell and makes it the active one.</summary>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="T:Terminal.Gui.TableView.ColumnToRender">
            <summary>Describes a desire to render a column at a given horizontal position in the UI</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnToRender.Column">
            <summary>The column to render</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnToRender.IsVeryLast">
            <summary>True if this column is the very last column in the <see cref="P:Terminal.Gui.TableView.Table"/> (not just the last visible column)</summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnToRender.Width">
            <summary>
                The width that the column should occupy as calculated by <see cref="M:Terminal.Gui.TableView.CalculateViewport(System.Drawing.Rectangle,System.Int32)"/>.  Note
                that this includes space for padding i.e. the separator between columns.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnToRender.X">
            <summary>The horizontal position to begin rendering the column at</summary>
        </member>
        <member name="T:Terminal.Gui.TreeTableSource`1">
            <summary>An <see cref="T:Terminal.Gui.ITableSource"/> with expandable rows.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Terminal.Gui.TreeTableSource`1.#ctor(Terminal.Gui.TableView,System.String,Terminal.Gui.TreeView{`0},System.Collections.Generic.Dictionary{System.String,System.Func{`0,System.Object}})">
            <summary>
                Creates a new instance of <see cref="T:Terminal.Gui.TreeTableSource`1"/> presenting the given <paramref name="tree"/>. This
                source should only be used with <paramref name="table"/>.
            </summary>
            <param name="table">The table this source will provide data for.</param>
            <param name="firstColumnName">
                Column name to use for the first column of the table (where the tree branches/leaves will
                be rendered.
            </param>
            <param name="tree">
                The tree data to render. This should be a new view and not used elsewhere (e.g. via
                <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/>).
            </param>
            <param name="subsequentColumns">
                Getter methods for each additional property you want to present in the table. For example:
                <code>
             new () {
                { "Colname1", (t)=>t.SomeField},
                { "Colname2", (t)=>t.SomeOtherField}
            }
             </code>
            </param>
        </member>
        <member name="M:Terminal.Gui.TreeTableSource`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TreeTableSource`1.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TreeTableSource`1.Rows">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TreeTableSource`1.Columns">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TreeTableSource`1.ColumnNames">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeTableSource`1.GetObjectOnRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeTableSource`1.GetAllObjects">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeTableSource`1.RowToObject(System.Int32)">
            <summary>Returns the tree model object rendering on the given <paramref name="row"/> of the table.</summary>
            <param name="row">Row in table.</param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TabMouseEventArgs">
            <summary>Describes a mouse event over a specific <see cref="P:Terminal.Gui.TabMouseEventArgs.Tab"/> in a <see cref="T:Terminal.Gui.TabView"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TabMouseEventArgs.#ctor(Terminal.Gui.Tab,Terminal.Gui.MouseEvent)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.TabMouseEventArgs"/> class.</summary>
            <param name="tab"><see cref="P:Terminal.Gui.TabMouseEventArgs.Tab"/> that the mouse was over when the event occurred.</param>
            <param name="mouseEvent">The mouse activity being reported</param>
        </member>
        <member name="P:Terminal.Gui.TabMouseEventArgs.MouseEvent">
            <summary>
                Gets the actual mouse event.  Use <see cref="P:Terminal.Gui.MouseEvent.Handled"/> to cancel this event and perform custom
                behavior (e.g. show a context menu).
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabMouseEventArgs.Tab">
            <summary>Gets the <see cref="P:Terminal.Gui.TabMouseEventArgs.Tab"/> (if any) that the mouse was over when the <see cref="P:Terminal.Gui.TabMouseEventArgs.MouseEvent"/> occurred.</summary>
            <remarks>This will be null if the click is after last tab or before first.</remarks>
        </member>
        <member name="T:Terminal.Gui.TabStyle">
            <summary>Describes render stylistic selections of a <see cref="T:Terminal.Gui.TabView"/></summary>
        </member>
        <member name="P:Terminal.Gui.TabStyle.ShowBorder">
            <summary>True to show a solid box around the edge of the control.  Defaults to true.</summary>
        </member>
        <member name="P:Terminal.Gui.TabStyle.ShowTopLine">
            <summary>
                True to show the top lip of tabs.  False to directly begin with tab text during rendering.  When true header
                line occupies 3 rows, when false only 2. Defaults to true.
                <para>When <see cref="P:Terminal.Gui.TabStyle.TabsOnBottom"/> is enabled this instead applies to the bottommost line of the control</para>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabStyle.TabsOnBottom">
            <summary>True to render tabs at the bottom of the view instead of the top</summary>
        </member>
        <member name="T:Terminal.Gui.TabView">
            <summary>Control that hosts multiple sub views, presenting a single one at once.</summary>
        </member>
        <member name="F:Terminal.Gui.TabView.DefaultMaxTabTextWidth">
            <summary>The default <see cref="P:Terminal.Gui.TabView.MaxTabTextWidth"/> to set on new <see cref="T:Terminal.Gui.TabView"/> controls.</summary>
        </member>
        <member name="F:Terminal.Gui.TabView._contentView">
            <summary>
                This sub view is the main client area of the current tab.  It hosts the <see cref="P:Terminal.Gui.Tab.View"/> of the tab, the
                <see cref="P:Terminal.Gui.TabView.SelectedTab"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TabView._tabsBar">
            <summary>This sub view is the 2 or 3 line control that represents the actual tabs themselves.</summary>
        </member>
        <member name="M:Terminal.Gui.TabView.#ctor">
            <summary>Initializes a <see cref="T:Terminal.Gui.TabView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.</summary>
        </member>
        <member name="P:Terminal.Gui.TabView.MaxTabTextWidth">
            <summary>
                The maximum number of characters to render in a Tab header.  This prevents one long tab from pushing out all
                the others.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabView.SelectedTab">
            <summary>The currently selected member of <see cref="P:Terminal.Gui.TabView.Tabs"/> chosen by the user.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TabView.Style">
            <summary>Render choices for how to display tabs.  After making changes, call <see cref="M:Terminal.Gui.TabView.ApplyStyleChanges"/>.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TabView.Tabs">
            <summary>All tabs currently hosted by the control.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TabView.TabScrollOffset">
            <summary>When there are too many tabs to render, this indicates the first tab to render on the screen.</summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.TabView.AddTab(Terminal.Gui.Tab,System.Boolean)">
            <summary>Adds the given <paramref name="tab"/> to <see cref="P:Terminal.Gui.TabView.Tabs"/>.</summary>
            <param name="tab"></param>
            <param name="andSelect">True to make the newly added Tab the <see cref="P:Terminal.Gui.TabView.SelectedTab"/>.</param>
        </member>
        <member name="M:Terminal.Gui.TabView.ApplyStyleChanges">
            <summary>
                Updates the control to use the latest state settings in <see cref="P:Terminal.Gui.TabView.Style"/>. This can change the size of the
                client area of the tab (for rendering the selected tab's content).  This method includes a call to
                <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TabView.EnsureSelectedTabIsVisible">
            <summary>Updates <see cref="P:Terminal.Gui.TabView.TabScrollOffset"/> to ensure that <see cref="P:Terminal.Gui.TabView.SelectedTab"/> is visible.</summary>
        </member>
        <member name="M:Terminal.Gui.TabView.EnsureValidScrollOffsets(System.Int32)">
            <summary>Updates <see cref="P:Terminal.Gui.TabView.TabScrollOffset"/> to be a valid index of <see cref="P:Terminal.Gui.TabView.Tabs"/>.</summary>
            <param name="value">The value to validate.</param>
            <remarks>Changes will not be immediately visible in the display until you call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>.</remarks>
            <returns>The valid <see cref="P:Terminal.Gui.TabView.TabScrollOffset"/> for the given value.</returns>
        </member>
        <member name="M:Terminal.Gui.TabView.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TabView.OnDrawContentComplete(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TabView.RemoveTab(Terminal.Gui.Tab)">
            <summary>
                Removes the given <paramref name="tab"/> from <see cref="P:Terminal.Gui.TabView.Tabs"/>. Caller is responsible for disposing the
                tab's hosted <see cref="P:Terminal.Gui.Tab.View"/> if appropriate.
            </summary>
            <param name="tab"></param>
        </member>
        <member name="E:Terminal.Gui.TabView.SelectedTabChanged">
            <summary>Event for when <see cref="P:Terminal.Gui.TabView.SelectedTab"/> changes.</summary>
        </member>
        <member name="M:Terminal.Gui.TabView.SwitchTabBy(System.Int32)">
            <summary>
                Changes the <see cref="P:Terminal.Gui.TabView.SelectedTab"/> by the given <paramref name="amount"/>. Positive for right, negative for
                left.  If no tab is currently selected then the first tab will become selected.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="E:Terminal.Gui.TabView.TabClicked">
            <summary>
                Event fired when a <see cref="T:Terminal.Gui.Tab"/> is clicked.  Can be used to cancel navigation, show context menu (e.g. on
                right click) etc.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TabView.Dispose(System.Boolean)">
            <summary>Disposes the control and all <see cref="P:Terminal.Gui.TabView.Tabs"/>.</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Terminal.Gui.TabView.OnSelectedTabChanged(Terminal.Gui.Tab,Terminal.Gui.Tab)">
            <summary>Raises the <see cref="E:Terminal.Gui.TabView.SelectedTabChanged"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.TabView.CalculateViewport(System.Drawing.Rectangle)">
            <summary>Returns which tabs to render at each x location.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TabView.GetTabHeight(System.Boolean)">
            <summary>
                Returns the number of rows occupied by rendering the tabs, this depends on <see cref="P:Terminal.Gui.TabStyle.ShowTopLine"/>
                and can be 0 (e.g. if <see cref="P:Terminal.Gui.TabStyle.TabsOnBottom"/> and you ask for <paramref name="top"/>).
            </summary>
            <param name="top">True to measure the space required at the top of the control, false to measure space at the bottom.</param>
            .
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TabView.OnTabClicked(Terminal.Gui.TabMouseEventArgs)">
            <summary>Raises the <see cref="E:Terminal.Gui.TabView.TabClicked"/> event.</summary>
            <param name="tabMouseEventArgs"></param>
        </member>
        <member name="M:Terminal.Gui.TabView.TabRowView.RenderTabLine">
            <summary>Renders the line with the tab names in it.</summary>
        </member>
        <member name="M:Terminal.Gui.TabView.TabRowView.RenderUnderline">
            <summary>Renders the line of the tab that adjoins the content of the tab.</summary>
        </member>
        <member name="P:Terminal.Gui.TabView.TabToRender.IsSelected">
            <summary>True if the tab that is being rendered is the selected one.</summary>
            <value></value>
        </member>
        <member name="T:Terminal.Gui.TextField">
            <summary>Single-line text entry <see cref="T:Terminal.Gui.View"/></summary>
            <remarks>The <see cref="T:Terminal.Gui.TextField"/> <see cref="T:Terminal.Gui.View"/> provides editing functionality and mouse support.</remarks>
        </member>
        <member name="M:Terminal.Gui.TextField.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.TextField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
                positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.Autocomplete">
            <summary>
                Provides autocomplete context menu based on suggestions at the current cursor position. Configure
                <see cref="T:Terminal.Gui.ISuggestionGenerator"/> to enable this feature.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.Caption">
            <summary>
                Gets or sets the text to render in control when no value has been entered yet and the <see cref="T:Terminal.Gui.View"/> does
                not yet have input focus.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.CaptionColor">
            <summary>Gets or sets the foreground <see cref="T:Terminal.Gui.Color"/> to use when rendering <see cref="P:Terminal.Gui.TextField.Caption"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.TextField.ContextMenu">
            <summary>Get the <see cref="P:Terminal.Gui.TextField.ContextMenu"/> for this view.</summary>
        </member>
        <member name="P:Terminal.Gui.TextField.CursorPosition">
            <summary>Sets or gets the current cursor position.</summary>
        </member>
        <member name="P:Terminal.Gui.TextField.HasHistoryChanges">
            <summary>
                Indicates whatever the text has history changes or not. <see langword="true"/> if the text has history changes
                <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.IsDirty">
            <summary>
                Indicates whatever the text was changed or not. <see langword="true"/> if the text was changed
                <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.ReadOnly">
            <summary>If set to true its not allow any changes in the text.</summary>
        </member>
        <member name="P:Terminal.Gui.TextField.ScrollOffset">
            <summary>Gets the left offset position.</summary>
        </member>
        <member name="P:Terminal.Gui.TextField.Secret">
            <summary>
                Sets the secret property.
                <remarks>This makes the text entry suitable for entering passwords.</remarks>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.SelectedLength">
            <summary>Length of the selected text.</summary>
        </member>
        <member name="P:Terminal.Gui.TextField.SelectedStart">
            <summary>Start position of the selected text.</summary>
        </member>
        <member name="P:Terminal.Gui.TextField.SelectedText">
            <summary>The selected text.</summary>
        </member>
        <member name="P:Terminal.Gui.TextField.Text">
            <summary>Sets or gets the text held by the view.</summary>
        </member>
        <member name="P:Terminal.Gui.TextField.Used">
            <summary>
                Tracks whether the text field should be considered "used", that is, that the user has moved in the entry, so
                new input should be appended at the cursor position, rather than clearing the entry
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.ClearAllSelection">
            <summary>Clear the selected text.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.ClearHistoryChanges">
            <summary>Allows clearing the <see cref="T:Terminal.Gui.HistoryText.HistoryTextItem"/> items updating the original text.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Copy">
            <summary>Copy the selected text to the clipboard.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Cut">
            <summary>Cut the selected text to the clipboard.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.DeleteAll">
            <summary>Deletes all text.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.DeleteCharLeft(System.Boolean)">
            <summary>Deletes the character to the left.</summary>
            <param name="usePreTextChangedCursorPos">
                If set to <see langword="true">true</see> use the cursor position cached ;
                otherwise use <see cref="P:Terminal.Gui.TextField.CursorPosition"/>. use .
            </param>
        </member>
        <member name="M:Terminal.Gui.TextField.DeleteCharRight">
            <summary>Deletes the character to the right.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.GetNormalColor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.InsertText(System.String,System.Boolean)">
            <summary>
                Inserts the given <paramref name="toAdd"/> text at the current cursor position exactly as if the user had just
                typed it
            </summary>
            <param name="toAdd">Text to add</param>
            <param name="useOldCursorPos">Use the previous cursor position.</param>
        </member>
        <member name="M:Terminal.Gui.TextField.KillWordBackwards">
            <summary>Deletes word backwards.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.KillWordForwards">
            <summary>Deletes word forwards.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.MoveEnd">
            <summary>Moves cursor to the end of the typed text.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.OnInvokingKeyBindings(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.OnProcessKeyDown(Terminal.Gui.Key)">
            TODO: Flush out these docs
            <summary>
                Processes key presses for the <see cref="T:Terminal.Gui.TextField"/>.
                <remarks>
                    The <see cref="T:Terminal.Gui.TextField"/> control responds to the following keys:
                    <list type="table">
                        <listheader>
                            <term>Keys</term> <description>Function</description>
                        </listheader>
                        <item>
                            <term><see cref="P:Terminal.Gui.Key.Delete"/>, <see cref="P:Terminal.Gui.Key.Backspace"/></term>
                            <description>Deletes the character before cursor.</description>
                        </item>
                    </list>
                </remarks>
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextField.OnTextChanging(System.String)">
            <summary>Virtual method that invoke the <see cref="E:Terminal.Gui.TextField.TextChanging"/> event if it's defined.</summary>
            <param name="newText">The new text to be replaced.</param>
            <returns>Returns the <see cref="T:Terminal.Gui.StringEventArgs"/></returns>
        </member>
        <member name="M:Terminal.Gui.TextField.Paste">
            <summary>Paste the selected text from the clipboard.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.PositionCursor">
            <summary>Sets the cursor position.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Redo">
            <summary>Redoes the latest changes.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.SelectAll">
            <summary>Selects all text.</summary>
        </member>
        <member name="E:Terminal.Gui.TextField.TextChanging">
            <summary>Changing event, raised before the <see cref="P:Terminal.Gui.TextField.Text"/> changes and can be canceled or changing the new text.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Undo">
            <summary>Undoes the latest changes.</summary>
        </member>
        <member name="M:Terminal.Gui.TextField.CursorIsAtEnd">
            <summary>
                Returns <see langword="true"/> if the current cursor position is at the end of the <see cref="P:Terminal.Gui.TextField.Text"/>. This
                includes when it is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextField.CursorIsAtStart">
            <summary>Returns <see langword="true"/> if the current cursor position is at the start of the <see cref="T:Terminal.Gui.TextField"/>.</summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TextFieldAutocomplete">
            <summary>
                Renders an overlay on another view at a given point that allows selecting from a range of 'autocomplete'
                options. An implementation on a TextField.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextFieldAutocomplete.DeleteTextBackwards">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextFieldAutocomplete.InsertText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextFieldAutocomplete.SetCursorPosition(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.TextValidateProviders.ITextValidateProvider">
            <summary>TextValidateField Providers Interface. All TextValidateField are created with a ITextValidateProvider.</summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.ITextValidateProvider.DisplayText">
            <summary>Gets the formatted string for display.</summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.ITextValidateProvider.Fixed">
            <summary>Set that this provider uses a fixed width. e.g. Masked ones are fixed.</summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.ITextValidateProvider.IsValid">
            <summary>True if the input is valid, otherwise false.</summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.ITextValidateProvider.Text">
            <summary>Set the input text and get the current value.</summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.Cursor(System.Int32)">
            <summary>Set Cursor position to <paramref name="pos"/>.</summary>
            <param name="pos"></param>
            <returns>Return first valid position.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.CursorEnd">
            <summary>Find the last valid character position.</summary>
            <returns>New cursor position.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.CursorLeft(System.Int32)">
            <summary>First valid position before <paramref name="pos"/>.</summary>
            <param name="pos"></param>
            <returns>New cursor position if any, otherwise returns <paramref name="pos"/></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.CursorRight(System.Int32)">
            <summary>First valid position after <paramref name="pos"/>.</summary>
            <param name="pos">Current position.</param>
            <returns>New cursor position if any, otherwise returns <paramref name="pos"/></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.CursorStart">
            <summary>Find the first valid character position.</summary>
            <returns>New cursor position.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.Delete(System.Int32)">
            <summary>Deletes the current character in <paramref name="pos"/>.</summary>
            <param name="pos"></param>
            <returns>true if the character was successfully removed, otherwise false.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.InsertAt(System.Char,System.Int32)">
            <summary>Insert character <paramref name="ch"/> in position <paramref name="pos"/>.</summary>
            <param name="ch"></param>
            <param name="pos"></param>
            <returns>true if the character was successfully inserted, otherwise false.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.OnTextChanged(Terminal.Gui.StringEventArgs)">
            <summary>Method that invoke the <see cref="E:Terminal.Gui.TextValidateProviders.ITextValidateProvider.TextChanged"/> event if it's defined.</summary>
            <param name="oldValue">The previous text before replaced.</param>
            <returns>Returns the <see cref="T:Terminal.Gui.StringEventArgs"/></returns>
        </member>
        <member name="E:Terminal.Gui.TextValidateProviders.ITextValidateProvider.TextChanged">
            <summary>
                Changed event, raised when the text has changed.
                <remarks>
                    This event is raised when the <see cref="P:Terminal.Gui.TextValidateProviders.ITextValidateProvider.Text"/> changes. The passed <see cref="T:System.EventArgs"/> is a
                    <see cref="T:System.String"/> containing the old value.
                </remarks>
            </summary>
        </member>
        <member name="T:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider">
            <summary>
                .Net MaskedTextProvider Provider for TextValidateField.
                <para></para>
                <para>
                    <a
                        href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.maskedtextprovider?view=net-5.0">
                        Wrapper around MaskedTextProvider
                    </a>
                </para>
                <para>
                    <a
                        href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.maskedtextbox.mask?view=net-5.0">
                        Masking elements
                    </a>
                </para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.#ctor(System.String)">
            <summary>Empty Constructor</summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Mask">
            <summary>Mask property</summary>
        </member>
        <member name="E:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.TextChanged">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Text">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.IsValid">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Fixed">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.DisplayText">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Cursor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.CursorStart">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.CursorEnd">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.CursorLeft(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.CursorRight(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Delete(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.InsertAt(System.Char,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.OnTextChanged(Terminal.Gui.StringEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.TextValidateProviders.TextRegexProvider">
            <summary>Regex Provider for TextValidateField.</summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.#ctor(System.String)">
            <summary>Empty Constructor.</summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.Pattern">
            <summary>Regex pattern property.</summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.ValidateOnInput">
            <summary>When true, validates with the regex pattern on each input, preventing the input if it's not valid.</summary>
        </member>
        <member name="E:Terminal.Gui.TextValidateProviders.TextRegexProvider.TextChanged">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.Text">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.DisplayText">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.IsValid">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.Fixed">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.Cursor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CursorStart">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CursorEnd">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CursorLeft(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CursorRight(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.Delete(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.InsertAt(System.Char,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.OnTextChanged(Terminal.Gui.StringEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CompileMask">
            <summary>Compiles the regex pattern for validation./></summary>
        </member>
        <member name="T:Terminal.Gui.TextValidateField">
            <summary>Text field that validates input through a  <see cref="T:Terminal.Gui.TextValidateProviders.ITextValidateProvider"/></summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.TextValidateField"/> class using
                <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateField.IsValid">
            <summary>This property returns true if the input is valid.</summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateField.Provider">
            <summary>Provider</summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateField.Text">
            <summary>Text</summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.OnProcessKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.BackspaceKeyHandler">
            <summary>Delete char at cursor position - 1, moving the cursor.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.CursorLeft">
            <summary>Try to move the cursor to the left.</summary>
            <returns>True if moved.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.CursorRight">
            <summary>Try to move the cursor to the right.</summary>
            <returns>True if moved.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.DeleteKeyHandler">
            <summary>Deletes char at current position.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.EndKeyHandler">
            <summary>Moves the cursor to the last char.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.GetMargins(System.Int32)">
            <summary>Margins for text alignment.</summary>
            <param name="width">Total width</param>
            <returns>Left and right margins</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.HomeKeyHandler">
            <summary>Moves the cursor to first char.</summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.RuneCell">
            <summary>
                Represents a single row/column within the <see cref="T:Terminal.Gui.TextView"/>. Includes the glyph and the
                foreground/background colors.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RuneCell.ColorScheme">
            <summary>The <see cref="T:Terminal.Gui.ColorScheme"/> color sets to draw the glyph with.</summary>
        </member>
        <member name="P:Terminal.Gui.RuneCell.Rune">
            <summary>The glyph to draw.</summary>
        </member>
        <member name="M:Terminal.Gui.RuneCell.Equals(Terminal.Gui.RuneCell)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                <see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter; otherwise,
                <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Terminal.Gui.RuneCell.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Terminal.Gui.TextModel.Count">
            <summary>The number of text lines in the model</summary>
        </member>
        <member name="M:Terminal.Gui.TextModel.AddLine(System.Int32,System.Collections.Generic.List{Terminal.Gui.RuneCell})">
            <summary>Adds a line to the model at the specified position.</summary>
            <param name="pos">Line number where the line will be inserted.</param>
            <param name="cells">The line of text and color, as a List of RuneCell.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.GetLine(System.Int32)">
            <summary>Returns the specified line as a List of Rune</summary>
            <returns>The line.</returns>
            <param name="line">Line number to retrieve.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.GetMaxVisibleLine(System.Int32,System.Int32,System.Int32)">
            <summary>Returns the maximum line length of the visible lines.</summary>
            <param name="first">The first line.</param>
            <param name="last">The last line.</param>
            <param name="tabWidth">The tab width.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.RemoveLine(System.Int32)">
            <summary>Removes the line at the specified position</summary>
            <param name="pos">Position.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.ToRuneCellList(System.String,Terminal.Gui.ColorScheme)">
            <summary>Converts the string into a <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <param name="str">The string to convert.</param>
            <param name="colorScheme">The <see cref="T:Terminal.Gui.ColorScheme"/> to use.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextModel.ToString(System.Collections.Generic.IEnumerable{Terminal.Gui.RuneCell})">
            <summary>Converts a <see cref="T:Terminal.Gui.RuneCell"/> generic collection into a string.</summary>
            <param name="cells">The enumerable cell to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextModel.ResetContinuousFind(System.Drawing.Point)">
            <summary>Redefine column and line tracking.</summary>
            <param name="point">Contains the column and line.</param>
        </member>
        <member name="T:Terminal.Gui.TextView">
            <summary>Multi-line text editing <see cref="T:Terminal.Gui.View"/>.</summary>
            <remarks>
                <para>
                    <see cref="T:Terminal.Gui.TextView"/> provides a multi-line text editor. Users interact with it with the standard Windows,
                    Mac, and Linux (Emacs) commands.
                </para>
                <list type="table">
                    <listheader>
                        <term>Shortcut</term> <description>Action performed</description>
                    </listheader>
                    <item>
                        <term>Left cursor, Control-b</term> <description>Moves the editing point left.</description>
                    </item>
                    <item>
                        <term>Right cursor, Control-f</term> <description>Moves the editing point right.</description>
                    </item>
                    <item>
                        <term>Alt-b</term> <description>Moves one word back.</description>
                    </item>
                    <item>
                        <term>Alt-f</term> <description>Moves one word forward.</description>
                    </item>
                    <item>
                        <term>Up cursor, Control-p</term> <description>Moves the editing point one line up.</description>
                    </item>
                    <item>
                        <term>Down cursor, Control-n</term> <description>Moves the editing point one line down</description>
                    </item>
                    <item>
                        <term>Home key, Control-a</term> <description>Moves the cursor to the beginning of the line.</description>
                    </item>
                    <item>
                        <term>End key, Control-e</term> <description>Moves the cursor to the end of the line.</description>
                    </item>
                    <item>
                        <term>Control-Home</term> <description>Scrolls to the first line and moves the cursor there.</description>
                    </item>
                    <item>
                        <term>Control-End</term> <description>Scrolls to the last line and moves the cursor there.</description>
                    </item>
                    <item>
                        <term>Delete, Control-d</term> <description>Deletes the character in front of the cursor.</description>
                    </item>
                    <item>
                        <term>Backspace</term> <description>Deletes the character behind the cursor.</description>
                    </item>
                    <item>
                        <term>Control-k</term>
                        <description>
                            Deletes the text until the end of the line and replaces the kill buffer with the deleted text.
                            You can paste this text in a different place by using Control-y.
                        </description>
                    </item>
                    <item>
                        <term>Control-y</term>
                        <description>Pastes the content of the kill ring into the current position.</description>
                    </item>
                    <item>
                        <term>Alt-d</term>
                        <description>
                            Deletes the word above the cursor and adds it to the kill ring. You can paste the contents of
                            the kill ring with Control-y.
                        </description>
                    </item>
                    <item>
                        <term>Control-q</term>
                        <description>
                            Quotes the next input character, to prevent the normal processing of key handling to take
                            place.
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextView.#ctor">
            <summary>
                Initializes a <see cref="T:Terminal.Gui.TextView"/> on the specified area, with dimensions controlled with the X, Y, Width
                and Height properties.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.AllowsReturn">
            <summary>
                Gets or sets a value indicating whether pressing ENTER in a <see cref="T:Terminal.Gui.TextView"/> creates a new line of text
                in the view or activates the default button for the Toplevel.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.AllowsTab">
            <summary>
                Gets or sets whether the <see cref="T:Terminal.Gui.TextView"/> inserts a tab character into the text or ignores tab input. If
                set to `false` and the user presses the tab key (or shift-tab) the focus will move to the next view (or previous
                with shift-tab). The default is `true`; if the user presses the tab key, a tab character will be inserted into the
                text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Autocomplete">
            <summary>
                Provides autocomplete context menu based on suggestions at the current cursor position. Configure
                <see cref="P:Terminal.Gui.IAutocomplete.SuggestionGenerator"/> to enable this feature
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.BottomOffset">
            <summary>
                The bottom offset needed to use a horizontal scrollbar or for another reason. This is only needed with the
                keyboard navigation.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.ContextMenu">
            <summary>Get the <see cref="P:Terminal.Gui.TextView.ContextMenu"/> for this view.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.CurrentColumn">
            <summary>Gets the cursor column.</summary>
            <value>The cursor column.</value>
        </member>
        <member name="P:Terminal.Gui.TextView.CurrentRow">
            <summary>Gets the current cursor row.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.CursorPosition">
            <summary>Sets or gets the current cursor position.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.HasHistoryChanges">
            <summary>
                Indicates whatever the text has history changes or not. <see langword="true"/> if the text has history changes
                <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.InheritsPreviousColorScheme">
            <summary>
                If <see langword="true"/> and the current <see cref="P:Terminal.Gui.RuneCell.ColorScheme"/> is null will inherit from the
                previous, otherwise if <see langword="false"/> (default) do nothing. If the text is load with
                <see cref="M:Terminal.Gui.TextView.Load(System.Collections.Generic.List{Terminal.Gui.RuneCell})"/> this property is automatically sets to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.IsDirty">
            <summary>
                Indicates whatever the text was changed or not. <see langword="true"/> if the text was changed
                <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.LeftColumn">
            <summary>Gets or sets the left column.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Lines">
            <summary>Gets the number of lines.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Maxlength">
            <summary>Gets the maximum visible length line.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Multiline">
            <summary>Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.TextView"/> is a multiline text view.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.ReadOnly">
            <summary>Gets or sets whether the <see cref="T:Terminal.Gui.TextView"/> is in read-only mode or not</summary>
            <value>Boolean value(Default false)</value>
        </member>
        <member name="P:Terminal.Gui.TextView.RightOffset">
            <summary>
                The right offset needed to use a vertical scrollbar or for another reason. This is only needed with the
                keyboard navigation.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.SelectedLength">
            <summary>Length of the selected text.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.SelectedText">
            <summary>The selected text.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Selecting">
            <summary>Get or sets whether the user is currently selecting text.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.SelectionStartColumn">
            <summary>Start column position of the selected text.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.SelectionStartRow">
            <summary>Start row position of the selected text.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.TabWidth">
            <summary>Gets or sets a value indicating the number of whitespace when pressing the TAB key.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Text">
            <summary>Sets or gets the text in the <see cref="T:Terminal.Gui.TextView"/>.</summary>
            <remarks>
                The <see cref="E:Terminal.Gui.View.TextChanged"/> event is fired whenever this property is set. Note, however, that Text is not
                set by <see cref="T:Terminal.Gui.TextView"/> as the user types.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextView.TopRow">
            <summary>Gets or sets the top row.</summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Used">
            <summary>
                Tracks whether the text view should be considered "used", that is, that the user has moved in the entry, so
                new input should be appended at the cursor position, rather than clearing the entry
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.WordWrap">
            <summary>Allows word wrap the to fit the available container width.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.ClearHistoryChanges">
            <summary>Allows clearing the <see cref="T:Terminal.Gui.HistoryText.HistoryTextItem"/> items updating the original text.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.CloseFile">
            <summary>Closes the contents of the stream into the <see cref="T:Terminal.Gui.TextView"/>.</summary>
            <returns><c>true</c>, if stream was closed, <c>false</c> otherwise.</returns>
        </member>
        <member name="E:Terminal.Gui.TextView.ContentsChanged">
            <summary>Raised when the contents of the <see cref="T:Terminal.Gui.TextView"/> are changed.</summary>
            <remarks>
                Unlike the <see cref="E:Terminal.Gui.View.TextChanged"/> event, this event is raised whenever the user types or otherwise changes
                the contents of the <see cref="T:Terminal.Gui.TextView"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextView.Copy">
            <summary>Copy the selected text to the clipboard contents.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.Cut">
            <summary>Cut the selected text to the clipboard contents.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.DeleteAll">
            <summary>Deletes all text.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.DeleteCharLeft">
            <summary>Deletes all the selected or a single character at left from the position of the cursor.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.DeleteCharRight">
            <summary>Deletes all the selected or a single character at right from the position of the cursor.</summary>
        </member>
        <member name="E:Terminal.Gui.TextView.DrawNormalColor">
            <summary>Invoked when the normal color is drawn.</summary>
        </member>
        <member name="E:Terminal.Gui.TextView.DrawReadOnlyColor">
            <summary>Invoked when the ready only color is drawn.</summary>
        </member>
        <member name="E:Terminal.Gui.TextView.DrawSelectionColor">
            <summary>Invoked when the selection color is drawn.</summary>
        </member>
        <member name="E:Terminal.Gui.TextView.DrawUsedColor">
            <summary>
                Invoked when the used color is drawn. The Used Color is used to indicate if the <see cref="P:Terminal.Gui.Key.InsertChar"/>
                was pressed and enabled.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.FindNextText(System.String,System.Boolean@,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>Find the next text based on the match case with the option to replace it.</summary>
            <param name="textToFind">The text to find.</param>
            <param name="gaveFullTurn"><c>true</c>If all the text was forward searched.<c>false</c>otherwise.</param>
            <param name="matchCase">The match case setting.</param>
            <param name="matchWholeWord">The match whole word setting.</param>
            <param name="textToReplace">The text to replace.</param>
            <param name="replace"><c>true</c>If is replacing.<c>false</c>otherwise.</param>
            <returns><c>true</c>If the text was found.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.TextView.FindPreviousText(System.String,System.Boolean@,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>Find the previous text based on the match case with the option to replace it.</summary>
            <param name="textToFind">The text to find.</param>
            <param name="gaveFullTurn"><c>true</c>If all the text was backward searched.<c>false</c>otherwise.</param>
            <param name="matchCase">The match case setting.</param>
            <param name="matchWholeWord">The match whole word setting.</param>
            <param name="textToReplace">The text to replace.</param>
            <param name="replace"><c>true</c>If the text was found.<c>false</c>otherwise.</param>
            <returns><c>true</c>If the text was found.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.TextView.FindTextChanged">
            <summary>Reset the flag to stop continuous find.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.GetAllLines">
            <summary>Gets all lines of characters.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextView.GetCurrentLine">
            <summary>
                Returns the characters on the current line (where the cursor is positioned). Use <see cref="P:Terminal.Gui.TextView.CurrentColumn"/>
                to determine the position of the cursor within that line
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextView.GetLine(System.Int32)">
            <summary>Returns the characters on the <paramref name="line"/>.</summary>
            <param name="line">The intended line.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextView.GetNormalColor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.InsertText(System.String)">
            <summary>
                Inserts the given <paramref name="toAdd"/> text at the current cursor position exactly as if the user had just
                typed it
            </summary>
            <param name="toAdd">Text to add</param>
        </member>
        <member name="M:Terminal.Gui.TextView.Load(System.String)">
            <summary>Loads the contents of the file into the <see cref="T:Terminal.Gui.TextView"/>.</summary>
            <returns><c>true</c>, if file was loaded, <c>false</c> otherwise.</returns>
            <param name="path">Path to the file to load.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.Load(System.IO.Stream)">
            <summary>Loads the contents of the stream into the <see cref="T:Terminal.Gui.TextView"/>.</summary>
            <returns><c>true</c>, if stream was loaded, <c>false</c> otherwise.</returns>
            <param name="stream">Stream to load the contents from.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.Load(System.Collections.Generic.List{Terminal.Gui.RuneCell})">
            <summary>Loads the contents of the <see cref="T:Terminal.Gui.RuneCell"/> list into the <see cref="T:Terminal.Gui.TextView"/>.</summary>
            <param name="cells">Rune cells list to load the contents from.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.Load(System.Collections.Generic.List{System.Collections.Generic.List{Terminal.Gui.RuneCell}})">
            <summary>Loads the contents of the list of <see cref="T:Terminal.Gui.RuneCell"/> list into the <see cref="T:Terminal.Gui.TextView"/>.</summary>
            <param name="cellsList">List of rune cells list to load the contents from.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.MoveEnd">
            <summary>Will scroll the <see cref="T:Terminal.Gui.TextView"/> to the last line and position the cursor there.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.MoveHome">
            <summary>Will scroll the <see cref="T:Terminal.Gui.TextView"/> to the first line and position the cursor there.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.OnContentsChanged">
            <summary>
                Called when the contents of the TextView change. E.g. when the user types text or deletes text. Raises the
                <see cref="E:Terminal.Gui.TextView.ContentsChanged"/> event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.OnInvokingKeyBindings(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.OnKeyUp(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.OnProcessKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.OnUnwrappedCursorPosition(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Invoke the <see cref="E:Terminal.Gui.TextView.UnwrappedCursorPosition"/> event with the unwrapped <see cref="P:Terminal.Gui.TextView.CursorPosition"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.Paste">
            <summary>Paste the clipboard contents into the current selected position.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.PositionCursor">
            <summary>Positions the cursor on the current row and column</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.Redo">
            <summary>Redoes the latest changes.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.ReplaceAllText(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Replaces all the text based on the match case.</summary>
            <param name="textToFind">The text to find.</param>
            <param name="matchCase">The match case setting.</param>
            <param name="matchWholeWord">The match whole word setting.</param>
            <param name="textToReplace">The text to replace.</param>
            <returns><c>true</c>If the text was found.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.TextView.ScrollTo(System.Int32,System.Boolean)">
            <summary>
                Will scroll the <see cref="T:Terminal.Gui.TextView"/> to display the specified row at the top if <paramref name="isRow"/> is
                true or will scroll the <see cref="T:Terminal.Gui.TextView"/> to display the specified column at the left if
                <paramref name="isRow"/> is false.
            </summary>
            <param name="idx">
                Row that should be displayed at the top or Column that should be displayed at the left, if the value
                is negative it will be reset to zero
            </param>
            <param name="isRow">If true (default) the <paramref name="idx"/> is a row, column otherwise.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.SelectAll">
            <summary>Select all text.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.Undo">
            <summary>Undoes the latest changes.</summary>
        </member>
        <member name="E:Terminal.Gui.TextView.UnwrappedCursorPosition">
            <summary>Invoked with the unwrapped <see cref="P:Terminal.Gui.TextView.CursorPosition"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.OnDrawNormalColor(System.Collections.Generic.List{Terminal.Gui.RuneCell},System.Int32,System.Int32)">
            <summary>
                Sets the <see cref="P:Terminal.Gui.View.Driver"/> to an appropriate color for rendering the given <paramref name="idxCol"/>
                of the current <paramref name="line"/>. Override to provide custom coloring by calling
                <see cref="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)"/> Defaults to <see cref="P:Terminal.Gui.ColorScheme.Normal"/>.
            </summary>
            <param name="line">The line.</param>
            <param name="idxCol">The col index.</param>
            <param name="idxRow">The row index.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.OnDrawReadOnlyColor(System.Collections.Generic.List{Terminal.Gui.RuneCell},System.Int32,System.Int32)">
            <summary>
                Sets the <see cref="P:Terminal.Gui.View.Driver"/> to an appropriate color for rendering the given <paramref name="idxCol"/>
                of the current <paramref name="line"/>. Override to provide custom coloring by calling
                <see cref="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)"/> Defaults to <see cref="P:Terminal.Gui.ColorScheme.Focus"/>.
            </summary>
            <param name="line">The line.</param>
            <param name="idxCol">The col index.</param>
            ///
            <param name="idxRow">The row index.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.OnDrawSelectionColor(System.Collections.Generic.List{Terminal.Gui.RuneCell},System.Int32,System.Int32)">
            <summary>
                Sets the <see cref="P:Terminal.Gui.View.Driver"/> to an appropriate color for rendering the given <paramref name="idxCol"/>
                of the current <paramref name="line"/>. Override to provide custom coloring by calling
                <see cref="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)"/> Defaults to <see cref="P:Terminal.Gui.ColorScheme.Focus"/>.
            </summary>
            <param name="line">The line.</param>
            <param name="idxCol">The col index.</param>
            ///
            <param name="idxRow">The row index.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.OnDrawUsedColor(System.Collections.Generic.List{Terminal.Gui.RuneCell},System.Int32,System.Int32)">
            <summary>
                Sets the <see cref="P:Terminal.Gui.View.Driver"/> to an appropriate color for rendering the given <paramref name="idxCol"/>
                of the current <paramref name="line"/>. Override to provide custom coloring by calling
                <see cref="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)"/> Defaults to <see cref="P:Terminal.Gui.ColorScheme.HotFocus"/>.
            </summary>
            <param name="line">The line.</param>
            <param name="idxCol">The col index.</param>
            ///
            <param name="idxRow">The row index.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.SetNormalColor">
            <summary>
                Sets the driver to the default color for the control where no text is being rendered. Defaults to
                <see cref="P:Terminal.Gui.ColorScheme.Normal"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.SetWrapModel(System.String)">
            <summary>Restore from original model.</summary>
        </member>
        <member name="M:Terminal.Gui.TextView.UpdateWrapModel(System.String)">
            <summary>Update the original model.</summary>
        </member>
        <member name="T:Terminal.Gui.TextViewAutocomplete">
            <summary>
                Renders an overlay on another view at a given point that allows selecting from a range of 'autocomplete'
                options. An implementation on a TextView.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextViewAutocomplete.DeleteTextBackwards">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextViewAutocomplete.InsertText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextViewAutocomplete.SetCursorPosition(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.Tile">
            <summary>
                A single <see cref="P:Terminal.Gui.Tile.ContentView"/> presented in a <see cref="T:Terminal.Gui.TileView"/>. To create new instances use
                <see cref="M:Terminal.Gui.TileView.RebuildForTileCount(System.Int32)"/> or <see cref="M:Terminal.Gui.TileView.InsertTile(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Tile.#ctor">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.Tile"/> class.</summary>
        </member>
        <member name="P:Terminal.Gui.Tile.ContentView">
            <summary>
                The <see cref="P:Terminal.Gui.Tile.ContentView"/> that is contained in this <see cref="T:Terminal.Gui.TileView"/>. Add new child views to this
                member for multiple <see cref="P:Terminal.Gui.Tile.ContentView"/>s within the <see cref="T:Terminal.Gui.Tile"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Tile.MinSize">
            <summary>
                Gets or Sets the minimum size you to allow when splitter resizing along parent
                <see cref="P:Terminal.Gui.TileView.Orientation"/> direction.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Tile.Title">
            <summary>
                The text that should be displayed above the <see cref="P:Terminal.Gui.Tile.ContentView"/>. This will appear over the splitter line
                or border (above the view client area).
            </summary>
            <remarks>Title are not rendered for root level tiles <see cref="T:Terminal.Gui.LineStyle"/> is <see cref="F:Terminal.Gui.LineStyle.None"/>.</remarks>
        </member>
        <member name="M:Terminal.Gui.Tile.OnTitleChanged(System.String,System.String)">
            <summary>Called when the <see cref="P:Terminal.Gui.Tile.Title"/> has been changed. Invokes the <see cref="E:Terminal.Gui.Tile.TitleChanged"/> event.</summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.Tile.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.Tile.Title"/> to be replaced.</param>
        </member>
        <member name="M:Terminal.Gui.Tile.OnTitleChanging(System.String,System.String)">
            <summary>
                Called before the <see cref="P:Terminal.Gui.Tile.Title"/> changes. Invokes the <see cref="E:Terminal.Gui.Tile.TitleChanging"/> event, which can be
                cancelled.
            </summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.Tile.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.Tile.Title"/> to be replaced.</param>
            <returns><c>true</c> if an event handler cancelled the Title change.</returns>
        </member>
        <member name="E:Terminal.Gui.Tile.TitleChanged">
            <summary>Event fired after the <see cref="P:Terminal.Gui.Tile.Title"/> has been changed.</summary>
        </member>
        <member name="E:Terminal.Gui.Tile.TitleChanging">
            <summary>
                Event fired when the <see cref="P:Terminal.Gui.Tile.Title"/> is changing.
                <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> can be set to <c>true</c> to cancel the change.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TileView">
            <summary>
                A <see cref="T:Terminal.Gui.View"/> consisting of a moveable bar that divides the display area into resizeable
                <see cref="P:Terminal.Gui.TileView.Tiles"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TileView.#ctor">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.TileView"/> class with 2 tiles (i.e. left and right).</summary>
        </member>
        <member name="M:Terminal.Gui.TileView.#ctor(System.Int32)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.TileView"/> class with <paramref name="tiles"/> number of tiles.</summary>
            <param name="tiles"></param>
        </member>
        <member name="P:Terminal.Gui.TileView.LineStyle">
            <summary>The line style to use when drawing the splitter lines.</summary>
        </member>
        <member name="P:Terminal.Gui.TileView.Orientation">
            <summary>Orientation of the dividing line (Horizontal or Vertical).</summary>
        </member>
        <member name="P:Terminal.Gui.TileView.SplitterDistances">
            <summary>The splitter locations. Note that there will be N-1 splitters where N is the number of <see cref="P:Terminal.Gui.TileView.Tiles"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.TileView.Tiles">
            <summary>The sub sections hosted by the view</summary>
        </member>
        <member name="P:Terminal.Gui.TileView.ToggleResizable">
            <summary>
                The keyboard key that the user can press to toggle resizing of splitter lines.  Mouse drag splitting is always
                enabled.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TileView.GetParentTileView">
            <summary>
                Returns the immediate parent <see cref="T:Terminal.Gui.TileView"/> of this. Note that in case of deep nesting this might not
                be the root <see cref="T:Terminal.Gui.TileView"/>. Returns null if this instance is not a nested child (created with
                <see cref="M:Terminal.Gui.TileView.TrySplitTile(System.Int32,System.Int32,Terminal.Gui.TileView@)"/>)
            </summary>
            <remarks>Use <see cref="M:Terminal.Gui.TileView.IsRootTileView"/> to determine if the returned value is the root.</remarks>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TileView.IndexOf(Terminal.Gui.View,System.Boolean)">
            <summary>
                Returns the index of the first <see cref="T:Terminal.Gui.Tile"/> in <see cref="P:Terminal.Gui.TileView.Tiles"/> which contains
                <paramref name="toFind"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TileView.InsertTile(System.Int32)">
            <summary>
                Adds a new <see cref="T:Terminal.Gui.Tile"/> to the collection at <paramref name="idx"/>. This will also add another splitter
                line
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:Terminal.Gui.TileView.IsRootTileView">
            <summary>
                <para>
                    <see langword="true"/> if <see cref="T:Terminal.Gui.TileView"/> is nested within a parent <see cref="T:Terminal.Gui.TileView"/> e.g. via
                    the <see cref="M:Terminal.Gui.TileView.TrySplitTile(System.Int32,System.Int32,Terminal.Gui.TileView@)"/>. <see langword="false"/> if it is a root level <see cref="T:Terminal.Gui.TileView"/>.
                </para>
            </summary>
            <remarks>
                Note that manually adding one <see cref="T:Terminal.Gui.TileView"/> to another will not result in a parent/child relationship
                and both will still be considered 'root' containers. Always use <see cref="M:Terminal.Gui.TileView.TrySplitTile(System.Int32,System.Int32,Terminal.Gui.TileView@)"/>
                if you want to subdivide a <see cref="T:Terminal.Gui.TileView"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TileView.LayoutSubviews">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TileView.OnDrawAdornments">
            <summary>Overridden so no Frames get drawn</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TileView.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TileView.OnProcessKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TileView.RebuildForTileCount(System.Int32)">
            <summary>
                Scraps all <see cref="P:Terminal.Gui.TileView.Tiles"/> and creates <paramref name="count"/> new tiles in orientation
                <see cref="P:Terminal.Gui.TileView.Orientation"/>
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Terminal.Gui.TileView.RemoveTile(System.Int32)">
            <summary>
                Removes a <see cref="P:Terminal.Gui.TileView.Tiles"/> at the provided <paramref name="idx"/> from the view. Returns the removed tile
                or null if already empty.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TileView.SetSplitterPos(System.Int32,Terminal.Gui.Pos)">
            <summary>
                <para>
                    Attempts to update the <see cref="P:Terminal.Gui.TileView.SplitterDistances"/> of line at <paramref name="idx"/> to the new
                    <paramref name="value"/>. Returns false if the new position is not allowed because of
                    <see cref="P:Terminal.Gui.Tile.MinSize"/>, location of other splitters etc.
                </para>
                <para>
                    Only absolute values (e.g. 10) and percent values (i.e. <see cref="M:Terminal.Gui.Pos.Percent(System.Single)"/>) are supported for
                    this property.
                </para>
            </summary>
        </member>
        <member name="E:Terminal.Gui.TileView.SplitterMoved">
            <summary>Invoked when any of the <see cref="P:Terminal.Gui.TileView.SplitterDistances"/> is changed.</summary>
        </member>
        <member name="M:Terminal.Gui.TileView.TrySplitTile(System.Int32,System.Int32,Terminal.Gui.TileView@)">
            <summary>
                Converts of <see cref="P:Terminal.Gui.TileView.Tiles"/> element <paramref name="idx"/> from a regular <see cref="T:Terminal.Gui.View"/> to a new
                nested <see cref="T:Terminal.Gui.TileView"/> the specified <paramref name="numberOfPanels"/>. Returns false if the element already
                contains a nested view.
            </summary>
            <remarks>
                After successful splitting, the old contents will be moved to the <paramref name="result"/>
                <see cref="T:Terminal.Gui.TileView"/> 's first tile.
            </remarks>
            <param name="idx">The element of <see cref="P:Terminal.Gui.TileView.Tiles"/> that is to be subdivided.</param>
            <param name="numberOfPanels">The number of panels that the <see cref="T:Terminal.Gui.Tile"/> should be split into</param>
            <param name="result">The new nested <see cref="T:Terminal.Gui.TileView"/>.</param>
            <returns>
                <see langword="true"/> if a <see cref="T:Terminal.Gui.View"/> was converted to a new nested <see cref="T:Terminal.Gui.TileView"/>.
                <see langword="false"/> if it was already a nested <see cref="T:Terminal.Gui.TileView"/>
            </returns>
        </member>
        <member name="M:Terminal.Gui.TileView.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TileView.OnSplitterMoved(System.Int32)">
            <summary>Raises the <see cref="E:Terminal.Gui.TileView.SplitterMoved"/> event</summary>
        </member>
        <member name="M:Terminal.Gui.TileView.TileTitleToRender.GetLocalCoordinateForTitle(Terminal.Gui.TileView)">
            <summary>
                Translates the <see cref="P:Terminal.Gui.TileView.TileTitleToRender.Tile"/> title location from its local coordinate space
                <paramref name="intoCoordinateSpace"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TileView.TileViewLineView.ConvertToPosFactor(Terminal.Gui.Pos,System.Int32)">
            <summary>
                <para>
                    Determines the absolute position of <paramref name="p"/> and returns a <see cref="T:Terminal.Gui.Pos.PosFactor"/> that
                    describes the percentage of that.
                </para>
                <para>
                    Effectively turning any <see cref="T:Terminal.Gui.Pos"/> into a <see cref="T:Terminal.Gui.Pos.PosFactor"/> (as if created with
                    <see cref="M:Terminal.Gui.Pos.Percent(System.Single)"/>)
                </para>
            </summary>
            <param name="p">The <see cref="T:Terminal.Gui.Pos"/> to convert to <see cref="M:Terminal.Gui.Pos.Percent(System.Single)"/></param>
            <param name="parentLength">The Height/Width that <paramref name="p"/> lies within</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TileView.TileViewLineView.FinalisePosition(Terminal.Gui.Pos,Terminal.Gui.Pos)">
            <summary>
                <para>
                    Moves <see cref="P:Terminal.Gui.TileView.TileViewLineView.Parent"/> <see cref="P:Terminal.Gui.TileView.SplitterDistances"/> to <see cref="T:Terminal.Gui.Pos"/>
                    <paramref name="newValue"/> preserving <see cref="T:Terminal.Gui.Pos"/> format (absolute / relative) that
                    <paramref name="oldValue"/> had.
                </para>
                <remarks>
                    This ensures that if splitter location was e.g. 50% before and you move it to absolute 5 then you end up
                    with 10% (assuming a parent had 50 width).
                </remarks>
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="T:Terminal.Gui.SplitterEventHandler">
            <summary>Represents a method that will handle splitter events.</summary>
        </member>
        <member name="T:Terminal.Gui.TimeField">
            <summary>Time editing <see cref="T:Terminal.Gui.View"/></summary>
            <remarks>The <see cref="T:Terminal.Gui.TimeField"/> <see cref="T:Terminal.Gui.View"/> provides time editing functionality with mouse support.</remarks>
        </member>
        <member name="M:Terminal.Gui.TimeField.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.TimeField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.</summary>
        </member>
        <member name="P:Terminal.Gui.TimeField.CursorPosition">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TimeField.IsShortFormat">
            <summary>Get or sets whether <see cref="T:Terminal.Gui.TimeField"/> uses the short or long time format.</summary>
        </member>
        <member name="P:Terminal.Gui.TimeField.Time">
            <summary>Gets or sets the time of the <see cref="T:Terminal.Gui.TimeField"/>.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Terminal.Gui.TimeField.DeleteCharLeft(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.DeleteCharRight">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.OnProcessKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.OnTimeChanged(Terminal.Gui.DateTimeEventArgs{System.TimeSpan})">
            <summary>Event firing method that invokes the <see cref="E:Terminal.Gui.TimeField.TimeChanged"/> event.</summary>
            <param name="args">The event arguments</param>
        </member>
        <member name="E:Terminal.Gui.TimeField.TimeChanged">
            <summary>TimeChanged event, raised when the Date has changed.</summary>
            <remarks>This event is raised when the <see cref="P:Terminal.Gui.TimeField.Time"/> changes.</remarks>
            <remarks>
                The passed <see cref="T:System.EventArgs"/> is a <see cref="T:Terminal.Gui.DateTimeEventArgs`1"/> containing the old value, new
                value, and format string.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.Toplevel">
            <summary>
                Toplevel views are used for both an application's main view (filling the entire screen and for modal (pop-up)
                views such as <see cref="T:Terminal.Gui.Dialog"/>, <see cref="T:Terminal.Gui.MessageBox"/>, and <see cref="T:Terminal.Gui.Wizard"/>).
            </summary>
            <remarks>
                <para>
                    Toplevels can run as modal (popup) views, started by calling
                    <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/>. They return control to the caller when
                    <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> has been called (which sets the <see cref="P:Terminal.Gui.Toplevel.Running"/>
                    property to <c>false</c>).
                </para>
                <para>
                    A Toplevel is created when an application initializes Terminal.Gui by calling <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,System.String)"/>.
                    The application Toplevel can be accessed via <see cref="P:Terminal.Gui.Application.Top"/>. Additional Toplevels can be created
                    and run (e.g. <see cref="T:Terminal.Gui.Dialog"/>s. To run a Toplevel, create the <see cref="T:Terminal.Gui.Toplevel"/> and call
                    <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/>.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Toplevel.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Toplevel"/> class with <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout,
                defaulting to full screen. The <see cref="P:Terminal.Gui.View.Width"/> and <see cref="P:Terminal.Gui.View.Height"/> properties will be set to the
                dimensions of the terminal using <see cref="M:Terminal.Gui.Dim.Fill(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.IsLoaded">
            <summary>
                <see langword="true"/> if was already loaded by the <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/>
                <see langword="false"/>, otherwise.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.MenuBar">
            <summary>Gets or sets the menu for this Toplevel.</summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.Modal">
            <summary>
                Determines whether the <see cref="T:Terminal.Gui.Toplevel"/> is modal or not. If set to <c>false</c> (the default):
                <list type="bullet">
                    <item>
                        <description><see cref="M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.Key)"/> events will propagate keys upwards.</description>
                    </item>
                    <item>
                        <description>The Toplevel will act as an embedded view (not a modal/pop-up).</description>
                    </item>
                </list>
                If set to <c>true</c>:
                <list type="bullet">
                    <item>
                        <description><see cref="M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.Key)"/> events will NOT propagate keys upwards.</description>
                    </item>
                    <item>
                        <description>The Toplevel will and look like a modal (pop-up) (e.g. see <see cref="T:Terminal.Gui.Dialog"/>.</description>
                    </item>
                </list>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.Running">
            <summary>Gets or sets whether the main loop for this <see cref="T:Terminal.Gui.Toplevel"/> is running or not.</summary>
            <remarks>Setting this property directly is discouraged. Use <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> instead.</remarks>
        </member>
        <member name="P:Terminal.Gui.Toplevel.StatusBar">
            <summary>Gets or sets the status bar for this Toplevel.</summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Activate">
            <summary>Invoked when the Toplevel <see cref="T:Terminal.Gui.RunState"/> becomes the <see cref="P:Terminal.Gui.Application.Current"/> Toplevel.</summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Add(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.Toplevel.AllChildClosed">
            <summary>
                Invoked when the last child of the Toplevel <see cref="T:Terminal.Gui.RunState"/> is closed from by
                <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.AlternateBackwardKeyChanged">
            <summary>Invoked when the <see cref="P:Terminal.Gui.Application.AlternateBackwardKey"/> is changed.</summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.AlternateForwardKeyChanged">
            <summary>Invoked when the <see cref="P:Terminal.Gui.Application.AlternateForwardKey"/> is changed.</summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.ChildClosed">
            <summary>
                Invoked when a child of the Toplevel <see cref="T:Terminal.Gui.RunState"/> is closed by
                <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.ChildLoaded">
            <summary>Invoked when a child Toplevel's <see cref="T:Terminal.Gui.RunState"/> has been loaded.</summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.ChildUnloaded">
            <summary>Invoked when a cjhild Toplevel's <see cref="T:Terminal.Gui.RunState"/> has been unloaded.</summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Closed">
            <summary>Invoked when the Toplevel's <see cref="T:Terminal.Gui.RunState"/> is closed by <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/>.</summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Closing">
            <summary>
                Invoked when the Toplevel's <see cref="T:Terminal.Gui.RunState"/> is being closed by
                <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Deactivate">
            <summary>Invoked when the Toplevel<see cref="T:Terminal.Gui.RunState"/> ceases to be the <see cref="P:Terminal.Gui.Application.Current"/> Toplevel.</summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Loaded">
            <summary>
                Invoked when the <see cref="T:Terminal.Gui.Toplevel"/> <see cref="T:Terminal.Gui.RunState"/> has begun to be loaded. A Loaded event handler
                is a good place to finalize initialization before calling <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.RunState)"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnAlternateBackwardKeyChanged(Terminal.Gui.KeyChangedEventArgs)">
            <summary>Virtual method to invoke the <see cref="E:Terminal.Gui.Toplevel.AlternateBackwardKeyChanged"/> event.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnAlternateForwardKeyChanged(Terminal.Gui.KeyChangedEventArgs)">
            <summary>Virtual method to invoke the <see cref="E:Terminal.Gui.Toplevel.AlternateForwardKeyChanged"/> event.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnLoaded">
            <summary>
                Called from <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> before the <see cref="T:Terminal.Gui.Toplevel"/> redraws for the first
                time.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnQuitKeyChanged(Terminal.Gui.KeyChangedEventArgs)">
            <summary>Virtual method to invoke the <see cref="E:Terminal.Gui.Toplevel.QuitKeyChanged"/> event.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.Toplevel.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.PositionToplevel(Terminal.Gui.Toplevel)">
            <summary>
                Adjusts the location and size of <paramref name="top"/> within this Toplevel. Virtual method enabling
                implementation of specific positions for inherited <see cref="T:Terminal.Gui.Toplevel"/> views.
            </summary>
            <param name="top">The Toplevel to adjust.</param>
        </member>
        <member name="E:Terminal.Gui.Toplevel.QuitKeyChanged">
            <summary>Invoked when the <see cref="P:Terminal.Gui.Application.QuitKey"/> is changed.</summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Ready">
            <summary>
                Invoked when the <see cref="T:Terminal.Gui.Toplevel"/> main loop has started it's first iteration. Subscribe to this event to
                perform tasks when the <see cref="T:Terminal.Gui.Toplevel"/> has been laid out and focus has been set. changes.
                <para>
                    A Ready event handler is a good place to finalize initialization after calling
                    <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/> on this <see cref="T:Terminal.Gui.Toplevel"/>.
                </para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Remove(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.RemoveAll">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.RequestStop">
            <summary>
                Stops and closes this <see cref="T:Terminal.Gui.Toplevel"/>. If this Toplevel is the top-most Toplevel,
                <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> will be called, causing the application to exit.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.RequestStop(Terminal.Gui.Toplevel)">
            <summary>
                Stops and closes the <see cref="T:Terminal.Gui.Toplevel"/> specified by <paramref name="top"/>. If <paramref name="top"/> is
                the top-most Toplevel, <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> will be called, causing the application to
                exit.
            </summary>
            <param name="top">The Toplevel to request stop.</param>
        </member>
        <member name="E:Terminal.Gui.Toplevel.SizeChanging">
            <summary>Invoked when the terminal has been resized. The new <see cref="T:System.Drawing.Size"/> of the terminal is provided.</summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Unloaded">
            <summary>
                Invoked when the Toplevel <see cref="T:Terminal.Gui.RunState"/> has been unloaded. A Unloaded event handler is a good place
                to dispose objects after calling <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnReady">
            <summary>
                Called from <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.RunState)"/> after the <see cref="T:Terminal.Gui.Toplevel"/> has entered the first iteration
                of the loop.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnUnloaded">
            <summary>Called from <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.RunState)"/> before the <see cref="T:Terminal.Gui.Toplevel"/> is disposed.</summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.IsOverlapped">
            <summary>Gets or sets if this Toplevel is in overlapped mode within a Toplevel container.</summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.IsOverlappedContainer">
            <summary>Gets or sets if this Toplevel is a container for overlapped children.</summary>
        </member>
        <member name="T:Terminal.Gui.ToplevelEqualityComparer">
            <summary>
                Implements the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for comparing two <see cref="T:Terminal.Gui.Toplevel"/>s used by
                <see cref="T:Terminal.Gui.StackExtensions"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ToplevelEqualityComparer.Equals(Terminal.Gui.Toplevel,Terminal.Gui.Toplevel)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type <see cref="T:Terminal.Gui.Toplevel"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Terminal.Gui.Toplevel"/> to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.ToplevelEqualityComparer.GetHashCode(Terminal.Gui.Toplevel)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:Terminal.Gui.Toplevel"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">
                The type of <paramref name="obj"/> is a reference type and
                <paramref name="obj"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Terminal.Gui.ToplevelComparer">
            <summary>
                Implements the <see cref="T:System.Collections.Generic.IComparer`1"/> to sort the <see cref="T:Terminal.Gui.Toplevel"/> from the
                <see cref="P:Terminal.Gui.Application.OverlappedChildren"/> if needed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ToplevelComparer.Compare(Terminal.Gui.Toplevel,Terminal.Gui.Toplevel)">
            <summary>
                Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the
                other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
                A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown
                in the following table.Value Meaning Less than zero <paramref name="x"/> is less than <paramref name="y"/>.Zero
                <paramref name="x"/> equals <paramref name="y"/> .Greater than zero <paramref name="x"/> is greater than
                <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:Terminal.Gui.ToplevelEventArgs">
            <summary>Args for events that relate to a specific <see cref="P:Terminal.Gui.ToplevelEventArgs.Toplevel"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.ToplevelEventArgs.#ctor(Terminal.Gui.Toplevel)">
            <summary>Creates a new instance of the <see cref="T:Terminal.Gui.ToplevelClosingEventArgs"/> class.</summary>
            <param name="toplevel"></param>
        </member>
        <member name="P:Terminal.Gui.ToplevelEventArgs.Toplevel">
            <summary>Gets the <see cref="P:Terminal.Gui.ToplevelEventArgs.Toplevel"/> that the event is about.</summary>
            <remarks>
                This is usually but may not always be the same as the sender in <see cref="T:System.EventHandler"/>.  For example if
                the reported event is about a different <see cref="P:Terminal.Gui.ToplevelEventArgs.Toplevel"/> or the event is raised by a separate class.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.ToplevelClosingEventArgs">
            <summary><see cref="T:System.EventArgs"/> implementation for the <see cref="E:Terminal.Gui.Toplevel.Closing"/> event.</summary>
        </member>
        <member name="M:Terminal.Gui.ToplevelClosingEventArgs.#ctor(Terminal.Gui.Toplevel)">
            <summary>Initializes the event arguments with the requesting Toplevel.</summary>
            <param name="requestingTop">The <see cref="P:Terminal.Gui.ToplevelClosingEventArgs.RequestingTop"/>.</param>
        </member>
        <member name="P:Terminal.Gui.ToplevelClosingEventArgs.Cancel">
            <summary>Provides an event cancellation option.</summary>
        </member>
        <member name="P:Terminal.Gui.ToplevelClosingEventArgs.RequestingTop">
            <summary>The Toplevel requesting stop.</summary>
        </member>
        <member name="T:Terminal.Gui.AspectGetterDelegate`1">
            <summary>Delegates of this type are used to fetch string representations of user's model objects</summary>
            <param name="toRender">The object that is being rendered</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Branch`1.#ctor(Terminal.Gui.TreeView{`0},Terminal.Gui.Branch{`0},`0)">
            <summary>
                Declares a new branch of <paramref name="tree"/> in which the users object <paramref name="model"/> is
                presented.
            </summary>
            <param name="tree">The UI control in which the branch resides.</param>
            <param name="parentBranchIfAny">Pass null for root level branches, otherwise pass the parent.</param>
            <param name="model">The user's object that should be displayed.</param>
        </member>
        <member name="P:Terminal.Gui.Branch`1.ChildBranches">
            <summary>
                The children of the current branch.  This is null until the first call to <see cref="M:Terminal.Gui.Branch`1.FetchChildren"/> to avoid
                enumerating the entire underlying hierarchy.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Branch`1.Depth">
            <summary>The depth of the current branch.  Depth of 0 indicates root level branches.</summary>
        </member>
        <member name="P:Terminal.Gui.Branch`1.IsExpanded">
            <summary>True if the branch is expanded to reveal child branches.</summary>
        </member>
        <member name="P:Terminal.Gui.Branch`1.Model">
            <summary>The users object that is being displayed by this branch of the tree.</summary>
        </member>
        <member name="P:Terminal.Gui.Branch`1.Parent">
            <summary>The parent <see cref="T:Terminal.Gui.Branch`1"/> or null if it is a root.</summary>
        </member>
        <member name="M:Terminal.Gui.Branch`1.CanExpand">
            <summary>
                Returns true if the current branch can be expanded according to the <see cref="T:Terminal.Gui.TreeBuilder`1"/> or cached
                children already fetched.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Branch`1.Collapse">
            <summary>Marks the branch as collapsed (<see cref="P:Terminal.Gui.Branch`1.IsExpanded"/> false).</summary>
        </member>
        <member name="M:Terminal.Gui.Branch`1.Draw(Terminal.Gui.ConsoleDriver,Terminal.Gui.ColorScheme,System.Int32,System.Int32)">
            <summary>Renders the current <see cref="P:Terminal.Gui.Branch`1.Model"/> on the specified line <paramref name="y"/>.</summary>
            <param name="driver"></param>
            <param name="colorScheme"></param>
            <param name="y"></param>
            <param name="availableWidth"></param>
        </member>
        <member name="M:Terminal.Gui.Branch`1.Expand">
            <summary>Expands the current branch if possible.</summary>
        </member>
        <member name="M:Terminal.Gui.Branch`1.FetchChildren">
            <summary>Fetch the children of this branch. This method populates <see cref="P:Terminal.Gui.Branch`1.ChildBranches"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.Branch`1.GetExpandableSymbol(Terminal.Gui.ConsoleDriver)">
            <summary>
                Returns an appropriate symbol for displaying next to the string representation of the <see cref="P:Terminal.Gui.Branch`1.Model"/>
                object to indicate whether it <see cref="P:Terminal.Gui.Branch`1.IsExpanded"/> or not (or it is a leaf).
            </summary>
            <param name="driver"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Branch`1.GetWidth(Terminal.Gui.ConsoleDriver)">
            <summary>
                Returns the width of the line including prefix and the results of <see cref="P:Terminal.Gui.TreeView`1.AspectGetter"/> (the
                line body).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Branch`1.Refresh(System.Boolean)">
            <summary>Refreshes cached knowledge in this branch e.g. what children an object has.</summary>
            <param name="startAtTop">True to also refresh all <see cref="P:Terminal.Gui.Branch`1.Parent"/> branches (starting with the root).</param>
        </member>
        <member name="M:Terminal.Gui.Branch`1.CollapseAll">
            <summary>
                Collapses the current branch and all children branches (even though those branches are no longer visible they
                retain collapse/expansion state).
            </summary>
        </member>
        <member name="M:Terminal.Gui.Branch`1.ExpandAll">
            <summary>Expands the current branch and all children branches.</summary>
        </member>
        <member name="M:Terminal.Gui.Branch`1.GetLinePrefix(Terminal.Gui.ConsoleDriver)">
            <summary>
                Gets all characters to render prior to the current branches line.  This includes indentation whitespace and
                any tree branches (if enabled).
            </summary>
            <param name="driver"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Branch`1.IsHitOnExpandableSymbol(Terminal.Gui.ConsoleDriver,System.Int32)">
            <summary>
                Returns true if the given x offset on the branch line is the +/- symbol.  Returns false if not showing
                expansion symbols or leaf node etc.
            </summary>
            <param name="driver"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Branch`1.Rebuild">
            <summary>Calls <see cref="M:Terminal.Gui.Branch`1.Refresh(System.Boolean)"/> on the current branch and all expanded children.</summary>
        </member>
        <member name="M:Terminal.Gui.Branch`1.GetParentBranches">
            <summary>Returns all parents starting with the immediate parent and ending at the root.</summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Branch`1.IsLast">
            <summary>
                Returns true if this branch has parents and it is the last node of it's parents branches (or last root of the
                tree).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.DelegateTreeBuilder`1">
            <summary>Implementation of <see cref="T:Terminal.Gui.ITreeBuilder`1"/> that uses user defined functions</summary>
        </member>
        <member name="M:Terminal.Gui.DelegateTreeBuilder`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Constructs an implementation of <see cref="T:Terminal.Gui.ITreeBuilder`1"/> that calls the user defined method
                <paramref name="childGetter"/> to determine children
            </summary>
            <param name="childGetter"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.DelegateTreeBuilder`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Func{`0,System.Boolean})">
            <summary>
                Constructs an implementation of <see cref="T:Terminal.Gui.ITreeBuilder`1"/> that calls the user defined method
                <paramref name="childGetter"/> to determine children and <paramref name="canExpand"/> to determine expandability
            </summary>
            <param name="childGetter"></param>
            <param name="canExpand"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.DelegateTreeBuilder`1.CanExpand(`0)">
            <summary>Returns whether a node can be expanded based on the delegate passed during construction</summary>
            <param name="toExpand"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.DelegateTreeBuilder`1.GetChildren(`0)">
            <summary>Returns children using the delegate method passed during construction</summary>
            <param name="forObject"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.DrawTreeViewLineEventArgs`1">
            <summary>Event args for the <see cref="E:Terminal.Gui.TreeView`1.DrawLine"/> event</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.Handled">
            <summary>Set to true to cancel drawing (e.g. if you have already manually drawn content).</summary>
        </member>
        <member name="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.IndexOfExpandCollapseSymbol">
            <summary>
                If line contains a branch that can be expanded/collapsed then this is the index in <see cref="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.RuneCells"/> at
                which the symbol is (or null for leaf elements).
            </summary>
        </member>
        <member name="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.IndexOfModelText">
            <summary>
                The notional index in <see cref="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.RuneCells"/> which contains the first character of the
                <see cref="P:Terminal.Gui.TreeView`1.AspectGetter"/> text (i.e. after all branch lines and expansion/collapse sybmols).
            </summary>
            <remarks>May be negative or outside of bounds of <see cref="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.RuneCells"/> if the view has been scrolled horizontally.</remarks>
        </member>
        <member name="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.Model">
            <summary>The object at this line in the tree</summary>
        </member>
        <member name="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.RuneCells">
            <summary>
                The rune and color of each symbol that will be rendered.  Note that only <see cref="P:Terminal.Gui.ColorScheme.Normal"/> is
                respected.  You can modify these to change what is rendered.
            </summary>
            <remarks>Changing the length of this collection may result in corrupt rendering</remarks>
        </member>
        <member name="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.Tree">
            <summary>The <see cref="T:Terminal.Gui.TreeView`1"/> that is performing the rendering.</summary>
        </member>
        <member name="P:Terminal.Gui.DrawTreeViewLineEventArgs`1.Y">
            <summary>The line within tree view bounds that is being rendered</summary>
        </member>
        <member name="T:Terminal.Gui.ITreeBuilder`1">
            <summary>
                Interface for supplying data to a <see cref="T:Terminal.Gui.TreeView`1"/> on demand as root level nodes are expanded by the
                user
            </summary>
        </member>
        <member name="P:Terminal.Gui.ITreeBuilder`1.SupportsCanExpand">
            <summary>Returns true if <see cref="M:Terminal.Gui.ITreeBuilder`1.CanExpand(`0)"/> is implemented by this class</summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.ITreeBuilder`1.CanExpand(`0)">
            <summary>
                Returns true/false for whether a model has children.  This method should be implemented when
                <see cref="M:Terminal.Gui.ITreeBuilder`1.GetChildren(`0)"/> is an expensive operation otherwise <see cref="P:Terminal.Gui.ITreeBuilder`1.SupportsCanExpand"/> should return false
                (in which case this method will not be called)
            </summary>
            <remarks>
                Only implement this method if you have a very fast way of determining whether an object can have children e.g.
                checking a Type (directories can always be expanded)
            </remarks>
            <param name="toExpand"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ITreeBuilder`1.GetChildren(`0)">
            <summary>
                Returns all children of a given <paramref name="forObject"/> which should be added to the tree as new branches
                underneath it
            </summary>
            <param name="forObject"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ObjectActivatedEventArgs`1">
            <summary>Event args for the <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/> event</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Terminal.Gui.ObjectActivatedEventArgs`1.#ctor(Terminal.Gui.TreeView{`0},`0)">
            <summary>Creates a new instance documenting activation of the <paramref name="activated"/> object</summary>
            <param name="tree">Tree in which the activation is happening</param>
            <param name="activated">What object is being activated</param>
        </member>
        <member name="P:Terminal.Gui.ObjectActivatedEventArgs`1.ActivatedObject">
            <summary>The object that was selected at the time of activation</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.ObjectActivatedEventArgs`1.Tree">
            <summary>The tree in which the activation occurred</summary>
            <value></value>
        </member>
        <member name="T:Terminal.Gui.SelectionChangedEventArgs`1">
            <summary>Event arguments describing a change in selected object in a tree view</summary>
        </member>
        <member name="M:Terminal.Gui.SelectionChangedEventArgs`1.#ctor(Terminal.Gui.TreeView{`0},`0,`0)">
            <summary>Creates a new instance of event args describing a change of selection in <paramref name="tree"/></summary>
            <param name="tree"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Terminal.Gui.SelectionChangedEventArgs`1.NewValue">
            <summary>The newly selected value in the <see cref="P:Terminal.Gui.SelectionChangedEventArgs`1.Tree"/> (can be null)</summary>
        </member>
        <member name="P:Terminal.Gui.SelectionChangedEventArgs`1.OldValue">
            <summary>The previously selected value (can be null)</summary>
        </member>
        <member name="P:Terminal.Gui.SelectionChangedEventArgs`1.Tree">
            <summary>The view in which the change occurred</summary>
        </member>
        <member name="T:Terminal.Gui.TreeBuilder`1">
            <summary>Abstract implementation of <see cref="T:Terminal.Gui.ITreeBuilder`1"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeBuilder`1.#ctor(System.Boolean)">
            <summary>Constructs base and initializes <see cref="P:Terminal.Gui.TreeBuilder`1.SupportsCanExpand"/></summary>
            <param name="supportsCanExpand">Pass true if you intend to implement <see cref="M:Terminal.Gui.TreeBuilder`1.CanExpand(`0)"/> otherwise false</param>
        </member>
        <member name="P:Terminal.Gui.TreeBuilder`1.SupportsCanExpand">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeBuilder`1.CanExpand(`0)">
            <summary>
                Override this method to return a rapid answer as to whether <see cref="M:Terminal.Gui.TreeBuilder`1.GetChildren(`0)"/> returns results.  If
                you are implementing this method ensure you passed true in base constructor or set <see cref="P:Terminal.Gui.TreeBuilder`1.SupportsCanExpand"/>
            </summary>
            <param name="toExpand"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeBuilder`1.GetChildren(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ITreeNode">
            <summary>
                Interface to implement when you want the regular (non generic) <see cref="T:Terminal.Gui.TreeView"/> to automatically
                determine children for your class (without having to specify an <see cref="T:Terminal.Gui.ITreeBuilder`1"/>)
            </summary>
        </member>
        <member name="P:Terminal.Gui.ITreeNode.Children">
            <summary>The children of your class which should be rendered underneath it when expanded</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.ITreeNode.Tag">
            <summary>Optionally allows you to store some custom data/class here.</summary>
        </member>
        <member name="P:Terminal.Gui.ITreeNode.Text">
            <summary>Text to display when rendering the node</summary>
        </member>
        <member name="T:Terminal.Gui.TreeNode">
            <summary>Simple class for representing nodes, use with regular (non generic) <see cref="T:Terminal.Gui.TreeView"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeNode.#ctor">
            <summary>Initialises a new instance with no <see cref="P:Terminal.Gui.TreeNode.Text"/></summary>
        </member>
        <member name="M:Terminal.Gui.TreeNode.#ctor(System.String)">
            <summary>Initialises a new instance and sets starting <see cref="P:Terminal.Gui.TreeNode.Text"/></summary>
        </member>
        <member name="P:Terminal.Gui.TreeNode.Children">
            <summary>Children of the current node</summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.TreeNode.Text">
            <summary>Text to display in tree node for current entry</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeNode.Tag">
            <summary>Optionally allows you to store some custom data/class here.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeNode.ToString">
            <summary>returns <see cref="P:Terminal.Gui.TreeNode.Text"/></summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TreeNodeBuilder">
            <summary><see cref="T:Terminal.Gui.ITreeBuilder`1"/> implementation for <see cref="T:Terminal.Gui.ITreeNode"/> objects</summary>
        </member>
        <member name="M:Terminal.Gui.TreeNodeBuilder.#ctor">
            <summary>Initialises a new instance of builder for any model objects of Type <see cref="T:Terminal.Gui.ITreeNode"/></summary>
        </member>
        <member name="M:Terminal.Gui.TreeNodeBuilder.GetChildren(Terminal.Gui.ITreeNode)">
            <summary>Returns <see cref="P:Terminal.Gui.ITreeNode.Children"/> from <paramref name="model"/></summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TreeStyle">
            <summary>Defines rendering options that affect how the tree is displayed.</summary>
        </member>
        <member name="P:Terminal.Gui.TreeStyle.CollapseableSymbol">
            <summary>
                Symbol to use for branch nodes that can be collapsed (are currently expanded). Defaults to '-'. Set to null to
                hide.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeStyle.ColorExpandSymbol">
            <summary>Set to <see langword="true"/> to highlight expand/collapse symbols in hot key color.</summary>
        </member>
        <member name="P:Terminal.Gui.TreeStyle.ExpandableSymbol">
            <summary>
                Symbol to use for branch nodes that can be expanded to indicate this to the user. Defaults to '+'. Set to null
                to hide.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeStyle.HighlightModelTextOnly">
            <summary>
                Set to <see langword="true"/> to cause the selected item to be rendered with only the
                <see cref="P:Terminal.Gui.Branch`1.Model"/> text to be highlighted. If <see langword="false"/> (the default), the entire row will
                be highlighted.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeStyle.InvertExpandSymbolColors">
            <summary>Invert console colours used to render the expand symbol.</summary>
        </member>
        <member name="P:Terminal.Gui.TreeStyle.LeaveLastRow">
            <summary>
                <see langword="true"/> to leave the last row of the control free for overwritting (e.g. by a scrollbar) When
                <see langword="true"/> scrolling will be triggered on the second last row of the control rather than. the last.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeStyle.ShowBranchLines">
            <summary>
                <see langword="true"/> to render vertical lines under expanded nodes to show which node belongs to which
                parent. <see langword="false"/> to use only whitespace.
            </summary>
            <value></value>
        </member>
        <member name="T:Terminal.Gui.ITreeView">
            <summary>
                Interface for all non-generic members of <see cref="T:Terminal.Gui.TreeView`1"/>.
                <a href="../docs/treeview.md">See TreeView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ITreeView.Style">
            <summary>Contains options for changing how the tree is rendered.</summary>
        </member>
        <member name="M:Terminal.Gui.ITreeView.ClearObjects">
            <summary>Removes all objects from the tree and clears selection.</summary>
        </member>
        <member name="M:Terminal.Gui.ITreeView.SetNeedsDisplay">
            <summary>Sets a flag indicating this view needs to be redisplayed because its state has changed.</summary>
        </member>
        <member name="T:Terminal.Gui.TreeView">
            <summary>
                Convenience implementation of generic <see cref="T:Terminal.Gui.TreeView`1"/> for any tree were all nodes implement
                <see cref="T:Terminal.Gui.ITreeNode"/>. <a href="../docs/treeview.md">See TreeView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView.#ctor">
            <summary>
                Creates a new instance of the tree control with absolute positioning and initialises
                <see cref="T:Terminal.Gui.TreeBuilder`1"/> with default <see cref="T:Terminal.Gui.ITreeNode"/> based builder.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TreeView`1">
            <summary>
                Hierarchical tree view with expandable branches. Branch objects are dynamically determined when expanded using
                a user defined <see cref="T:Terminal.Gui.ITreeBuilder`1"/>.
                <a href="../docs/treeview.md">See TreeView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.NoBuilderError">
            <summary>
                Error message to display when the control is not properly initialized at draw time (nodes added but no tree
                builder set).
            </summary>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.Filter">
            <summary>
                Interface for filtering which lines of the tree are displayed e.g. to provide text searching.  Defaults to
                <see langword="null"/> (no filtering).
            </summary>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.multiSelectedRegions">
            <summary>Secondary selected regions of tree when <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is true.</summary>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.cachedLineMap">
            <summary>Cached result of <see cref="M:Terminal.Gui.TreeView`1.BuildLineMap"/></summary>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.selectedObject">
            <summary>private variable for <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/></summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.#ctor">
            <summary>
                Creates a new tree view with absolute positioning. Use <see cref="M:Terminal.Gui.TreeView`1.AddObjects(System.Collections.Generic.IEnumerable{`0})"/> to set set
                root objects for the tree. Children will not be rendered until you set <see cref="P:Terminal.Gui.TreeView`1.TreeBuilder"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.#ctor(Terminal.Gui.ITreeBuilder{`0})">
            <summary>
                Initialises <see cref="P:Terminal.Gui.TreeView`1.TreeBuilder"/>.Creates a new tree view with absolute positioning. Use
                <see cref="M:Terminal.Gui.TreeView`1.AddObjects(System.Collections.Generic.IEnumerable{`0})"/> to set set root objects for the tree.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.AllowLetterBasedNavigation">
            <summary>True makes a letter key press navigate to the next visible branch that begins with that letter/digit.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.AspectGetter">
            <summary>
                Returns the string representation of model objects hosted in the tree. Default implementation is to call
                <see cref="M:System.Object.ToString"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ColorGetter">
            <summary>
                Delegate for multi colored tree views. Return the <see cref="T:Terminal.Gui.ColorScheme"/> to use for each passed object or
                null to use the default.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ContentHeight">
            <summary>The current number of rows in the tree (ignoring the controls bounds).</summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.KeystrokeNavigator">
            <summary>
                Gets the <see cref="T:Terminal.Gui.CollectionNavigator"/> that searches the <see cref="P:Terminal.Gui.TreeView`1.Objects"/> collection as the user
                types.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.MaxDepth">
            <summary>Maximum number of nodes that can be expanded in any given branch.</summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.MultiSelect">
            <summary>True to allow multiple objects to be selected at once.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ObjectActivationButton">
            <summary>
                Mouse event to trigger <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/>. Defaults to double click (
                <see cref="F:Terminal.Gui.MouseFlags.Button1DoubleClicked"/>). Set to null to disable this feature.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ObjectActivationKey">
            <summary>Key which when pressed triggers <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/>. Defaults to Enter.</summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.Objects">
            <summary>The root objects in the tree, note that this collection is of root objects only.</summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ScrollOffsetHorizontal">
            <summary>The amount of tree view that has been scrolled to the right (horizontally).</summary>
            <remarks>
                Setting a value of less than 0 will result in a offset of 0. To see changes in the UI call
                <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical">
            <summary>The amount of tree view that has been scrolled off the top of the screen (by the user scrolling down).</summary>
            <remarks>
                Setting a value of less than 0 will result in a offset of 0. To see changes in the UI call
                <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.SelectedObject">
            <summary>
                The currently selected object in the tree. When <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is true this is the object at which
                the cursor is at.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.TreeBuilder">
            <summary>Determines how sub branches of the tree are dynamically built at runtime as the user expands root nodes.</summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.roots">
            <summary>
                Map of root objects to the branches under them. All objects have a <see cref="T:Terminal.Gui.Branch`1"/> even if that branch
                has no children.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.Style">
            <summary>Contains options for changing how the tree is rendered.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ClearObjects">
            <summary>Removes all objects from the tree and clears <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ActivateSelectedObjectIfAny">
            <summary>
                <para>Triggers the <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/> event with the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/>.</para>
                <para>This method also ensures that the selected object is visible.</para>
            </summary>
            <returns><see langword="true"/> if <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/> was fired.</returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AddObject(`0)">
            <summary>Adds a new root level object unless it is already a root of the tree.</summary>
            <param name="o"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AddObjects(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds many new root level objects. Objects that are already root objects are ignored.</summary>
            <param name="collection">Objects to add as new root level objects.</param>
            .\
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelection(System.Int32,System.Boolean)">
            <summary>
                The number of screen lines to move the currently selected object by. Supports negative values.
                <paramref name="offset"/>. Each branch occupies 1 line on screen.
            </summary>
            <remarks>
                If nothing is currently selected or the selected object is no longer in the tree then the first object in the
                tree is selected instead.
            </remarks>
            <param name="offset">Positive to move the selection down the screen, negative to move it up</param>
            <param name="expandSelection">
                True to expand the selection (assuming <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is enabled). False to
                replace.
            </param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelectionToBranchEnd">
            <summary>Moves the selection to the last child in the currently selected level.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelectionToBranchStart">
            <summary>Moves the selection to the first child in the currently selected level.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelectionToNextItemBeginningWith(System.Char,System.StringComparison)">
            <summary>
                <para>Moves the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> to the next item that begins with <paramref name="character"/>.</para>
                <para>This method will loop back to the start of the tree if reaching the end without finding a match.</para>
            </summary>
            <param name="character">The first character of the next item you want selected.</param>
            <param name="caseSensitivity">Case sensitivity of the search.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CanExpand(`0)">
            <summary>
                Returns true if the given object <paramref name="o"/> is exposed in the tree and can be expanded otherwise
                false.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Collapse">
            <summary>Collapses the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/></summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Collapse(`0)">
            <summary>Collapses the supplied object if it is currently expanded .</summary>
            <param name="toCollapse">The object to collapse.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CollapseAll(`0)">
            <summary>
                Collapses the supplied object if it is currently expanded. Also collapses all children branches (this will
                only become apparent when/if the user expands it again).
            </summary>
            <param name="toCollapse">The object to collapse.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CollapseAll">
            <summary>Collapses all root nodes in the tree.</summary>
        </member>
        <member name="E:Terminal.Gui.TreeView`1.DrawLine">
            <summary>
                Called once for each visible row during rendering.  Can be used to make last minute changes to color or text
                rendered
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.EnsureVisible(`0)">
            <summary>
                Adjusts the <see cref="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical"/> to ensure the given <paramref name="model"/> is visible. Has no
                effect if already visible.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Expand">
            <summary>Expands the currently <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Expand(`0)">
            <summary>
                Expands the supplied object if it is contained in the tree (either as a root object or as an exposed branch
                object).
            </summary>
            <param name="toExpand">The object to expand.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ExpandAll(`0)">
            <summary>Expands the supplied object and all child objects.</summary>
            <param name="toExpand">The object to expand.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ExpandAll">
            <summary>
                Fully expands all nodes in the tree, if the tree is very big and built dynamically this may take a while (e.g.
                for file system).
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetAllSelectedObjects">
            <summary>
                Returns <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> (if not null) and all multi selected objects if <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/>
                is true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetChildren(`0)">
            <summary>
                Returns the currently expanded children of the passed object. Returns an empty collection if the branch is not
                exposed or not expanded.
            </summary>
            <param name="o">An object in the tree.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetContentWidth(System.Boolean)">
            <summary>Returns the maximum width line in the tree including prefix and expansion symbols.</summary>
            <param name="visible">
                True to consider only rows currently visible (based on window bounds and
                <see cref="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical"/>. False to calculate the width of every exposed branch in the tree.
            </param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetObjectOnRow(System.Int32)">
            <summary>
                Returns the object in the tree list that is currently visible. at the provided row. Returns null if no object
                is at that location.
                <remarks></remarks>
                If you have screen coordinates then use <see cref="M:Terminal.Gui.View.ScreenToFrame(System.Drawing.Point@)"/> to translate these into the client area of
                the <see cref="T:Terminal.Gui.TreeView`1"/>.
            </summary>
            <param name="row">The row of the <see cref="P:Terminal.Gui.View.Viewport"/> of the <see cref="T:Terminal.Gui.TreeView`1"/>.</param>
            <returns>The object currently displayed on this row or null.</returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetObjectRow(`0)">
            <summary>
                <para>
                    Returns the Y coordinate within the <see cref="P:Terminal.Gui.View.Viewport"/> of the tree at which <paramref name="toFind"/>
                    would be displayed or null if it is not currently exposed (e.g. its parent is collapsed).
                </para>
                <para>
                    Note that the returned value can be negative if the TreeView is scrolled down and the
                    <paramref name="toFind"/> object is off the top of the view.
                </para>
            </summary>
            <param name="toFind"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetParent(`0)">
            <summary>
                Returns the parent object of <paramref name="o"/> in the tree. Returns null if the object is not exposed in
                the tree.
            </summary>
            <param name="o">An object in the tree.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetScrollOffsetOf(`0)">
            <summary>
                Returns the index of the object <paramref name="o"/> if it is currently exposed (it's parent(s) have been
                expanded). This can be used with <see cref="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical"/> and <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/> to
                scroll to a specific object.
            </summary>
            <remarks>Uses the Equals method and returns the first index at which the object is found or -1 if it is not found.</remarks>
            <param name="o">An object that appears in your tree and is currently exposed.</param>
            <returns>The index the object was found at or -1 if it is not currently revealed or not in the tree at all.</returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GoTo(`0)">
            <summary>
                Changes the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> to <paramref name="toSelect"/> and scrolls to ensure it is visible.
                Has no effect if <paramref name="toSelect"/> is not exposed in the tree (e.g. its parents are collapsed).
            </summary>
            <param name="toSelect"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GoToEnd">
            <summary>Changes the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> to the last object in the tree and scrolls so that it is visible.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GoToFirst">
            <summary>
                Changes the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> to the first root object and resets the
                <see cref="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical"/> to 0.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.InvalidateLineMap">
            <summary>Clears any cached results of the tree state.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.IsExpanded(`0)">
            <summary>Returns true if the given object <paramref name="o"/> is exposed in the tree and expanded otherwise false.</summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.IsSelected(`0)">
            <summary>
                Returns true if the <paramref name="model"/> is either the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> or part of a
                <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/>.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.MovePageDown(System.Boolean)">
            <summary>Moves the selection down by the height of the control (1 page).</summary>
            <param name="expandSelection">True if the navigation should add the covered nodes to the selected current selection.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.MovePageUp(System.Boolean)">
            <summary>Moves the selection up by the height of the control (1 page).</summary>
            <param name="expandSelection">True if the navigation should add the covered nodes to the selected current selection.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="E:Terminal.Gui.TreeView`1.ObjectActivated">
            <summary>
                This event is raised when an object is activated e.g. by double clicking or pressing
                <see cref="P:Terminal.Gui.TreeView`1.ObjectActivationKey"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnDrawContent(System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnProcessKeyDown(Terminal.Gui.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.PositionCursor">
            <summary>Positions the cursor at the start of the selected objects line (if visible).</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.RebuildTree">
            <summary>
                Rebuilds the tree structure for all exposed objects starting with the root objects. Call this method when you
                know there are changes to the tree but don't know which objects have changed (otherwise use
                <see cref="M:Terminal.Gui.TreeView`1.RefreshObject(`0,System.Boolean)"/>).
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.RefreshObject(`0,System.Boolean)">
            <summary>
                Refreshes the state of the object <paramref name="o"/> in the tree. This will recompute children, string
                representation etc.
            </summary>
            <remarks>This has no effect if the object is not exposed in the tree.</remarks>
            <param name="o"></param>
            <param name="startAtTop">
                True to also refresh all ancestors of the objects branch (starting with the root). False to
                refresh only the passed node.
            </param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Remove(`0)">
            <summary>Removes the given root object from the tree</summary>
            <remarks>If <paramref name="o"/> is the currently <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> then the selection is cleared</remarks>
            .
            <param name="o"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ScrollDown">
            <summary>Scrolls the view area down a single line without changing the current selection.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ScrollUp">
            <summary>Scrolls the view area up a single line without changing the current selection.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.SelectAll">
            <summary>Selects all objects in the tree when <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is enabled otherwise does nothing.</summary>
        </member>
        <member name="E:Terminal.Gui.TreeView`1.SelectionChanged">
            <summary>Called when the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> changes.</summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CollapseImpl(`0,System.Boolean)">
            <summary>
                Implementation of <see cref="M:Terminal.Gui.TreeView`1.Collapse(`0)"/> and <see cref="M:Terminal.Gui.TreeView`1.CollapseAll(`0)"/>. Performs operation and updates
                selection if disapeared.
            </summary>
            <param name="toCollapse"></param>
            <param name="all"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CursorLeft(System.Boolean)">
            <summary>
                Determines systems behaviour when the left arrow key is pressed. Default behaviour is to collapse the current
                tree node if possible otherwise changes selection to current branches parent.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnObjectActivated(Terminal.Gui.ObjectActivatedEventArgs{`0})">
            <summary>Raises the <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/> event.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnSelectionChanged(Terminal.Gui.SelectionChangedEventArgs{`0})">
            <summary>Raises the SelectionChanged event.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.BuildLineMap">
            <summary>
                Calculates all currently visible/expanded branches (including leafs) and outputs them by index from the top of
                the screen.
            </summary>
            <remarks>
                Index 0 of the returned array is the first item that should be visible in the top of the control, index 1 is
                the next etc.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnDrawLine(Terminal.Gui.DrawTreeViewLineEventArgs{`0})">
            <summary>Raises the DrawLine event</summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelectionToNext(System.Func{Terminal.Gui.Branch{`0},System.Boolean})">
            <summary>Sets the selection to the next branch that matches the <paramref name="predicate"/>.</summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.HitTest(System.Int32)">
            <summary>Returns the branch at the given <paramref name="y"/> client coordinate e.g. following a click event.</summary>
            <param name="y">Client Y position in the controls bounds.</param>
            <returns>The clicked branch or null if outside of tree region.</returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ObjectToBranch(`0)">
            <summary>
                Returns the corresponding <see cref="T:Terminal.Gui.Branch`1"/> in the tree for <paramref name="toFind"/>. This will not
                work for objects hidden by their parent being collapsed.
            </summary>
            <param name="toFind"></param>
            <returns>The branch for <paramref name="toFind"/> or null if it is not currently exposed in the tree.</returns>
        </member>
        <member name="M:Terminal.Gui.TreeSelection`1.#ctor(Terminal.Gui.Branch{`0},System.Int32,System.Collections.Generic.IReadOnlyCollection{Terminal.Gui.Branch{`0}})">
            <summary>Creates a new selection between two branches in the tree</summary>
            <param name="from"></param>
            <param name="toIndex"></param>
            <param name="map"></param>
        </member>
        <member name="T:Terminal.Gui.TreeViewTextFilter`1">
            <summary>
                <see cref="T:Terminal.Gui.ITreeViewFilter`1"/> implementation which searches the <see cref="P:Terminal.Gui.TreeView`1.AspectGetter"/> of
                the model for the given <see cref="P:Terminal.Gui.TreeViewTextFilter`1.Text"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Terminal.Gui.TreeViewTextFilter`1.#ctor(Terminal.Gui.TreeView{`0})">
            <summary>
                Creates a new instance of the filter for use with <paramref name="forTree"/>. Set <see cref="P:Terminal.Gui.TreeViewTextFilter`1.Text"/> to begin
                filtering.
            </summary>
            <param name="forTree"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Terminal.Gui.TreeViewTextFilter`1.Comparer">
            <summary>The case sensitivity of the search match. Defaults to <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.TreeViewTextFilter`1.Text">
            <summary>The text that will be searched for in the <see cref="T:Terminal.Gui.TreeView`1"/></summary>
        </member>
        <member name="M:Terminal.Gui.TreeViewTextFilter`1.IsMatch(`0)">
            <summary>
                Returns <typeparamref name="T"/> if there is no <see cref="P:Terminal.Gui.TreeViewTextFilter`1.Text"/> or the text matches the
                <see cref="P:Terminal.Gui.TreeView`1.AspectGetter"/> of the <paramref name="model"/>.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Window">
            <summary>
                A <see cref="T:Terminal.Gui.Toplevel"/> <see cref="T:Terminal.Gui.View"/> with <see cref="P:Terminal.Gui.View.BorderStyle"/> set to
                <see cref="F:Terminal.Gui.LineStyle.Single"/>. Provides a container for other views.
            </summary>
            <remarks>
                <para>
                    If any subview is a button and the <see cref="P:Terminal.Gui.Button.IsDefault"/> property is set to true, the Enter key will
                    invoke the <see cref="F:Terminal.Gui.Command.Accept"/> command on that subview.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
                positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Window.DefaultBorderStyle">
            <summary>
                The default <see cref="T:Terminal.Gui.LineStyle"/> for <see cref="T:Terminal.Gui.Window"/>'s border. The default is
                <see cref="F:Terminal.Gui.LineStyle.Single"/>.
            </summary>
            <remarks>
                This property can be set in a Theme to change the default <see cref="T:Terminal.Gui.LineStyle"/> for all <see cref="T:Terminal.Gui.Window"/>
                s.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.Wizard">
            <summary>
                Provides navigation and a user interface (UI) to collect related data across multiple steps. Each step (
                <see cref="T:Terminal.Gui.WizardStep"/>) can host arbitrary <see cref="T:Terminal.Gui.View"/>s, much like a <see cref="T:Terminal.Gui.Dialog"/>. Each step also
                has a pane for help text. Along the bottom of the Wizard view are customizable buttons enabling the user to
                navigate forward and backward through the Wizard.
            </summary>
            <remarks>
                The Wizard can be displayed either as a modal (pop-up) <see cref="T:Terminal.Gui.Window"/> (like <see cref="T:Terminal.Gui.Dialog"/>) or as
                an embedded <see cref="T:Terminal.Gui.View"/>. By default, <see cref="P:Terminal.Gui.Wizard.Modal"/> is <c>true</c>. In this case launch the
                Wizard with <c>Application.Run(wizard)</c>. See <see cref="P:Terminal.Gui.Wizard.Modal"/> for more details.
            </remarks>
            <example>
                <code>
            using Terminal.Gui;
            using System.Text;
            
            Application.Init();
            
            var wizard = new Wizard ($"Setup Wizard");
            
            // Add 1st step
            var firstStep = new WizardStep ("End User License Agreement");
            wizard.AddStep(firstStep);
            firstStep.NextButtonText = "Accept!";
            firstStep.HelpText = "This is the End User License Agreement.";
            
            // Add 2nd step
            var secondStep = new WizardStep ("Second Step");
            wizard.AddStep(secondStep);
            secondStep.HelpText = "This is the help text for the Second Step.";
            var lbl = new Label () { Text = "Name:" };
            secondStep.Add(lbl);
            
            var name = new TextField { X = Pos.Right (lbl) + 1, Width = Dim.Fill () - 1 };
            secondStep.Add(name);
            
            wizard.Finished += (args) =>
            {
                MessageBox.Query("Wizard", $"Finished. The Name entered is '{name.Text}'", "Ok");
                Application.RequestStop();
            };
            
            Application.Top.Add (wizard);
            Application.Run ();
            Application.Shutdown ();
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Wizard.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Wizard"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
                positioning.
            </summary>
            <remarks>
                The Wizard will be vertically and horizontally centered in the container. After initialization use <c>X</c>,
                <c>Y</c>, <c>Width</c>, and <c>Height</c> change size and position.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Wizard.BackButton">
            <summary>
                If the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is not the first step in the wizard, this button causes the
                <see cref="E:Terminal.Gui.Wizard.MovingBack"/> event to be fired and the wizard moves to the previous step.
            </summary>
            <remarks>Use the <see cref="E:Terminal.Gui.Wizard.MovingBack"></see> event to be notified when the user attempts to go back.</remarks>
        </member>
        <member name="P:Terminal.Gui.Wizard.CurrentStep">
            <summary>Gets or sets the currently active <see cref="T:Terminal.Gui.WizardStep"/>.</summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.Modal">
            <summary>
                Determines whether the <see cref="T:Terminal.Gui.Wizard"/> is displayed as modal pop-up or not. The default is
                <see langword="true"/>. The Wizard will be shown with a frame and title and will behave like any
                <see cref="T:Terminal.Gui.Toplevel"/> window. If set to <c>false</c> the Wizard will have no frame and will behave like any
                embedded <see cref="T:Terminal.Gui.View"/>. To use Wizard as an embedded View
                <list type="number">
                    <item>
                        <description>Set <see cref="P:Terminal.Gui.Wizard.Modal"/> to <c>false</c>.</description>
                    </item>
                    <item>
                        <description>Add the Wizard to a containing view with <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/>.</description>
                    </item>
                </list>
                If a non-Modal Wizard is added to the application after <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver)"/> has
                been called the first step must be explicitly set by setting <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> to
                <see cref="M:Terminal.Gui.Wizard.GetNextStep"/>:
                <code>
               wizard.CurrentStep = wizard.GetNextStep();
            </code>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.NextFinishButton">
            <summary>
                If the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is the last step in the wizard, this button causes the <see cref="E:Terminal.Gui.Wizard.Finished"/>
                event to be fired and the wizard to close. If the step is not the last step, the <see cref="E:Terminal.Gui.Wizard.MovingNext"/> event
                will be fired and the wizard will move next step.
            </summary>
            <remarks>
                Use the <see cref="E:Terminal.Gui.Wizard.MovingNext"></see> and <see cref="E:Terminal.Gui.Wizard.Finished"></see> events to be notified when the user
                attempts go to the next step or finish the wizard.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Wizard.AddStep(Terminal.Gui.WizardStep)">
            <summary>
                Adds a step to the wizard. The Next and Back buttons navigate through the added steps in the order they were
                added.
            </summary>
            <param name="newStep"></param>
            <remarks>The "Next..." button of the last step added will read "Finish" (unless changed from default).</remarks>
        </member>
        <member name="E:Terminal.Gui.Wizard.Cancelled">
            <summary>
                Raised when the user has cancelled the <see cref="T:Terminal.Gui.Wizard"/> by pressin the Esc key. To prevent a modal (
                <see cref="P:Terminal.Gui.Wizard.Modal"/> is <c>true</c>) Wizard from closing, cancel the event by setting
                <see cref="P:Terminal.Gui.WizardButtonEventArgs.Cancel"/> to <c>true</c> before returning from the event handler.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Wizard.Finished">
            <summary>
                Raised when the Next/Finish button in the <see cref="T:Terminal.Gui.Wizard"/> is clicked. The Next/Finish button is always
                the last button in the array of Buttons passed to the <see cref="T:Terminal.Gui.Wizard"/> constructor, if any. This event is only
                raised if the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is the last Step in the Wizard flow (otherwise the <see cref="E:Terminal.Gui.Wizard.Finished"/>
                event is raised).
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.GetFirstStep">
            <summary>Returns the first enabled step in the Wizard</summary>
            <returns>The last enabled step</returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.GetLastStep">
            <summary>Returns the last enabled step in the Wizard</summary>
            <returns>The last enabled step</returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.GetNextStep">
            <summary>
                Returns the next enabled <see cref="T:Terminal.Gui.WizardStep"/> after the current step. Takes into account steps which are
                disabled. If <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is <c>null</c> returns the first enabled step.
            </summary>
            <returns>
                The next step after the current step, if there is one; otherwise returns <c>null</c>, which indicates either
                there are no enabled steps or the current step is the last enabled step.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.GetPreviousStep">
            <summary>
                Returns the first enabled <see cref="T:Terminal.Gui.WizardStep"/> before the current step. Takes into account steps which are
                disabled. If <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is <c>null</c> returns the last enabled step.
            </summary>
            <returns>
                The first step ahead of the current step, if there is one; otherwise returns <c>null</c>, which indicates
                either there are no enabled steps or the current step is the first enabled step.
            </returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.GoBack">
            <summary>
                Causes the wizad to move to the previous enabled step (or first step if <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is not set).
                If there is no previous step, does nothing.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.GoNext">
            <summary>
                Causes the wizad to move to the next enabled step (or last step if <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is not set). If
                there is no previous step, does nothing.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.GoToStep(Terminal.Gui.WizardStep)">
            <summary>Changes to the specified <see cref="T:Terminal.Gui.WizardStep"/>.</summary>
            <param name="newStep">The step to go to.</param>
            <returns>True if the transition to the step succeeded. False if the step was not found or the operation was cancelled.</returns>
        </member>
        <member name="E:Terminal.Gui.Wizard.MovingBack">
            <summary>
                Raised when the Back button in the <see cref="T:Terminal.Gui.Wizard"/> is clicked. The Back button is always the first button
                in the array of Buttons passed to the <see cref="T:Terminal.Gui.Wizard"/> constructor, if any.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Wizard.MovingNext">
            <summary>
                Raised when the Next/Finish button in the <see cref="T:Terminal.Gui.Wizard"/> is clicked (or the user presses Enter). The
                Next/Finish button is always the last button in the array of Buttons passed to the <see cref="T:Terminal.Gui.Wizard"/>
                constructor, if any. This event is only raised if the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is the last Step in the Wizard flow
                (otherwise the <see cref="E:Terminal.Gui.Wizard.Finished"/> event is raised).
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.OnProcessKeyDown(Terminal.Gui.Key)">
            <summary>
                <see cref="T:Terminal.Gui.Wizard"/> is derived from <see cref="T:Terminal.Gui.Dialog"/> and Dialog causes <c>Esc</c> to call
                <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/>, closing the Dialog. Wizard overrides
                <see cref="M:Terminal.Gui.Wizard.OnProcessKeyDown(Terminal.Gui.Key)"/> to instead fire the <see cref="E:Terminal.Gui.Wizard.Cancelled"/> event when Wizard is being used as a
                non-modal (see <see cref="P:Terminal.Gui.Wizard.Modal"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.OnStepChanged(Terminal.Gui.WizardStep,Terminal.Gui.WizardStep)">
            <summary>
                Called when the <see cref="T:Terminal.Gui.Wizard"/> has completed transition to a new <see cref="T:Terminal.Gui.WizardStep"/>. Fires the
                <see cref="E:Terminal.Gui.Wizard.StepChanged"/> event.
            </summary>
            <param name="oldStep">The step the Wizard changed from</param>
            <param name="newStep">The step the Wizard has changed to</param>
            <returns>True if the change is to be cancelled.</returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.OnStepChanging(Terminal.Gui.WizardStep,Terminal.Gui.WizardStep)">
            <summary>
                Called when the <see cref="T:Terminal.Gui.Wizard"/> is about to transition to another <see cref="T:Terminal.Gui.WizardStep"/>. Fires the
                <see cref="E:Terminal.Gui.Wizard.StepChanging"/> event.
            </summary>
            <param name="oldStep">The step the Wizard is about to change from</param>
            <param name="newStep">The step the Wizard is about to change to</param>
            <returns>True if the change is to be cancelled.</returns>
        </member>
        <member name="E:Terminal.Gui.Wizard.StepChanged">
            <summary>This event is raised after the <see cref="T:Terminal.Gui.Wizard"/> has changed the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/>.</summary>
        </member>
        <member name="E:Terminal.Gui.Wizard.StepChanging">
            <summary>
                This event is raised when the current <see cref="P:Terminal.Gui.Wizard.CurrentStep"/>) is about to change. Use
                <see cref="P:Terminal.Gui.StepChangeEventArgs.Cancel"/> to abort the transition.
            </summary>
        </member>
        <member name="T:Terminal.Gui.WizardButtonEventArgs">
            <summary><see cref="T:System.EventArgs"/> for <see cref="T:Terminal.Gui.WizardStep"/> transition events.</summary>
        </member>
        <member name="M:Terminal.Gui.WizardButtonEventArgs.#ctor">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.WizardButtonEventArgs"/></summary>
        </member>
        <member name="P:Terminal.Gui.WizardButtonEventArgs.Cancel">
            <summary>Set to true to cancel the transition to the next step.</summary>
        </member>
        <member name="T:Terminal.Gui.StepChangeEventArgs">
            <summary><see cref="T:System.EventArgs"/> for <see cref="T:Terminal.Gui.WizardStep"/> events.</summary>
        </member>
        <member name="M:Terminal.Gui.StepChangeEventArgs.#ctor(Terminal.Gui.WizardStep,Terminal.Gui.WizardStep)">
            <summary>Initializes a new instance of <see cref="T:Terminal.Gui.StepChangeEventArgs"/></summary>
            <param name="oldStep">The current <see cref="T:Terminal.Gui.WizardStep"/>.</param>
            <param name="newStep">The new <see cref="T:Terminal.Gui.WizardStep"/>.</param>
        </member>
        <member name="P:Terminal.Gui.StepChangeEventArgs.Cancel">
            <summary>Event handlers can set to true before returning to cancel the step transition.</summary>
        </member>
        <member name="P:Terminal.Gui.StepChangeEventArgs.NewStep">
            <summary>The <see cref="T:Terminal.Gui.WizardStep"/> the <see cref="T:Terminal.Gui.Wizard"/> is changing to or has changed to.</summary>
        </member>
        <member name="P:Terminal.Gui.StepChangeEventArgs.OldStep">
            <summary>The current (or previous) <see cref="T:Terminal.Gui.WizardStep"/>.</summary>
        </member>
        <member name="T:Terminal.Gui.WizardStep">
            <summary>
                Represents a basic step that is displayed in a <see cref="T:Terminal.Gui.Wizard"/>. The <see cref="T:Terminal.Gui.WizardStep"/> view is
                divided horizontally in two. On the left is the content view where <see cref="T:Terminal.Gui.View"/>s can be added,  On the right
                is the help for the step. Set <see cref="P:Terminal.Gui.WizardStep.HelpText"/> to set the help text. If the help text is empty the
                help pane will not be shown. If there are no Views added to the WizardStep the <see cref="P:Terminal.Gui.WizardStep.HelpText"/> (if not
                empty) will fill the wizard step.
            </summary>
            <remarks>
                If <see cref="T:Terminal.Gui.Button"/>s are added, do not set <see cref="P:Terminal.Gui.Button.IsDefault"/> to true as this will conflict
                with the Next button of the Wizard. Subscribe to the <see cref="E:Terminal.Gui.View.VisibleChanged"/> event to be notified when
                the step is active; see also: <see cref="E:Terminal.Gui.Wizard.StepChanged"/>. To enable or disable a step from being shown to the
                user, set <see cref="P:Terminal.Gui.View.Enabled"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.WizardStep.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Terminal.Gui.Wizard"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
                positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.WizardStep.BackButtonText">
            <summary>Sets or gets the text for the back button. The back button will only be visible on steps after the first step.</summary>
            <remarks>The default text is "Back"</remarks>
        </member>
        <member name="P:Terminal.Gui.WizardStep.HelpText">
            <summary>
                Sets or gets help text for the <see cref="T:Terminal.Gui.WizardStep"/>.If <see cref="P:Terminal.Gui.WizardStep.HelpText"/> is empty the help
                pane will not be visible and the content will fill the entire WizardStep.
            </summary>
            <remarks>The help text is displayed using a read-only <see cref="T:Terminal.Gui.TextView"/>.</remarks>
        </member>
        <member name="P:Terminal.Gui.WizardStep.NextButtonText">
            <summary>Sets or gets the text for the next/finish button.</summary>
            <remarks>The default text is "Next..." if the Pane is not the last pane. Otherwise it is "Finish"</remarks>
        </member>
        <member name="M:Terminal.Gui.WizardStep.Add(Terminal.Gui.View)">
            <summary>Add the specified <see cref="T:Terminal.Gui.View"/> to the <see cref="T:Terminal.Gui.WizardStep"/>.</summary>
            <param name="view"><see cref="T:Terminal.Gui.View"/> to add to this container</param>
        </member>
        <member name="M:Terminal.Gui.WizardStep.Remove(Terminal.Gui.View)">
            <summary>Removes a <see cref="T:Terminal.Gui.View"/> from <see cref="T:Terminal.Gui.WizardStep"/>.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Terminal.Gui.WizardStep.RemoveAll">
            <summary>Removes all <see cref="T:Terminal.Gui.View"/>s from the <see cref="T:Terminal.Gui.WizardStep"/>.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Terminal.Gui.WizardStep.ShowHide">
            <summary>Does the work to show and hide the contentView and helpView as appropriate</summary>
        </member>
        <member name="T:Terminal.Gui.Analyzers.Internal.Attributes.IExtensionsForEnumTypeAttributes">
            <summary>
                Interface to simplify general enumeration of constructed generic types for
                <see cref="T:Terminal.Gui.Analyzers.Internal.Attributes.ExtensionsForEnumTypeAttribute`1"/>
            </summary>
        </member>
        <member name="T:Terminal.Gui.Analyzers.Internal.Attributes.AssemblyExtendedEnumTypeAttribute">
            <summary>Assembly attribute declaring a known pairing of an <see langword="enum" /> type to an extension class.</summary>
            <remarks>This attribute should only be written by internal source generators for Terminal.Gui. No other usage of any kind is supported.</remarks>
        </member>
        <member name="M:Terminal.Gui.Analyzers.Internal.Attributes.AssemblyExtendedEnumTypeAttribute.#ctor(System.Type,System.Type)">
            <summary>Creates a new instance of <see cref="T:Terminal.Gui.Analyzers.Internal.Attributes.AssemblyExtendedEnumTypeAttribute" /> from the provided parameters.</summary>
            <param name="enumType">The <see cref="T:System.Type" /> of an <see langword="enum" /> decorated with a <see cref="T:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute" />.</param>
            <param name="extensionClass">The <see cref="T:System.Type" /> of the <see langword="class" /> decorated with an <see cref="T:Terminal.Gui.Analyzers.Internal.Attributes.ExtensionsForEnumTypeAttribute`1" /> referring to the same type as <paramref name="enumType" />.</param>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.AssemblyExtendedEnumTypeAttribute.EnumType">
            <summary>An <see langword="enum" /> type that has been extended by Terminal.Gui source generators.</summary>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.AssemblyExtendedEnumTypeAttribute.ExtensionClass">
            <summary>A class containing extension methods for <see cref="P:Terminal.Gui.Analyzers.Internal.Attributes.AssemblyExtendedEnumTypeAttribute.EnumType"/>.</summary>
        </member>
        <member name="M:Terminal.Gui.Analyzers.Internal.Attributes.AssemblyExtendedEnumTypeAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute">
            <summary>
                Used to enable source generation of a common set of extension methods for enum types.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute.ClassName">
            <summary>
                The name of the generated static class.
            </summary>
            <remarks>
                If unspecified, null, empty, or only whitespace, defaults to the name of the enum plus "Extensions".<br/>
                No other validation is performed, so illegal values will simply result in compiler errors.
                <para>
                    Explicitly specifying a default value is unnecessary and will result in unnecessary processing.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute.ClassNamespace">
            <summary>
                The namespace in which to place the generated static class containing the extension methods.
            </summary>
            <remarks>
                If unspecified, null, empty, or only whitespace, defaults to the namespace of the enum.<br/>
                No other validation is performed, so illegal values will simply result in compiler errors.
                <para>
                    Explicitly specifying a default value is unnecessary and will result in unnecessary processing.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute.FastHasFlags">
            <summary>
                Whether to generate a fast, zero-allocation, non-boxing, and reflection-free alternative to the built-in
                <see cref="M:System.Enum.HasFlag(System.Enum)"/> method.
            </summary>
            <remarks>
                <para>
                    Default: false
                </para>
                <para>
                    If the enum is not decorated with <see cref="!:Flags"/>, this option has no effect.
                </para>
                <para>
                    If multiple members have the same value, the first member with that value will be used and subsequent members
                    with the same value will be skipped.
                </para>
                <para>
                    Overloads taking the enum type itself as well as the underlying type of the enum will be generated, enabling
                    avoidance of implicit or explicit cast overhead.
                </para>
                <para>
                    Explicitly specifying a default value is unnecessary and will result in unnecessary processing.
                </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute.FastIsDefined">
            <summary>
                Whether to generate a fast, zero-allocation, and reflection-free alternative to the built-in
                <see cref="M:System.Enum.IsDefined(System.Type,System.Object)"/> method,
                using a switch expression as a hard-coded reverse mapping of numeric values to explicitly-named members.
            </summary>
            <remarks>
                <para>
                    Default: true
                </para>
                <para>
                    If multiple members have the same value, the first member with that value will be used and subsequent members
                    with the same value will be skipped.
                </para>
                <para>
                    As with <see cref="M:System.Enum.IsDefined(System.Type,System.Object)"/> the source generator only considers explicitly-named members.<br/>
                    Generation of values which represent valid bitwise combinations of members of enums decorated with
                    <see cref="!:Flags"/> is not affected by this property.
                </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute.IsDefaultAttribute">
            <summary>
                Gets a <see langword="bool"/> value indicating if this <see cref="T:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute"/> instance
                contains default values only. See <see href="#remarks">remarks</see> of this method or documentation on properties of this type for details.
            </summary>
            <returns>
                A <see langword="bool"/> value indicating if all property values are default for this
                <see cref="T:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute"/> instance.
            </returns>
            <remarks>
                Default values that will result in a <see langword="true"/> return value are:<br/>
                <see cref="P:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute.FastIsDefined"/> &amp;&amp; !<see cref="P:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute.FastHasFlags"/> &amp;&amp; <see cref="P:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute.ClassName"/>
                <see langword="is"/> <see langword="null"/> &amp;&amp; <see cref="P:Terminal.Gui.Analyzers.Internal.Attributes.GenerateEnumExtensionMethodsAttribute.ClassNamespace"/> <see langword="is"/>
                <see langword="null"/>
            </remarks>
        </member>
        <member name="T:Terminal.Gui.Analyzers.Internal.Attributes.ExtensionsForEnumTypeAttribute`1">
            <summary>
                Attribute written by the source generator for enum extension classes, for easier analysis and reflection.
            </summary>
            <remarks>
                Properties are just convenient shortcuts to properties of <typeparamref name="TEnum"/>.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.ExtensionsForEnumTypeAttribute`1.EnumFullName">
            <summary>
                The namespace-qualified name of <typeparamref name="TEnum"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.ExtensionsForEnumTypeAttribute`1.EnumName">
            <summary>
                The unqualified name of <typeparamref name="TEnum"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.ExtensionsForEnumTypeAttribute`1.EnumNamespace">
            <summary>
                The namespace containing <typeparamref name="TEnum"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Analyzers.Internal.Attributes.ExtensionsForEnumTypeAttribute`1.EnumType">
            <summary>
                The <see cref="T:System.Type"/> given by <see langword="typeof"/>(<typeparamref name="TEnum"/>).
            </summary>
        </member>
        <member name="T:Terminal.Gui.ViewDiagnosticFlagsExtensions">
            <summary>Extension methods for the <see cref="T:Terminal.Gui.ViewDiagnosticFlags"/> <see langword="enum" /> type.</summary>
        </member>
        <member name="M:Terminal.Gui.ViewDiagnosticFlagsExtensions.AsInt32(Terminal.Gui.ViewDiagnosticFlags)">
            <summary>Directly converts this <see cref="T:Terminal.Gui.ViewDiagnosticFlags" /> value to an <see langword="int" /> value with the same binary representation.</summary>
            <remarks>NO VALIDATION IS PERFORMED!</remarks>
        </member>
        <member name="M:Terminal.Gui.ViewDiagnosticFlagsExtensions.AsUInt32(Terminal.Gui.ViewDiagnosticFlags)">
            <summary>Directly converts this <see cref="T:Terminal.Gui.ViewDiagnosticFlags" /> value to a <see langword="uint" /> value with the same binary representation.</summary>
            <remarks>NO VALIDATION IS PERFORMED!</remarks>
        </member>
        <member name="M:Terminal.Gui.ViewDiagnosticFlagsExtensions.FastIsDefined(Terminal.Gui.ViewDiagnosticFlags,System.UInt32)">
            <summary>Determines if the specified <see langword="uint" /> value is explicitly defined as a named value of the <see cref="T:Terminal.Gui.ViewDiagnosticFlags" /> <see langword="enum" /> type.</summary>
            <remarks>Only explicitly named values return true, as with IsDefined. Combined valid flag values of flags enums which are not explicitly named will return false.</remarks>
        </member>
        <member name="M:Terminal.Gui.ViewDiagnosticFlagsExtensions.FastHasFlags(Terminal.Gui.ViewDiagnosticFlags,Terminal.Gui.ViewDiagnosticFlags)">
            <summary>Determines if the specified flags are set in the current value of this <see cref="T:Terminal.Gui.ViewDiagnosticFlags" />.</summary>
            <remarks>NO VALIDATION IS PERFORMED!</remarks>
            <returns>True, if all flags present in <paramref name="checkFlags" /> are also present in the current value of the <see cref="T:Terminal.Gui.ViewDiagnosticFlags" />.<br />Otherwise false.</returns>
        </member>
        <member name="M:Terminal.Gui.ViewDiagnosticFlagsExtensions.FastHasFlags(Terminal.Gui.ViewDiagnosticFlags,System.UInt32)">
            <summary>Determines if the specified mask bits are set in the current value of this <see cref="T:Terminal.Gui.ViewDiagnosticFlags" />.</summary>
            <param name="e">The <see cref="T:Terminal.Gui.ViewDiagnosticFlags" /> value to check against the <paramref name="mask" /> value.</param>
            <param name="mask">A mask to apply to the current value.</param>
            <returns>True, if all bits set to 1 in the mask are also set to 1 in the current value of the <see cref="T:Terminal.Gui.ViewDiagnosticFlags" />.<br />Otherwise false.</returns>
            <remarks>NO VALIDATION IS PERFORMED!</remarks>
        </member>
        <member name="M:Unix.Terminal.Curses.InitColorPair(System.Int16,System.Int16,System.Int16)">
            <summary>
                The init_pair routine changes the definition of a color-pair.It takes three arguments: the number of the
                color-pair to be changed, the  fore- ground color number, and the background color number.For portable ap-
                plications: o The first argument must be a legal color pair  value.If  default colors are used (see
                use_default_colors(3x)) the upper limit is ad- justed to allow for extra pairs which use a default color in  fore-
                ground and/or background. o The second and third arguments must be legal color values. If the  color-pair was
                previously initialized, the screen is refreshed and all occurrences of that color-pair are changed to the new
                defini- tion. As an  extension,  ncurses allows you to set color pair 0 via the as- sume_default_colors (3x)
                routine, or to specify the use of default  col- ors (color number  -1) if you first invoke the use_default_colors
                (3x) routine.
            </summary>
            <param name="pair"></param>
            <param name="foreground"></param>
            <param name="background"></param>
            <returns></returns>
        </member>
        <member name="T:Unix.Terminal.UnmanagedLibrary">
            <summary>
                Represents a dynamically loaded unmanaged library in a (partially) platform independent manner. First, the
                native library is loaded using dlopen (on Unix systems) or using LoadLibrary (on Windows). dlsym or GetProcAddress
                are then used to obtain symbol addresses. <c>Marshal.GetDelegateForFunctionPointer</c> transforms the addresses
                into delegates to native methods. See
                http://stackoverflow.com/questions/13461989/p-invoke-to-dynamically-loaded-library-on-mono.
            </summary>
        </member>
        <member name="M:Unix.Terminal.UnmanagedLibrary.LoadSymbol(System.String)">
            <summary>Loads symbol in a platform specific way.</summary>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:Unix.Terminal.UnmanagedLibrary.PlatformSpecificLoadLibrary(System.String)">
            <summary>Loads library in a platform specific way.</summary>
        </member>
        <member name="T:Unix.Terminal.UnmanagedLibrary.Mono">
            <summary>
                On Linux systems, using using dlopen and dlsym results in DllNotFoundException("libdl.so not found") if
                libc6-dev is not installed. As a workaround, we load symbols for dlopen and dlsym from the current process as on
                Linux Mono sure is linked against these symbols.
            </summary>
        </member>
        <member name="T:Unix.Terminal.UnmanagedLibrary.CoreCLR">
            <summary>
                Similarly as for Mono on Linux, we load symbols for dlopen and dlsym from the "libcoreclr.so", to avoid the
                dependency on libc-dev Linux.
            </summary>
        </member>
    </members>
</doc>
